<?php
/**
 * ConnectedAccountResponse
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Discord HTTP API (Preview)
 *
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * ConnectedAccountResponse Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ConnectedAccountResponse implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ConnectedAccountResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'type' => '\OpenAPI\Client\Model\ConnectedAccountProviders',
        'friend_sync' => 'bool',
        'integrations' => '\OpenAPI\Client\Model\ConnectedAccountIntegrationResponse[]',
        'show_activity' => 'bool',
        'two_way_link' => 'bool',
        'verified' => 'bool',
        'visibility' => '\OpenAPI\Client\Model\ConnectedAccountVisibility',
        'revoked' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'name' => null,
        'type' => null,
        'friend_sync' => null,
        'integrations' => null,
        'show_activity' => null,
        'two_way_link' => null,
        'verified' => null,
        'visibility' => null,
        'revoked' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
		'name' => true,
		'type' => true,
		'friend_sync' => false,
		'integrations' => false,
		'show_activity' => false,
		'two_way_link' => false,
		'verified' => false,
		'visibility' => true,
		'revoked' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'type' => 'type',
        'friend_sync' => 'friend_sync',
        'integrations' => 'integrations',
        'show_activity' => 'show_activity',
        'two_way_link' => 'two_way_link',
        'verified' => 'verified',
        'visibility' => 'visibility',
        'revoked' => 'revoked'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'type' => 'setType',
        'friend_sync' => 'setFriendSync',
        'integrations' => 'setIntegrations',
        'show_activity' => 'setShowActivity',
        'two_way_link' => 'setTwoWayLink',
        'verified' => 'setVerified',
        'visibility' => 'setVisibility',
        'revoked' => 'setRevoked'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'type' => 'getType',
        'friend_sync' => 'getFriendSync',
        'integrations' => 'getIntegrations',
        'show_activity' => 'getShowActivity',
        'two_way_link' => 'getTwoWayLink',
        'verified' => 'getVerified',
        'visibility' => 'getVisibility',
        'revoked' => 'getRevoked'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('friend_sync', $data ?? [], null);
        $this->setIfExists('integrations', $data ?? [], null);
        $this->setIfExists('show_activity', $data ?? [], null);
        $this->setIfExists('two_way_link', $data ?? [], null);
        $this->setIfExists('verified', $data ?? [], null);
        $this->setIfExists('visibility', $data ?? [], null);
        $this->setIfExists('revoked', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['friend_sync'] === null) {
            $invalidProperties[] = "'friend_sync' can't be null";
        }
        if ($this->container['show_activity'] === null) {
            $invalidProperties[] = "'show_activity' can't be null";
        }
        if ($this->container['two_way_link'] === null) {
            $invalidProperties[] = "'two_way_link' can't be null";
        }
        if ($this->container['verified'] === null) {
            $invalidProperties[] = "'verified' can't be null";
        }
        if ($this->container['visibility'] === null) {
            $invalidProperties[] = "'visibility' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId(): string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId(string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\ConnectedAccountProviders
     */
    public function getType(): ?\OpenAPI\Client\Model\ConnectedAccountProviders
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\ConnectedAccountProviders $type type
     *
     * @return $this
     */
    public function setType(?\OpenAPI\Client\Model\ConnectedAccountProviders $type): static
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets friend_sync
     *
     * @return bool
     */
    public function getFriendSync(): bool
    {
        return $this->container['friend_sync'];
    }

    /**
     * Sets friend_sync
     *
     * @param bool $friend_sync friend_sync
     *
     * @return $this
     */
    public function setFriendSync(bool $friend_sync): static
    {
        if (is_null($friend_sync)) {
            throw new InvalidArgumentException('non-nullable friend_sync cannot be null');
        }
        $this->container['friend_sync'] = $friend_sync;

        return $this;
    }

    /**
     * Gets integrations
     *
     * @return \OpenAPI\Client\Model\ConnectedAccountIntegrationResponse[]|null
     */
    public function getIntegrations(): ?array
    {
        return $this->container['integrations'];
    }

    /**
     * Sets integrations
     *
     * @param \OpenAPI\Client\Model\ConnectedAccountIntegrationResponse[]|null $integrations integrations
     *
     * @return $this
     */
    public function setIntegrations(?array $integrations): static
    {
        if (is_null($integrations)) {
            throw new InvalidArgumentException('non-nullable integrations cannot be null');
        }
        $this->container['integrations'] = $integrations;

        return $this;
    }

    /**
     * Gets show_activity
     *
     * @return bool
     */
    public function getShowActivity(): bool
    {
        return $this->container['show_activity'];
    }

    /**
     * Sets show_activity
     *
     * @param bool $show_activity show_activity
     *
     * @return $this
     */
    public function setShowActivity(bool $show_activity): static
    {
        if (is_null($show_activity)) {
            throw new InvalidArgumentException('non-nullable show_activity cannot be null');
        }
        $this->container['show_activity'] = $show_activity;

        return $this;
    }

    /**
     * Gets two_way_link
     *
     * @return bool
     */
    public function getTwoWayLink(): bool
    {
        return $this->container['two_way_link'];
    }

    /**
     * Sets two_way_link
     *
     * @param bool $two_way_link two_way_link
     *
     * @return $this
     */
    public function setTwoWayLink(bool $two_way_link): static
    {
        if (is_null($two_way_link)) {
            throw new InvalidArgumentException('non-nullable two_way_link cannot be null');
        }
        $this->container['two_way_link'] = $two_way_link;

        return $this;
    }

    /**
     * Gets verified
     *
     * @return bool
     */
    public function getVerified(): bool
    {
        return $this->container['verified'];
    }

    /**
     * Sets verified
     *
     * @param bool $verified verified
     *
     * @return $this
     */
    public function setVerified(bool $verified): static
    {
        if (is_null($verified)) {
            throw new InvalidArgumentException('non-nullable verified cannot be null');
        }
        $this->container['verified'] = $verified;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return \OpenAPI\Client\Model\ConnectedAccountVisibility
     */
    public function getVisibility(): ?\OpenAPI\Client\Model\ConnectedAccountVisibility
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param \OpenAPI\Client\Model\ConnectedAccountVisibility $visibility visibility
     *
     * @return $this
     */
    public function setVisibility(?\OpenAPI\Client\Model\ConnectedAccountVisibility $visibility): static
    {
        if (is_null($visibility)) {
            array_push($this->openAPINullablesSetToNull, 'visibility');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('visibility', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets revoked
     *
     * @return bool|null
     */
    public function getRevoked(): ?bool
    {
        return $this->container['revoked'];
    }

    /**
     * Sets revoked
     *
     * @param bool|null $revoked revoked
     *
     * @return $this
     */
    public function setRevoked(?bool $revoked): static
    {
        if (is_null($revoked)) {
            array_push($this->openAPINullablesSetToNull, 'revoked');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('revoked', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['revoked'] = $revoked;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


