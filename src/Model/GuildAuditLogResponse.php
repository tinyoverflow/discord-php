<?php
/**
 * GuildAuditLogResponse
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Discord HTTP API (Preview)
 *
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * GuildAuditLogResponse Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GuildAuditLogResponse implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'GuildAuditLogResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'audit_log_entries' => '\OpenAPI\Client\Model\AuditLogEntryResponse[]',
        'users' => '\OpenAPI\Client\Model\UserResponse[]',
        'integrations' => '\OpenAPI\Client\Model\GuildAuditLogResponseIntegrationsInner[]',
        'webhooks' => '\OpenAPI\Client\Model\ListChannelWebhooks200ResponseInner[]',
        'guild_scheduled_events' => '\OpenAPI\Client\Model\GetGuildScheduledEvent200Response[]',
        'threads' => '\OpenAPI\Client\Model\ThreadResponse[]',
        'application_commands' => '\OpenAPI\Client\Model\ApplicationCommandResponse[]',
        'auto_moderation_rules' => '\OpenAPI\Client\Model\ListAutoModerationRules200ResponseInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'audit_log_entries' => null,
        'users' => null,
        'integrations' => null,
        'webhooks' => null,
        'guild_scheduled_events' => null,
        'threads' => null,
        'application_commands' => null,
        'auto_moderation_rules' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'audit_log_entries' => false,
		'users' => false,
		'integrations' => false,
		'webhooks' => false,
		'guild_scheduled_events' => false,
		'threads' => false,
		'application_commands' => false,
		'auto_moderation_rules' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'audit_log_entries' => 'audit_log_entries',
        'users' => 'users',
        'integrations' => 'integrations',
        'webhooks' => 'webhooks',
        'guild_scheduled_events' => 'guild_scheduled_events',
        'threads' => 'threads',
        'application_commands' => 'application_commands',
        'auto_moderation_rules' => 'auto_moderation_rules'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'audit_log_entries' => 'setAuditLogEntries',
        'users' => 'setUsers',
        'integrations' => 'setIntegrations',
        'webhooks' => 'setWebhooks',
        'guild_scheduled_events' => 'setGuildScheduledEvents',
        'threads' => 'setThreads',
        'application_commands' => 'setApplicationCommands',
        'auto_moderation_rules' => 'setAutoModerationRules'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'audit_log_entries' => 'getAuditLogEntries',
        'users' => 'getUsers',
        'integrations' => 'getIntegrations',
        'webhooks' => 'getWebhooks',
        'guild_scheduled_events' => 'getGuildScheduledEvents',
        'threads' => 'getThreads',
        'application_commands' => 'getApplicationCommands',
        'auto_moderation_rules' => 'getAutoModerationRules'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('audit_log_entries', $data ?? [], null);
        $this->setIfExists('users', $data ?? [], null);
        $this->setIfExists('integrations', $data ?? [], null);
        $this->setIfExists('webhooks', $data ?? [], null);
        $this->setIfExists('guild_scheduled_events', $data ?? [], null);
        $this->setIfExists('threads', $data ?? [], null);
        $this->setIfExists('application_commands', $data ?? [], null);
        $this->setIfExists('auto_moderation_rules', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['audit_log_entries'] === null) {
            $invalidProperties[] = "'audit_log_entries' can't be null";
        }
        if ($this->container['users'] === null) {
            $invalidProperties[] = "'users' can't be null";
        }
        if ($this->container['integrations'] === null) {
            $invalidProperties[] = "'integrations' can't be null";
        }
        if ($this->container['webhooks'] === null) {
            $invalidProperties[] = "'webhooks' can't be null";
        }
        if ($this->container['guild_scheduled_events'] === null) {
            $invalidProperties[] = "'guild_scheduled_events' can't be null";
        }
        if ($this->container['threads'] === null) {
            $invalidProperties[] = "'threads' can't be null";
        }
        if ($this->container['application_commands'] === null) {
            $invalidProperties[] = "'application_commands' can't be null";
        }
        if ($this->container['auto_moderation_rules'] === null) {
            $invalidProperties[] = "'auto_moderation_rules' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets audit_log_entries
     *
     * @return \OpenAPI\Client\Model\AuditLogEntryResponse[]
     */
    public function getAuditLogEntries(): array
    {
        return $this->container['audit_log_entries'];
    }

    /**
     * Sets audit_log_entries
     *
     * @param \OpenAPI\Client\Model\AuditLogEntryResponse[] $audit_log_entries audit_log_entries
     *
     * @return $this
     */
    public function setAuditLogEntries(array $audit_log_entries): static
    {
        if (is_null($audit_log_entries)) {
            throw new InvalidArgumentException('non-nullable audit_log_entries cannot be null');
        }
        $this->container['audit_log_entries'] = $audit_log_entries;

        return $this;
    }

    /**
     * Gets users
     *
     * @return \OpenAPI\Client\Model\UserResponse[]
     */
    public function getUsers(): array
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param \OpenAPI\Client\Model\UserResponse[] $users users
     *
     * @return $this
     */
    public function setUsers(array $users): static
    {
        if (is_null($users)) {
            throw new InvalidArgumentException('non-nullable users cannot be null');
        }
        $this->container['users'] = $users;

        return $this;
    }

    /**
     * Gets integrations
     *
     * @return \OpenAPI\Client\Model\GuildAuditLogResponseIntegrationsInner[]
     */
    public function getIntegrations(): array
    {
        return $this->container['integrations'];
    }

    /**
     * Sets integrations
     *
     * @param \OpenAPI\Client\Model\GuildAuditLogResponseIntegrationsInner[] $integrations integrations
     *
     * @return $this
     */
    public function setIntegrations(array $integrations): static
    {
        if (is_null($integrations)) {
            throw new InvalidArgumentException('non-nullable integrations cannot be null');
        }
        $this->container['integrations'] = $integrations;

        return $this;
    }

    /**
     * Gets webhooks
     *
     * @return \OpenAPI\Client\Model\ListChannelWebhooks200ResponseInner[]
     */
    public function getWebhooks(): array
    {
        return $this->container['webhooks'];
    }

    /**
     * Sets webhooks
     *
     * @param \OpenAPI\Client\Model\ListChannelWebhooks200ResponseInner[] $webhooks webhooks
     *
     * @return $this
     */
    public function setWebhooks(array $webhooks): static
    {
        if (is_null($webhooks)) {
            throw new InvalidArgumentException('non-nullable webhooks cannot be null');
        }
        $this->container['webhooks'] = $webhooks;

        return $this;
    }

    /**
     * Gets guild_scheduled_events
     *
     * @return \OpenAPI\Client\Model\GetGuildScheduledEvent200Response[]
     */
    public function getGuildScheduledEvents(): array
    {
        return $this->container['guild_scheduled_events'];
    }

    /**
     * Sets guild_scheduled_events
     *
     * @param \OpenAPI\Client\Model\GetGuildScheduledEvent200Response[] $guild_scheduled_events guild_scheduled_events
     *
     * @return $this
     */
    public function setGuildScheduledEvents(array $guild_scheduled_events): static
    {
        if (is_null($guild_scheduled_events)) {
            throw new InvalidArgumentException('non-nullable guild_scheduled_events cannot be null');
        }
        $this->container['guild_scheduled_events'] = $guild_scheduled_events;

        return $this;
    }

    /**
     * Gets threads
     *
     * @return \OpenAPI\Client\Model\ThreadResponse[]
     */
    public function getThreads(): array
    {
        return $this->container['threads'];
    }

    /**
     * Sets threads
     *
     * @param \OpenAPI\Client\Model\ThreadResponse[] $threads threads
     *
     * @return $this
     */
    public function setThreads(array $threads): static
    {
        if (is_null($threads)) {
            throw new InvalidArgumentException('non-nullable threads cannot be null');
        }
        $this->container['threads'] = $threads;

        return $this;
    }

    /**
     * Gets application_commands
     *
     * @return \OpenAPI\Client\Model\ApplicationCommandResponse[]
     */
    public function getApplicationCommands(): array
    {
        return $this->container['application_commands'];
    }

    /**
     * Sets application_commands
     *
     * @param \OpenAPI\Client\Model\ApplicationCommandResponse[] $application_commands application_commands
     *
     * @return $this
     */
    public function setApplicationCommands(array $application_commands): static
    {
        if (is_null($application_commands)) {
            throw new InvalidArgumentException('non-nullable application_commands cannot be null');
        }
        $this->container['application_commands'] = $application_commands;

        return $this;
    }

    /**
     * Gets auto_moderation_rules
     *
     * @return \OpenAPI\Client\Model\ListAutoModerationRules200ResponseInner[]
     */
    public function getAutoModerationRules(): array
    {
        return $this->container['auto_moderation_rules'];
    }

    /**
     * Sets auto_moderation_rules
     *
     * @param \OpenAPI\Client\Model\ListAutoModerationRules200ResponseInner[] $auto_moderation_rules auto_moderation_rules
     *
     * @return $this
     */
    public function setAutoModerationRules(array $auto_moderation_rules): static
    {
        if (is_null($auto_moderation_rules)) {
            throw new InvalidArgumentException('non-nullable auto_moderation_rules cannot be null');
        }
        $this->container['auto_moderation_rules'] = $auto_moderation_rules;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


