<?php
/**
 * UserPIIResponse
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Discord HTTP API (Preview)
 *
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * UserPIIResponse Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class UserPIIResponse implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'UserPIIResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'string',
        'username' => 'string',
        'avatar' => 'string',
        'discriminator' => 'string',
        'public_flags' => 'int',
        'premium_type' => '\OpenAPI\Client\Model\PremiumTypes',
        'flags' => 'int',
        'bot' => 'bool',
        'system' => 'bool',
        'banner' => 'string',
        'accent_color' => 'int',
        'mfa_enabled' => 'bool',
        'locale' => '\OpenAPI\Client\Model\AvailableLocalesEnum',
        'email' => 'string',
        'verified' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => 'snowflake',
        'username' => null,
        'avatar' => null,
        'discriminator' => null,
        'public_flags' => 'int32',
        'premium_type' => null,
        'flags' => 'int64',
        'bot' => null,
        'system' => null,
        'banner' => null,
        'accent_color' => 'int32',
        'mfa_enabled' => null,
        'locale' => null,
        'email' => null,
        'verified' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
		'username' => false,
		'avatar' => true,
		'discriminator' => false,
		'public_flags' => false,
		'premium_type' => true,
		'flags' => false,
		'bot' => true,
		'system' => true,
		'banner' => true,
		'accent_color' => true,
		'mfa_enabled' => false,
		'locale' => true,
		'email' => true,
		'verified' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'username' => 'username',
        'avatar' => 'avatar',
        'discriminator' => 'discriminator',
        'public_flags' => 'public_flags',
        'premium_type' => 'premium_type',
        'flags' => 'flags',
        'bot' => 'bot',
        'system' => 'system',
        'banner' => 'banner',
        'accent_color' => 'accent_color',
        'mfa_enabled' => 'mfa_enabled',
        'locale' => 'locale',
        'email' => 'email',
        'verified' => 'verified'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'username' => 'setUsername',
        'avatar' => 'setAvatar',
        'discriminator' => 'setDiscriminator',
        'public_flags' => 'setPublicFlags',
        'premium_type' => 'setPremiumType',
        'flags' => 'setFlags',
        'bot' => 'setBot',
        'system' => 'setSystem',
        'banner' => 'setBanner',
        'accent_color' => 'setAccentColor',
        'mfa_enabled' => 'setMfaEnabled',
        'locale' => 'setLocale',
        'email' => 'setEmail',
        'verified' => 'setVerified'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'username' => 'getUsername',
        'avatar' => 'getAvatar',
        'discriminator' => 'getDiscriminator',
        'public_flags' => 'getPublicFlags',
        'premium_type' => 'getPremiumType',
        'flags' => 'getFlags',
        'bot' => 'getBot',
        'system' => 'getSystem',
        'banner' => 'getBanner',
        'accent_color' => 'getAccentColor',
        'mfa_enabled' => 'getMfaEnabled',
        'locale' => 'getLocale',
        'email' => 'getEmail',
        'verified' => 'getVerified'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('avatar', $data ?? [], null);
        $this->setIfExists('discriminator', $data ?? [], null);
        $this->setIfExists('public_flags', $data ?? [], null);
        $this->setIfExists('premium_type', $data ?? [], null);
        $this->setIfExists('flags', $data ?? [], null);
        $this->setIfExists('bot', $data ?? [], null);
        $this->setIfExists('system', $data ?? [], null);
        $this->setIfExists('banner', $data ?? [], null);
        $this->setIfExists('accent_color', $data ?? [], null);
        $this->setIfExists('mfa_enabled', $data ?? [], null);
        $this->setIfExists('locale', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('verified', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (!preg_match("/^(0|[1-9][0-9]*)$/", $this->container['id'])) {
            $invalidProperties[] = "invalid value for 'id', must be conform to the pattern /^(0|[1-9][0-9]*)$/.";
        }

        if ($this->container['username'] === null) {
            $invalidProperties[] = "'username' can't be null";
        }
        if ($this->container['discriminator'] === null) {
            $invalidProperties[] = "'discriminator' can't be null";
        }
        if ($this->container['public_flags'] === null) {
            $invalidProperties[] = "'public_flags' can't be null";
        }
        if ($this->container['flags'] === null) {
            $invalidProperties[] = "'flags' can't be null";
        }
        if (($this->container['flags'] > 9007199254740991)) {
            $invalidProperties[] = "invalid value for 'flags', must be smaller than or equal to 9007199254740991.";
        }

        if (($this->container['flags'] < -9007199254740991)) {
            $invalidProperties[] = "invalid value for 'flags', must be bigger than or equal to -9007199254740991.";
        }

        if ($this->container['mfa_enabled'] === null) {
            $invalidProperties[] = "'mfa_enabled' can't be null";
        }
        if ($this->container['locale'] === null) {
            $invalidProperties[] = "'locale' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId(): string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId(string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }

        if ((!preg_match("/^(0|[1-9][0-9]*)$/", ObjectSerializer::toString($id)))) {
            throw new InvalidArgumentException("invalid value for \$id when calling UserPIIResponse., must conform to the pattern /^(0|[1-9][0-9]*)$/.");
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername(): string
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return $this
     */
    public function setUsername(string $username): static
    {
        if (is_null($username)) {
            throw new InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets avatar
     *
     * @return string|null
     */
    public function getAvatar(): ?string
    {
        return $this->container['avatar'];
    }

    /**
     * Sets avatar
     *
     * @param string|null $avatar avatar
     *
     * @return $this
     */
    public function setAvatar(?string $avatar): static
    {
        if (is_null($avatar)) {
            array_push($this->openAPINullablesSetToNull, 'avatar');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avatar', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['avatar'] = $avatar;

        return $this;
    }

    /**
     * Gets discriminator
     *
     * @return string
     */
    public function getDiscriminator(): string
    {
        return $this->container['discriminator'];
    }

    /**
     * Sets discriminator
     *
     * @param string $discriminator discriminator
     *
     * @return $this
     */
    public function setDiscriminator(string $discriminator): static
    {
        if (is_null($discriminator)) {
            throw new InvalidArgumentException('non-nullable discriminator cannot be null');
        }
        $this->container['discriminator'] = $discriminator;

        return $this;
    }

    /**
     * Gets public_flags
     *
     * @return int
     */
    public function getPublicFlags(): int
    {
        return $this->container['public_flags'];
    }

    /**
     * Sets public_flags
     *
     * @param int $public_flags public_flags
     *
     * @return $this
     */
    public function setPublicFlags(int $public_flags): static
    {
        if (is_null($public_flags)) {
            throw new InvalidArgumentException('non-nullable public_flags cannot be null');
        }
        $this->container['public_flags'] = $public_flags;

        return $this;
    }

    /**
     * Gets premium_type
     *
     * @return \OpenAPI\Client\Model\PremiumTypes|null
     */
    public function getPremiumType(): ?\OpenAPI\Client\Model\PremiumTypes
    {
        return $this->container['premium_type'];
    }

    /**
     * Sets premium_type
     *
     * @param \OpenAPI\Client\Model\PremiumTypes|null $premium_type premium_type
     *
     * @return $this
     */
    public function setPremiumType(?\OpenAPI\Client\Model\PremiumTypes $premium_type): static
    {
        if (is_null($premium_type)) {
            array_push($this->openAPINullablesSetToNull, 'premium_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('premium_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['premium_type'] = $premium_type;

        return $this;
    }

    /**
     * Gets flags
     *
     * @return int
     */
    public function getFlags(): int
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     *
     * @param int $flags flags
     *
     * @return $this
     */
    public function setFlags(int $flags): static
    {
        if (is_null($flags)) {
            throw new InvalidArgumentException('non-nullable flags cannot be null');
        }

        if (($flags > 9007199254740991)) {
            throw new InvalidArgumentException('invalid value for $flags when calling UserPIIResponse., must be smaller than or equal to 9007199254740991.');
        }
        if (($flags < -9007199254740991)) {
            throw new InvalidArgumentException('invalid value for $flags when calling UserPIIResponse., must be bigger than or equal to -9007199254740991.');
        }

        $this->container['flags'] = $flags;

        return $this;
    }

    /**
     * Gets bot
     *
     * @return bool|null
     */
    public function getBot(): ?bool
    {
        return $this->container['bot'];
    }

    /**
     * Sets bot
     *
     * @param bool|null $bot bot
     *
     * @return $this
     */
    public function setBot(?bool $bot): static
    {
        if (is_null($bot)) {
            array_push($this->openAPINullablesSetToNull, 'bot');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bot', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bot'] = $bot;

        return $this;
    }

    /**
     * Gets system
     *
     * @return bool|null
     */
    public function getSystem(): ?bool
    {
        return $this->container['system'];
    }

    /**
     * Sets system
     *
     * @param bool|null $system system
     *
     * @return $this
     */
    public function setSystem(?bool $system): static
    {
        if (is_null($system)) {
            array_push($this->openAPINullablesSetToNull, 'system');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('system', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['system'] = $system;

        return $this;
    }

    /**
     * Gets banner
     *
     * @return string|null
     */
    public function getBanner(): ?string
    {
        return $this->container['banner'];
    }

    /**
     * Sets banner
     *
     * @param string|null $banner banner
     *
     * @return $this
     */
    public function setBanner(?string $banner): static
    {
        if (is_null($banner)) {
            array_push($this->openAPINullablesSetToNull, 'banner');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('banner', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['banner'] = $banner;

        return $this;
    }

    /**
     * Gets accent_color
     *
     * @return int|null
     */
    public function getAccentColor(): ?int
    {
        return $this->container['accent_color'];
    }

    /**
     * Sets accent_color
     *
     * @param int|null $accent_color accent_color
     *
     * @return $this
     */
    public function setAccentColor(?int $accent_color): static
    {
        if (is_null($accent_color)) {
            array_push($this->openAPINullablesSetToNull, 'accent_color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accent_color', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['accent_color'] = $accent_color;

        return $this;
    }

    /**
     * Gets mfa_enabled
     *
     * @return bool
     */
    public function getMfaEnabled(): bool
    {
        return $this->container['mfa_enabled'];
    }

    /**
     * Sets mfa_enabled
     *
     * @param bool $mfa_enabled mfa_enabled
     *
     * @return $this
     */
    public function setMfaEnabled(bool $mfa_enabled): static
    {
        if (is_null($mfa_enabled)) {
            throw new InvalidArgumentException('non-nullable mfa_enabled cannot be null');
        }
        $this->container['mfa_enabled'] = $mfa_enabled;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return \OpenAPI\Client\Model\AvailableLocalesEnum
     */
    public function getLocale(): ?\OpenAPI\Client\Model\AvailableLocalesEnum
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param \OpenAPI\Client\Model\AvailableLocalesEnum $locale locale
     *
     * @return $this
     */
    public function setLocale(?\OpenAPI\Client\Model\AvailableLocalesEnum $locale): static
    {
        if (is_null($locale)) {
            array_push($this->openAPINullablesSetToNull, 'locale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('locale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail(): ?string
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return $this
     */
    public function setEmail(?string $email): static
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets verified
     *
     * @return bool|null
     */
    public function getVerified(): ?bool
    {
        return $this->container['verified'];
    }

    /**
     * Sets verified
     *
     * @param bool|null $verified verified
     *
     * @return $this
     */
    public function setVerified(?bool $verified): static
    {
        if (is_null($verified)) {
            array_push($this->openAPINullablesSetToNull, 'verified');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('verified', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['verified'] = $verified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


