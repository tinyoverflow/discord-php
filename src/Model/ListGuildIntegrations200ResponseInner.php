<?php
/**
 * ListGuildIntegrations200ResponseInner
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Discord HTTP API (Preview)
 *
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * ListGuildIntegrations200ResponseInner Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ListGuildIntegrations200ResponseInner implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'list_guild_integrations_200_response_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'type' => '\OpenAPI\Client\Model\IntegrationTypes',
        'name' => 'mixed',
        'account' => '\OpenAPI\Client\Model\AccountResponse',
        'enabled' => 'mixed',
        'id' => 'mixed',
        'application' => '\OpenAPI\Client\Model\IntegrationApplicationResponse',
        'scopes' => 'mixed',
        'user' => '\OpenAPI\Client\Model\UserResponse',
        'revoked' => 'mixed',
        'expire_behavior' => '\OpenAPI\Client\Model\IntegrationExpireBehaviorTypes',
        'expire_grace_period' => '\OpenAPI\Client\Model\IntegrationExpireGracePeriodTypes',
        'subscriber_count' => 'mixed',
        'synced_at' => 'mixed',
        'role_id' => 'mixed',
        'syncing' => 'mixed',
        'enable_emoticons' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'type' => null,
        'name' => null,
        'account' => null,
        'enabled' => null,
        'id' => 'snowflake',
        'application' => null,
        'scopes' => null,
        'user' => null,
        'revoked' => null,
        'expire_behavior' => null,
        'expire_grace_period' => null,
        'subscriber_count' => 'int32',
        'synced_at' => 'date-time',
        'role_id' => 'snowflake',
        'syncing' => null,
        'enable_emoticons' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'type' => true,
		'name' => true,
		'account' => false,
		'enabled' => true,
		'id' => true,
		'application' => false,
		'scopes' => true,
		'user' => false,
		'revoked' => true,
		'expire_behavior' => true,
		'expire_grace_period' => true,
		'subscriber_count' => true,
		'synced_at' => true,
		'role_id' => true,
		'syncing' => true,
		'enable_emoticons' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'type' => 'type',
        'name' => 'name',
        'account' => 'account',
        'enabled' => 'enabled',
        'id' => 'id',
        'application' => 'application',
        'scopes' => 'scopes',
        'user' => 'user',
        'revoked' => 'revoked',
        'expire_behavior' => 'expire_behavior',
        'expire_grace_period' => 'expire_grace_period',
        'subscriber_count' => 'subscriber_count',
        'synced_at' => 'synced_at',
        'role_id' => 'role_id',
        'syncing' => 'syncing',
        'enable_emoticons' => 'enable_emoticons'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'type' => 'setType',
        'name' => 'setName',
        'account' => 'setAccount',
        'enabled' => 'setEnabled',
        'id' => 'setId',
        'application' => 'setApplication',
        'scopes' => 'setScopes',
        'user' => 'setUser',
        'revoked' => 'setRevoked',
        'expire_behavior' => 'setExpireBehavior',
        'expire_grace_period' => 'setExpireGracePeriod',
        'subscriber_count' => 'setSubscriberCount',
        'synced_at' => 'setSyncedAt',
        'role_id' => 'setRoleId',
        'syncing' => 'setSyncing',
        'enable_emoticons' => 'setEnableEmoticons'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'type' => 'getType',
        'name' => 'getName',
        'account' => 'getAccount',
        'enabled' => 'getEnabled',
        'id' => 'getId',
        'application' => 'getApplication',
        'scopes' => 'getScopes',
        'user' => 'getUser',
        'revoked' => 'getRevoked',
        'expire_behavior' => 'getExpireBehavior',
        'expire_grace_period' => 'getExpireGracePeriod',
        'subscriber_count' => 'getSubscriberCount',
        'synced_at' => 'getSyncedAt',
        'role_id' => 'getRoleId',
        'syncing' => 'getSyncing',
        'enable_emoticons' => 'getEnableEmoticons'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('account', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('application', $data ?? [], null);
        $this->setIfExists('scopes', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('revoked', $data ?? [], null);
        $this->setIfExists('expire_behavior', $data ?? [], null);
        $this->setIfExists('expire_grace_period', $data ?? [], null);
        $this->setIfExists('subscriber_count', $data ?? [], null);
        $this->setIfExists('synced_at', $data ?? [], null);
        $this->setIfExists('role_id', $data ?? [], null);
        $this->setIfExists('syncing', $data ?? [], null);
        $this->setIfExists('enable_emoticons', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (!preg_match("^(0|[1-9][0-9]*)$", $this->container['id'])) {
            $invalidProperties[] = "invalid value for 'id', must be conform to the pattern ^(0|[1-9][0-9]*)$.";
        }

        if ($this->container['application'] === null) {
            $invalidProperties[] = "'application' can't be null";
        }
        if ($this->container['scopes'] === null) {
            $invalidProperties[] = "'scopes' can't be null";
        }
        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        if (!is_null($this->container['role_id']) && !preg_match("^(0|[1-9][0-9]*)$", $this->container['role_id'])) {
            $invalidProperties[] = "invalid value for 'role_id', must be conform to the pattern ^(0|[1-9][0-9]*)$.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\IntegrationTypes
     */
    public function getType(): ?\OpenAPI\Client\Model\IntegrationTypes
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\IntegrationTypes $type type
     *
     * @return $this
     */
    public function setType(?\OpenAPI\Client\Model\IntegrationTypes $type): static
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return mixed|null
     */
    public function getName(): mixed
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param mixed|null $name name
     *
     * @return $this
     */
    public function setName(mixed $name): static
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets account
     *
     * @return \OpenAPI\Client\Model\AccountResponse|null
     */
    public function getAccount(): ?\OpenAPI\Client\Model\AccountResponse
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \OpenAPI\Client\Model\AccountResponse|null $account account
     *
     * @return $this
     */
    public function setAccount(?\OpenAPI\Client\Model\AccountResponse $account): static
    {
        if (is_null($account)) {
            throw new InvalidArgumentException('non-nullable account cannot be null');
        }
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return mixed|null
     */
    public function getEnabled(): mixed
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param mixed|null $enabled enabled
     *
     * @return $this
     */
    public function setEnabled(mixed $enabled): static
    {
        if (is_null($enabled)) {
            array_push($this->openAPINullablesSetToNull, 'enabled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enabled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets id
     *
     * @return mixed
     */
    public function getId(): mixed
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param mixed $id id
     *
     * @return $this
     */
    public function setId(mixed $id): static
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($id) && (!preg_match("^(0|[1-9][0-9]*)$", ObjectSerializer::toString($id)))) {
            throw new InvalidArgumentException("invalid value for \$id when calling ListGuildIntegrations200ResponseInner., must conform to the pattern ^(0|[1-9][0-9]*)$.");
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets application
     *
     * @return \OpenAPI\Client\Model\IntegrationApplicationResponse
     */
    public function getApplication(): \OpenAPI\Client\Model\IntegrationApplicationResponse
    {
        return $this->container['application'];
    }

    /**
     * Sets application
     *
     * @param \OpenAPI\Client\Model\IntegrationApplicationResponse $application application
     *
     * @return $this
     */
    public function setApplication(\OpenAPI\Client\Model\IntegrationApplicationResponse $application): static
    {
        if (is_null($application)) {
            throw new InvalidArgumentException('non-nullable application cannot be null');
        }
        $this->container['application'] = $application;

        return $this;
    }

    /**
     * Gets scopes
     *
     * @return mixed
     */
    public function getScopes(): mixed
    {
        return $this->container['scopes'];
    }

    /**
     * Sets scopes
     *
     * @param mixed $scopes scopes
     *
     * @return $this
     */
    public function setScopes(mixed $scopes): static
    {
        if (is_null($scopes)) {
            array_push($this->openAPINullablesSetToNull, 'scopes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scopes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scopes'] = $scopes;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \OpenAPI\Client\Model\UserResponse
     */
    public function getUser(): \OpenAPI\Client\Model\UserResponse
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \OpenAPI\Client\Model\UserResponse $user user
     *
     * @return $this
     */
    public function setUser(\OpenAPI\Client\Model\UserResponse $user): static
    {
        if (is_null($user)) {
            throw new InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets revoked
     *
     * @return mixed|null
     */
    public function getRevoked(): mixed
    {
        return $this->container['revoked'];
    }

    /**
     * Sets revoked
     *
     * @param mixed|null $revoked revoked
     *
     * @return $this
     */
    public function setRevoked(mixed $revoked): static
    {
        if (is_null($revoked)) {
            array_push($this->openAPINullablesSetToNull, 'revoked');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('revoked', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['revoked'] = $revoked;

        return $this;
    }

    /**
     * Gets expire_behavior
     *
     * @return \OpenAPI\Client\Model\IntegrationExpireBehaviorTypes|null
     */
    public function getExpireBehavior(): ?\OpenAPI\Client\Model\IntegrationExpireBehaviorTypes
    {
        return $this->container['expire_behavior'];
    }

    /**
     * Sets expire_behavior
     *
     * @param \OpenAPI\Client\Model\IntegrationExpireBehaviorTypes|null $expire_behavior expire_behavior
     *
     * @return $this
     */
    public function setExpireBehavior(?\OpenAPI\Client\Model\IntegrationExpireBehaviorTypes $expire_behavior): static
    {
        if (is_null($expire_behavior)) {
            array_push($this->openAPINullablesSetToNull, 'expire_behavior');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expire_behavior', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expire_behavior'] = $expire_behavior;

        return $this;
    }

    /**
     * Gets expire_grace_period
     *
     * @return \OpenAPI\Client\Model\IntegrationExpireGracePeriodTypes|null
     */
    public function getExpireGracePeriod(): ?\OpenAPI\Client\Model\IntegrationExpireGracePeriodTypes
    {
        return $this->container['expire_grace_period'];
    }

    /**
     * Sets expire_grace_period
     *
     * @param \OpenAPI\Client\Model\IntegrationExpireGracePeriodTypes|null $expire_grace_period expire_grace_period
     *
     * @return $this
     */
    public function setExpireGracePeriod(?\OpenAPI\Client\Model\IntegrationExpireGracePeriodTypes $expire_grace_period): static
    {
        if (is_null($expire_grace_period)) {
            array_push($this->openAPINullablesSetToNull, 'expire_grace_period');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expire_grace_period', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expire_grace_period'] = $expire_grace_period;

        return $this;
    }

    /**
     * Gets subscriber_count
     *
     * @return mixed|null
     */
    public function getSubscriberCount(): mixed
    {
        return $this->container['subscriber_count'];
    }

    /**
     * Sets subscriber_count
     *
     * @param mixed|null $subscriber_count subscriber_count
     *
     * @return $this
     */
    public function setSubscriberCount(mixed $subscriber_count): static
    {
        if (is_null($subscriber_count)) {
            array_push($this->openAPINullablesSetToNull, 'subscriber_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subscriber_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subscriber_count'] = $subscriber_count;

        return $this;
    }

    /**
     * Gets synced_at
     *
     * @return mixed|null
     */
    public function getSyncedAt(): mixed
    {
        return $this->container['synced_at'];
    }

    /**
     * Sets synced_at
     *
     * @param mixed|null $synced_at synced_at
     *
     * @return $this
     */
    public function setSyncedAt(mixed $synced_at): static
    {
        if (is_null($synced_at)) {
            array_push($this->openAPINullablesSetToNull, 'synced_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('synced_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['synced_at'] = $synced_at;

        return $this;
    }

    /**
     * Gets role_id
     *
     * @return mixed|null
     */
    public function getRoleId(): mixed
    {
        return $this->container['role_id'];
    }

    /**
     * Sets role_id
     *
     * @param mixed|null $role_id role_id
     *
     * @return $this
     */
    public function setRoleId(mixed $role_id): static
    {
        if (is_null($role_id)) {
            array_push($this->openAPINullablesSetToNull, 'role_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('role_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($role_id) && (!preg_match("^(0|[1-9][0-9]*)$", ObjectSerializer::toString($role_id)))) {
            throw new InvalidArgumentException("invalid value for \$role_id when calling ListGuildIntegrations200ResponseInner., must conform to the pattern ^(0|[1-9][0-9]*)$.");
        }

        $this->container['role_id'] = $role_id;

        return $this;
    }

    /**
     * Gets syncing
     *
     * @return mixed|null
     */
    public function getSyncing(): mixed
    {
        return $this->container['syncing'];
    }

    /**
     * Sets syncing
     *
     * @param mixed|null $syncing syncing
     *
     * @return $this
     */
    public function setSyncing(mixed $syncing): static
    {
        if (is_null($syncing)) {
            array_push($this->openAPINullablesSetToNull, 'syncing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('syncing', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['syncing'] = $syncing;

        return $this;
    }

    /**
     * Gets enable_emoticons
     *
     * @return mixed|null
     */
    public function getEnableEmoticons(): mixed
    {
        return $this->container['enable_emoticons'];
    }

    /**
     * Sets enable_emoticons
     *
     * @param mixed|null $enable_emoticons enable_emoticons
     *
     * @return $this
     */
    public function setEnableEmoticons(mixed $enable_emoticons): static
    {
        if (is_null($enable_emoticons)) {
            array_push($this->openAPINullablesSetToNull, 'enable_emoticons');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enable_emoticons', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enable_emoticons'] = $enable_emoticons;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


