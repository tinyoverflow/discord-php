<?php
/**
 * GuildPatchRequestPartial
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Discord HTTP API (Preview)
 *
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * GuildPatchRequestPartial Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GuildPatchRequestPartial implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'GuildPatchRequestPartial';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'name' => 'string',
        'description' => 'string',
        'region' => 'string',
        'icon' => 'string',
        'verification_level' => '\OpenAPI\Client\Model\VerificationLevels',
        'default_message_notifications' => '\OpenAPI\Client\Model\UserNotificationSettings',
        'explicit_content_filter' => '\OpenAPI\Client\Model\GuildExplicitContentFilterTypes',
        'preferred_locale' => '\OpenAPI\Client\Model\AvailableLocalesEnum',
        'afk_timeout' => '\OpenAPI\Client\Model\AfkTimeouts',
        'afk_channel_id' => 'string',
        'system_channel_id' => 'string',
        'owner_id' => 'string',
        'splash' => 'string',
        'banner' => 'string',
        'system_channel_flags' => 'int',
        'features' => 'string[]',
        'discovery_splash' => 'string',
        'home_header' => 'string',
        'rules_channel_id' => 'string',
        'safety_alerts_channel_id' => 'string',
        'public_updates_channel_id' => 'string',
        'premium_progress_bar_enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'name' => null,
        'description' => null,
        'region' => null,
        'icon' => null,
        'verification_level' => null,
        'default_message_notifications' => null,
        'explicit_content_filter' => null,
        'preferred_locale' => null,
        'afk_timeout' => null,
        'afk_channel_id' => 'snowflake',
        'system_channel_id' => 'snowflake',
        'owner_id' => 'snowflake',
        'splash' => null,
        'banner' => null,
        'system_channel_flags' => null,
        'features' => null,
        'discovery_splash' => null,
        'home_header' => null,
        'rules_channel_id' => 'snowflake',
        'safety_alerts_channel_id' => 'snowflake',
        'public_updates_channel_id' => 'snowflake',
        'premium_progress_bar_enabled' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'name' => false,
		'description' => true,
		'region' => true,
		'icon' => true,
		'verification_level' => true,
		'default_message_notifications' => true,
		'explicit_content_filter' => true,
		'preferred_locale' => true,
		'afk_timeout' => true,
		'afk_channel_id' => false,
		'system_channel_id' => false,
		'owner_id' => false,
		'splash' => true,
		'banner' => true,
		'system_channel_flags' => true,
		'features' => false,
		'discovery_splash' => true,
		'home_header' => true,
		'rules_channel_id' => false,
		'safety_alerts_channel_id' => false,
		'public_updates_channel_id' => false,
		'premium_progress_bar_enabled' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'name' => 'name',
        'description' => 'description',
        'region' => 'region',
        'icon' => 'icon',
        'verification_level' => 'verification_level',
        'default_message_notifications' => 'default_message_notifications',
        'explicit_content_filter' => 'explicit_content_filter',
        'preferred_locale' => 'preferred_locale',
        'afk_timeout' => 'afk_timeout',
        'afk_channel_id' => 'afk_channel_id',
        'system_channel_id' => 'system_channel_id',
        'owner_id' => 'owner_id',
        'splash' => 'splash',
        'banner' => 'banner',
        'system_channel_flags' => 'system_channel_flags',
        'features' => 'features',
        'discovery_splash' => 'discovery_splash',
        'home_header' => 'home_header',
        'rules_channel_id' => 'rules_channel_id',
        'safety_alerts_channel_id' => 'safety_alerts_channel_id',
        'public_updates_channel_id' => 'public_updates_channel_id',
        'premium_progress_bar_enabled' => 'premium_progress_bar_enabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'region' => 'setRegion',
        'icon' => 'setIcon',
        'verification_level' => 'setVerificationLevel',
        'default_message_notifications' => 'setDefaultMessageNotifications',
        'explicit_content_filter' => 'setExplicitContentFilter',
        'preferred_locale' => 'setPreferredLocale',
        'afk_timeout' => 'setAfkTimeout',
        'afk_channel_id' => 'setAfkChannelId',
        'system_channel_id' => 'setSystemChannelId',
        'owner_id' => 'setOwnerId',
        'splash' => 'setSplash',
        'banner' => 'setBanner',
        'system_channel_flags' => 'setSystemChannelFlags',
        'features' => 'setFeatures',
        'discovery_splash' => 'setDiscoverySplash',
        'home_header' => 'setHomeHeader',
        'rules_channel_id' => 'setRulesChannelId',
        'safety_alerts_channel_id' => 'setSafetyAlertsChannelId',
        'public_updates_channel_id' => 'setPublicUpdatesChannelId',
        'premium_progress_bar_enabled' => 'setPremiumProgressBarEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'region' => 'getRegion',
        'icon' => 'getIcon',
        'verification_level' => 'getVerificationLevel',
        'default_message_notifications' => 'getDefaultMessageNotifications',
        'explicit_content_filter' => 'getExplicitContentFilter',
        'preferred_locale' => 'getPreferredLocale',
        'afk_timeout' => 'getAfkTimeout',
        'afk_channel_id' => 'getAfkChannelId',
        'system_channel_id' => 'getSystemChannelId',
        'owner_id' => 'getOwnerId',
        'splash' => 'getSplash',
        'banner' => 'getBanner',
        'system_channel_flags' => 'getSystemChannelFlags',
        'features' => 'getFeatures',
        'discovery_splash' => 'getDiscoverySplash',
        'home_header' => 'getHomeHeader',
        'rules_channel_id' => 'getRulesChannelId',
        'safety_alerts_channel_id' => 'getSafetyAlertsChannelId',
        'public_updates_channel_id' => 'getPublicUpdatesChannelId',
        'premium_progress_bar_enabled' => 'getPremiumProgressBarEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('icon', $data ?? [], null);
        $this->setIfExists('verification_level', $data ?? [], null);
        $this->setIfExists('default_message_notifications', $data ?? [], null);
        $this->setIfExists('explicit_content_filter', $data ?? [], null);
        $this->setIfExists('preferred_locale', $data ?? [], null);
        $this->setIfExists('afk_timeout', $data ?? [], null);
        $this->setIfExists('afk_channel_id', $data ?? [], null);
        $this->setIfExists('system_channel_id', $data ?? [], null);
        $this->setIfExists('owner_id', $data ?? [], null);
        $this->setIfExists('splash', $data ?? [], null);
        $this->setIfExists('banner', $data ?? [], null);
        $this->setIfExists('system_channel_flags', $data ?? [], null);
        $this->setIfExists('features', $data ?? [], null);
        $this->setIfExists('discovery_splash', $data ?? [], null);
        $this->setIfExists('home_header', $data ?? [], null);
        $this->setIfExists('rules_channel_id', $data ?? [], null);
        $this->setIfExists('safety_alerts_channel_id', $data ?? [], null);
        $this->setIfExists('public_updates_channel_id', $data ?? [], null);
        $this->setIfExists('premium_progress_bar_enabled', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) < 2)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 1024)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) < 0)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['afk_channel_id']) && !preg_match("/^(0|[1-9][0-9]*)$/", $this->container['afk_channel_id'])) {
            $invalidProperties[] = "invalid value for 'afk_channel_id', must be conform to the pattern /^(0|[1-9][0-9]*)$/.";
        }

        if (!is_null($this->container['system_channel_id']) && !preg_match("/^(0|[1-9][0-9]*)$/", $this->container['system_channel_id'])) {
            $invalidProperties[] = "invalid value for 'system_channel_id', must be conform to the pattern /^(0|[1-9][0-9]*)$/.";
        }

        if (!is_null($this->container['owner_id']) && !preg_match("/^(0|[1-9][0-9]*)$/", $this->container['owner_id'])) {
            $invalidProperties[] = "invalid value for 'owner_id', must be conform to the pattern /^(0|[1-9][0-9]*)$/.";
        }

        if (!is_null($this->container['rules_channel_id']) && !preg_match("/^(0|[1-9][0-9]*)$/", $this->container['rules_channel_id'])) {
            $invalidProperties[] = "invalid value for 'rules_channel_id', must be conform to the pattern /^(0|[1-9][0-9]*)$/.";
        }

        if (!is_null($this->container['safety_alerts_channel_id']) && !preg_match("/^(0|[1-9][0-9]*)$/", $this->container['safety_alerts_channel_id'])) {
            $invalidProperties[] = "invalid value for 'safety_alerts_channel_id', must be conform to the pattern /^(0|[1-9][0-9]*)$/.";
        }

        if (!is_null($this->container['public_updates_channel_id']) && !preg_match("/^(0|[1-9][0-9]*)$/", $this->container['public_updates_channel_id'])) {
            $invalidProperties[] = "invalid value for 'public_updates_channel_id', must be conform to the pattern /^(0|[1-9][0-9]*)$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 100)) {
            throw new InvalidArgumentException('invalid length for $name when calling GuildPatchRequestPartial., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($name) < 2)) {
            throw new InvalidArgumentException('invalid length for $name when calling GuildPatchRequestPartial., must be bigger than or equal to 2.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($description) && (mb_strlen($description) > 1024)) {
            throw new InvalidArgumentException('invalid length for $description when calling GuildPatchRequestPartial., must be smaller than or equal to 1024.');
        }
        if (!is_null($description) && (mb_strlen($description) < 0)) {
            throw new InvalidArgumentException('invalid length for $description when calling GuildPatchRequestPartial., must be bigger than or equal to 0.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion(): ?string
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region region
     *
     * @return $this
     */
    public function setRegion(?string $region): static
    {
        if (is_null($region)) {
            array_push($this->openAPINullablesSetToNull, 'region');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('region', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return string|null
     */
    public function getIcon(): ?string
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string|null $icon icon
     *
     * @return $this
     */
    public function setIcon(?string $icon): static
    {
        if (is_null($icon)) {
            array_push($this->openAPINullablesSetToNull, 'icon');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('icon', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets verification_level
     *
     * @return \OpenAPI\Client\Model\VerificationLevels|null
     */
    public function getVerificationLevel(): ?\OpenAPI\Client\Model\VerificationLevels
    {
        return $this->container['verification_level'];
    }

    /**
     * Sets verification_level
     *
     * @param \OpenAPI\Client\Model\VerificationLevels|null $verification_level verification_level
     *
     * @return $this
     */
    public function setVerificationLevel(?\OpenAPI\Client\Model\VerificationLevels $verification_level): static
    {
        if (is_null($verification_level)) {
            array_push($this->openAPINullablesSetToNull, 'verification_level');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('verification_level', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['verification_level'] = $verification_level;

        return $this;
    }

    /**
     * Gets default_message_notifications
     *
     * @return \OpenAPI\Client\Model\UserNotificationSettings|null
     */
    public function getDefaultMessageNotifications(): ?\OpenAPI\Client\Model\UserNotificationSettings
    {
        return $this->container['default_message_notifications'];
    }

    /**
     * Sets default_message_notifications
     *
     * @param \OpenAPI\Client\Model\UserNotificationSettings|null $default_message_notifications default_message_notifications
     *
     * @return $this
     */
    public function setDefaultMessageNotifications(?\OpenAPI\Client\Model\UserNotificationSettings $default_message_notifications): static
    {
        if (is_null($default_message_notifications)) {
            array_push($this->openAPINullablesSetToNull, 'default_message_notifications');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_message_notifications', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_message_notifications'] = $default_message_notifications;

        return $this;
    }

    /**
     * Gets explicit_content_filter
     *
     * @return \OpenAPI\Client\Model\GuildExplicitContentFilterTypes|null
     */
    public function getExplicitContentFilter(): ?\OpenAPI\Client\Model\GuildExplicitContentFilterTypes
    {
        return $this->container['explicit_content_filter'];
    }

    /**
     * Sets explicit_content_filter
     *
     * @param \OpenAPI\Client\Model\GuildExplicitContentFilterTypes|null $explicit_content_filter explicit_content_filter
     *
     * @return $this
     */
    public function setExplicitContentFilter(?\OpenAPI\Client\Model\GuildExplicitContentFilterTypes $explicit_content_filter): static
    {
        if (is_null($explicit_content_filter)) {
            array_push($this->openAPINullablesSetToNull, 'explicit_content_filter');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('explicit_content_filter', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['explicit_content_filter'] = $explicit_content_filter;

        return $this;
    }

    /**
     * Gets preferred_locale
     *
     * @return \OpenAPI\Client\Model\AvailableLocalesEnum|null
     */
    public function getPreferredLocale(): ?\OpenAPI\Client\Model\AvailableLocalesEnum
    {
        return $this->container['preferred_locale'];
    }

    /**
     * Sets preferred_locale
     *
     * @param \OpenAPI\Client\Model\AvailableLocalesEnum|null $preferred_locale preferred_locale
     *
     * @return $this
     */
    public function setPreferredLocale(?\OpenAPI\Client\Model\AvailableLocalesEnum $preferred_locale): static
    {
        if (is_null($preferred_locale)) {
            array_push($this->openAPINullablesSetToNull, 'preferred_locale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preferred_locale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preferred_locale'] = $preferred_locale;

        return $this;
    }

    /**
     * Gets afk_timeout
     *
     * @return \OpenAPI\Client\Model\AfkTimeouts|null
     */
    public function getAfkTimeout(): ?\OpenAPI\Client\Model\AfkTimeouts
    {
        return $this->container['afk_timeout'];
    }

    /**
     * Sets afk_timeout
     *
     * @param \OpenAPI\Client\Model\AfkTimeouts|null $afk_timeout afk_timeout
     *
     * @return $this
     */
    public function setAfkTimeout(?\OpenAPI\Client\Model\AfkTimeouts $afk_timeout): static
    {
        if (is_null($afk_timeout)) {
            array_push($this->openAPINullablesSetToNull, 'afk_timeout');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('afk_timeout', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['afk_timeout'] = $afk_timeout;

        return $this;
    }

    /**
     * Gets afk_channel_id
     *
     * @return string|null
     */
    public function getAfkChannelId(): ?string
    {
        return $this->container['afk_channel_id'];
    }

    /**
     * Sets afk_channel_id
     *
     * @param string|null $afk_channel_id afk_channel_id
     *
     * @return $this
     */
    public function setAfkChannelId(?string $afk_channel_id): static
    {
        if (is_null($afk_channel_id)) {
            throw new InvalidArgumentException('non-nullable afk_channel_id cannot be null');
        }

        if ((!preg_match("/^(0|[1-9][0-9]*)$/", ObjectSerializer::toString($afk_channel_id)))) {
            throw new InvalidArgumentException("invalid value for \$afk_channel_id when calling GuildPatchRequestPartial., must conform to the pattern /^(0|[1-9][0-9]*)$/.");
        }

        $this->container['afk_channel_id'] = $afk_channel_id;

        return $this;
    }

    /**
     * Gets system_channel_id
     *
     * @return string|null
     */
    public function getSystemChannelId(): ?string
    {
        return $this->container['system_channel_id'];
    }

    /**
     * Sets system_channel_id
     *
     * @param string|null $system_channel_id system_channel_id
     *
     * @return $this
     */
    public function setSystemChannelId(?string $system_channel_id): static
    {
        if (is_null($system_channel_id)) {
            throw new InvalidArgumentException('non-nullable system_channel_id cannot be null');
        }

        if ((!preg_match("/^(0|[1-9][0-9]*)$/", ObjectSerializer::toString($system_channel_id)))) {
            throw new InvalidArgumentException("invalid value for \$system_channel_id when calling GuildPatchRequestPartial., must conform to the pattern /^(0|[1-9][0-9]*)$/.");
        }

        $this->container['system_channel_id'] = $system_channel_id;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return string|null
     */
    public function getOwnerId(): ?string
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param string|null $owner_id owner_id
     *
     * @return $this
     */
    public function setOwnerId(?string $owner_id): static
    {
        if (is_null($owner_id)) {
            throw new InvalidArgumentException('non-nullable owner_id cannot be null');
        }

        if ((!preg_match("/^(0|[1-9][0-9]*)$/", ObjectSerializer::toString($owner_id)))) {
            throw new InvalidArgumentException("invalid value for \$owner_id when calling GuildPatchRequestPartial., must conform to the pattern /^(0|[1-9][0-9]*)$/.");
        }

        $this->container['owner_id'] = $owner_id;

        return $this;
    }

    /**
     * Gets splash
     *
     * @return string|null
     */
    public function getSplash(): ?string
    {
        return $this->container['splash'];
    }

    /**
     * Sets splash
     *
     * @param string|null $splash splash
     *
     * @return $this
     */
    public function setSplash(?string $splash): static
    {
        if (is_null($splash)) {
            array_push($this->openAPINullablesSetToNull, 'splash');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('splash', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['splash'] = $splash;

        return $this;
    }

    /**
     * Gets banner
     *
     * @return string|null
     */
    public function getBanner(): ?string
    {
        return $this->container['banner'];
    }

    /**
     * Sets banner
     *
     * @param string|null $banner banner
     *
     * @return $this
     */
    public function setBanner(?string $banner): static
    {
        if (is_null($banner)) {
            array_push($this->openAPINullablesSetToNull, 'banner');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('banner', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['banner'] = $banner;

        return $this;
    }

    /**
     * Gets system_channel_flags
     *
     * @return int|null
     */
    public function getSystemChannelFlags(): ?int
    {
        return $this->container['system_channel_flags'];
    }

    /**
     * Sets system_channel_flags
     *
     * @param int|null $system_channel_flags system_channel_flags
     *
     * @return $this
     */
    public function setSystemChannelFlags(?int $system_channel_flags): static
    {
        if (is_null($system_channel_flags)) {
            array_push($this->openAPINullablesSetToNull, 'system_channel_flags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('system_channel_flags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['system_channel_flags'] = $system_channel_flags;

        return $this;
    }

    /**
     * Gets features
     *
     * @return string[]|null
     */
    public function getFeatures(): ?array
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param string[]|null $features features
     *
     * @return $this
     */
    public function setFeatures(?array $features): static
    {
        if (is_null($features)) {
            throw new InvalidArgumentException('non-nullable features cannot be null');
        }
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets discovery_splash
     *
     * @return string|null
     */
    public function getDiscoverySplash(): ?string
    {
        return $this->container['discovery_splash'];
    }

    /**
     * Sets discovery_splash
     *
     * @param string|null $discovery_splash discovery_splash
     *
     * @return $this
     */
    public function setDiscoverySplash(?string $discovery_splash): static
    {
        if (is_null($discovery_splash)) {
            array_push($this->openAPINullablesSetToNull, 'discovery_splash');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discovery_splash', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['discovery_splash'] = $discovery_splash;

        return $this;
    }

    /**
     * Gets home_header
     *
     * @return string|null
     */
    public function getHomeHeader(): ?string
    {
        return $this->container['home_header'];
    }

    /**
     * Sets home_header
     *
     * @param string|null $home_header home_header
     *
     * @return $this
     */
    public function setHomeHeader(?string $home_header): static
    {
        if (is_null($home_header)) {
            array_push($this->openAPINullablesSetToNull, 'home_header');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('home_header', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['home_header'] = $home_header;

        return $this;
    }

    /**
     * Gets rules_channel_id
     *
     * @return string|null
     */
    public function getRulesChannelId(): ?string
    {
        return $this->container['rules_channel_id'];
    }

    /**
     * Sets rules_channel_id
     *
     * @param string|null $rules_channel_id rules_channel_id
     *
     * @return $this
     */
    public function setRulesChannelId(?string $rules_channel_id): static
    {
        if (is_null($rules_channel_id)) {
            throw new InvalidArgumentException('non-nullable rules_channel_id cannot be null');
        }

        if ((!preg_match("/^(0|[1-9][0-9]*)$/", ObjectSerializer::toString($rules_channel_id)))) {
            throw new InvalidArgumentException("invalid value for \$rules_channel_id when calling GuildPatchRequestPartial., must conform to the pattern /^(0|[1-9][0-9]*)$/.");
        }

        $this->container['rules_channel_id'] = $rules_channel_id;

        return $this;
    }

    /**
     * Gets safety_alerts_channel_id
     *
     * @return string|null
     */
    public function getSafetyAlertsChannelId(): ?string
    {
        return $this->container['safety_alerts_channel_id'];
    }

    /**
     * Sets safety_alerts_channel_id
     *
     * @param string|null $safety_alerts_channel_id safety_alerts_channel_id
     *
     * @return $this
     */
    public function setSafetyAlertsChannelId(?string $safety_alerts_channel_id): static
    {
        if (is_null($safety_alerts_channel_id)) {
            throw new InvalidArgumentException('non-nullable safety_alerts_channel_id cannot be null');
        }

        if ((!preg_match("/^(0|[1-9][0-9]*)$/", ObjectSerializer::toString($safety_alerts_channel_id)))) {
            throw new InvalidArgumentException("invalid value for \$safety_alerts_channel_id when calling GuildPatchRequestPartial., must conform to the pattern /^(0|[1-9][0-9]*)$/.");
        }

        $this->container['safety_alerts_channel_id'] = $safety_alerts_channel_id;

        return $this;
    }

    /**
     * Gets public_updates_channel_id
     *
     * @return string|null
     */
    public function getPublicUpdatesChannelId(): ?string
    {
        return $this->container['public_updates_channel_id'];
    }

    /**
     * Sets public_updates_channel_id
     *
     * @param string|null $public_updates_channel_id public_updates_channel_id
     *
     * @return $this
     */
    public function setPublicUpdatesChannelId(?string $public_updates_channel_id): static
    {
        if (is_null($public_updates_channel_id)) {
            throw new InvalidArgumentException('non-nullable public_updates_channel_id cannot be null');
        }

        if ((!preg_match("/^(0|[1-9][0-9]*)$/", ObjectSerializer::toString($public_updates_channel_id)))) {
            throw new InvalidArgumentException("invalid value for \$public_updates_channel_id when calling GuildPatchRequestPartial., must conform to the pattern /^(0|[1-9][0-9]*)$/.");
        }

        $this->container['public_updates_channel_id'] = $public_updates_channel_id;

        return $this;
    }

    /**
     * Gets premium_progress_bar_enabled
     *
     * @return bool|null
     */
    public function getPremiumProgressBarEnabled(): ?bool
    {
        return $this->container['premium_progress_bar_enabled'];
    }

    /**
     * Sets premium_progress_bar_enabled
     *
     * @param bool|null $premium_progress_bar_enabled premium_progress_bar_enabled
     *
     * @return $this
     */
    public function setPremiumProgressBarEnabled(?bool $premium_progress_bar_enabled): static
    {
        if (is_null($premium_progress_bar_enabled)) {
            array_push($this->openAPINullablesSetToNull, 'premium_progress_bar_enabled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('premium_progress_bar_enabled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['premium_progress_bar_enabled'] = $premium_progress_bar_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


