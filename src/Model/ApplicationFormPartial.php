<?php
/**
 * ApplicationFormPartial
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Discord HTTP API (Preview)
 *
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * ApplicationFormPartial Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ApplicationFormPartial implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ApplicationFormPartial';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'description' => '\OpenAPI\Client\Model\ApplicationFormPartialDescription',
        'icon' => 'string',
        'cover_image' => 'string',
        'team_id' => 'string',
        'flags' => 'int',
        'interactions_endpoint_url' => 'string',
        'max_participants' => 'int',
        'type' => '\OpenAPI\Client\Model\ApplicationTypes',
        'tags' => 'string[]',
        'custom_install_url' => 'string',
        'install_params' => '\OpenAPI\Client\Model\ApplicationOAuth2Params',
        'role_connections_verification_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'description' => null,
        'icon' => null,
        'cover_image' => null,
        'team_id' => 'snowflake',
        'flags' => null,
        'interactions_endpoint_url' => 'uri',
        'max_participants' => 'int32',
        'type' => null,
        'tags' => null,
        'custom_install_url' => 'uri',
        'install_params' => null,
        'role_connections_verification_url' => 'uri'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'description' => false,
		'icon' => true,
		'cover_image' => true,
		'team_id' => false,
		'flags' => true,
		'interactions_endpoint_url' => true,
		'max_participants' => true,
		'type' => true,
		'tags' => false,
		'custom_install_url' => true,
		'install_params' => true,
		'role_connections_verification_url' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'description' => 'description',
        'icon' => 'icon',
        'cover_image' => 'cover_image',
        'team_id' => 'team_id',
        'flags' => 'flags',
        'interactions_endpoint_url' => 'interactions_endpoint_url',
        'max_participants' => 'max_participants',
        'type' => 'type',
        'tags' => 'tags',
        'custom_install_url' => 'custom_install_url',
        'install_params' => 'install_params',
        'role_connections_verification_url' => 'role_connections_verification_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'description' => 'setDescription',
        'icon' => 'setIcon',
        'cover_image' => 'setCoverImage',
        'team_id' => 'setTeamId',
        'flags' => 'setFlags',
        'interactions_endpoint_url' => 'setInteractionsEndpointUrl',
        'max_participants' => 'setMaxParticipants',
        'type' => 'setType',
        'tags' => 'setTags',
        'custom_install_url' => 'setCustomInstallUrl',
        'install_params' => 'setInstallParams',
        'role_connections_verification_url' => 'setRoleConnectionsVerificationUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'description' => 'getDescription',
        'icon' => 'getIcon',
        'cover_image' => 'getCoverImage',
        'team_id' => 'getTeamId',
        'flags' => 'getFlags',
        'interactions_endpoint_url' => 'getInteractionsEndpointUrl',
        'max_participants' => 'getMaxParticipants',
        'type' => 'getType',
        'tags' => 'getTags',
        'custom_install_url' => 'getCustomInstallUrl',
        'install_params' => 'getInstallParams',
        'role_connections_verification_url' => 'getRoleConnectionsVerificationUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('icon', $data ?? [], null);
        $this->setIfExists('cover_image', $data ?? [], null);
        $this->setIfExists('team_id', $data ?? [], null);
        $this->setIfExists('flags', $data ?? [], null);
        $this->setIfExists('interactions_endpoint_url', $data ?? [], null);
        $this->setIfExists('max_participants', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('custom_install_url', $data ?? [], null);
        $this->setIfExists('install_params', $data ?? [], null);
        $this->setIfExists('role_connections_verification_url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['team_id']) && !preg_match("/^(0|[1-9][0-9]*)$/", $this->container['team_id'])) {
            $invalidProperties[] = "invalid value for 'team_id', must be conform to the pattern /^(0|[1-9][0-9]*)$/.";
        }

        if (!is_null($this->container['interactions_endpoint_url']) && (mb_strlen($this->container['interactions_endpoint_url']) > 2048)) {
            $invalidProperties[] = "invalid value for 'interactions_endpoint_url', the character length must be smaller than or equal to 2048.";
        }

        if (!is_null($this->container['max_participants']) && ($this->container['max_participants'] < -1)) {
            $invalidProperties[] = "invalid value for 'max_participants', must be bigger than or equal to -1.";
        }

        if (!is_null($this->container['custom_install_url']) && (mb_strlen($this->container['custom_install_url']) > 2048)) {
            $invalidProperties[] = "invalid value for 'custom_install_url', the character length must be smaller than or equal to 2048.";
        }

        if (!is_null($this->container['role_connections_verification_url']) && (mb_strlen($this->container['role_connections_verification_url']) > 2048)) {
            $invalidProperties[] = "invalid value for 'role_connections_verification_url', the character length must be smaller than or equal to 2048.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return \OpenAPI\Client\Model\ApplicationFormPartialDescription|null
     */
    public function getDescription(): ?\OpenAPI\Client\Model\ApplicationFormPartialDescription
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \OpenAPI\Client\Model\ApplicationFormPartialDescription|null $description description
     *
     * @return $this
     */
    public function setDescription(?\OpenAPI\Client\Model\ApplicationFormPartialDescription $description): static
    {
        if (is_null($description)) {
            throw new InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return string|null
     */
    public function getIcon(): ?string
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string|null $icon icon
     *
     * @return $this
     */
    public function setIcon(?string $icon): static
    {
        if (is_null($icon)) {
            array_push($this->openAPINullablesSetToNull, 'icon');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('icon', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets cover_image
     *
     * @return string|null
     */
    public function getCoverImage(): ?string
    {
        return $this->container['cover_image'];
    }

    /**
     * Sets cover_image
     *
     * @param string|null $cover_image cover_image
     *
     * @return $this
     */
    public function setCoverImage(?string $cover_image): static
    {
        if (is_null($cover_image)) {
            array_push($this->openAPINullablesSetToNull, 'cover_image');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cover_image', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cover_image'] = $cover_image;

        return $this;
    }

    /**
     * Gets team_id
     *
     * @return string|null
     */
    public function getTeamId(): ?string
    {
        return $this->container['team_id'];
    }

    /**
     * Sets team_id
     *
     * @param string|null $team_id team_id
     *
     * @return $this
     */
    public function setTeamId(?string $team_id): static
    {
        if (is_null($team_id)) {
            throw new InvalidArgumentException('non-nullable team_id cannot be null');
        }

        if ((!preg_match("/^(0|[1-9][0-9]*)$/", ObjectSerializer::toString($team_id)))) {
            throw new InvalidArgumentException("invalid value for \$team_id when calling ApplicationFormPartial., must conform to the pattern /^(0|[1-9][0-9]*)$/.");
        }

        $this->container['team_id'] = $team_id;

        return $this;
    }

    /**
     * Gets flags
     *
     * @return int|null
     */
    public function getFlags(): ?int
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     *
     * @param int|null $flags flags
     *
     * @return $this
     */
    public function setFlags(?int $flags): static
    {
        if (is_null($flags)) {
            array_push($this->openAPINullablesSetToNull, 'flags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('flags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['flags'] = $flags;

        return $this;
    }

    /**
     * Gets interactions_endpoint_url
     *
     * @return string|null
     */
    public function getInteractionsEndpointUrl(): ?string
    {
        return $this->container['interactions_endpoint_url'];
    }

    /**
     * Sets interactions_endpoint_url
     *
     * @param string|null $interactions_endpoint_url interactions_endpoint_url
     *
     * @return $this
     */
    public function setInteractionsEndpointUrl(?string $interactions_endpoint_url): static
    {
        if (is_null($interactions_endpoint_url)) {
            array_push($this->openAPINullablesSetToNull, 'interactions_endpoint_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('interactions_endpoint_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($interactions_endpoint_url) && (mb_strlen($interactions_endpoint_url) > 2048)) {
            throw new InvalidArgumentException('invalid length for $interactions_endpoint_url when calling ApplicationFormPartial., must be smaller than or equal to 2048.');
        }

        $this->container['interactions_endpoint_url'] = $interactions_endpoint_url;

        return $this;
    }

    /**
     * Gets max_participants
     *
     * @return int|null
     */
    public function getMaxParticipants(): ?int
    {
        return $this->container['max_participants'];
    }

    /**
     * Sets max_participants
     *
     * @param int|null $max_participants max_participants
     *
     * @return $this
     */
    public function setMaxParticipants(?int $max_participants): static
    {
        if (is_null($max_participants)) {
            array_push($this->openAPINullablesSetToNull, 'max_participants');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_participants', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($max_participants) && ($max_participants < -1)) {
            throw new InvalidArgumentException('invalid value for $max_participants when calling ApplicationFormPartial., must be bigger than or equal to -1.');
        }

        $this->container['max_participants'] = $max_participants;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\ApplicationTypes|null
     */
    public function getType(): ?\OpenAPI\Client\Model\ApplicationTypes
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\ApplicationTypes|null $type type
     *
     * @return $this
     */
    public function setType(?\OpenAPI\Client\Model\ApplicationTypes $type): static
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags(): ?array
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags
     *
     * @return $this
     */
    public function setTags(?array $tags): static
    {
        if (is_null($tags)) {
            throw new InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets custom_install_url
     *
     * @return string|null
     */
    public function getCustomInstallUrl(): ?string
    {
        return $this->container['custom_install_url'];
    }

    /**
     * Sets custom_install_url
     *
     * @param string|null $custom_install_url custom_install_url
     *
     * @return $this
     */
    public function setCustomInstallUrl(?string $custom_install_url): static
    {
        if (is_null($custom_install_url)) {
            array_push($this->openAPINullablesSetToNull, 'custom_install_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_install_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($custom_install_url) && (mb_strlen($custom_install_url) > 2048)) {
            throw new InvalidArgumentException('invalid length for $custom_install_url when calling ApplicationFormPartial., must be smaller than or equal to 2048.');
        }

        $this->container['custom_install_url'] = $custom_install_url;

        return $this;
    }

    /**
     * Gets install_params
     *
     * @return \OpenAPI\Client\Model\ApplicationOAuth2Params|null
     */
    public function getInstallParams(): ?\OpenAPI\Client\Model\ApplicationOAuth2Params
    {
        return $this->container['install_params'];
    }

    /**
     * Sets install_params
     *
     * @param \OpenAPI\Client\Model\ApplicationOAuth2Params|null $install_params install_params
     *
     * @return $this
     */
    public function setInstallParams(?\OpenAPI\Client\Model\ApplicationOAuth2Params $install_params): static
    {
        if (is_null($install_params)) {
            array_push($this->openAPINullablesSetToNull, 'install_params');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('install_params', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['install_params'] = $install_params;

        return $this;
    }

    /**
     * Gets role_connections_verification_url
     *
     * @return string|null
     */
    public function getRoleConnectionsVerificationUrl(): ?string
    {
        return $this->container['role_connections_verification_url'];
    }

    /**
     * Sets role_connections_verification_url
     *
     * @param string|null $role_connections_verification_url role_connections_verification_url
     *
     * @return $this
     */
    public function setRoleConnectionsVerificationUrl(?string $role_connections_verification_url): static
    {
        if (is_null($role_connections_verification_url)) {
            array_push($this->openAPINullablesSetToNull, 'role_connections_verification_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('role_connections_verification_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($role_connections_verification_url) && (mb_strlen($role_connections_verification_url) > 2048)) {
            throw new InvalidArgumentException('invalid length for $role_connections_verification_url when calling ApplicationFormPartial., must be smaller than or equal to 2048.');
        }

        $this->container['role_connections_verification_url'] = $role_connections_verification_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


