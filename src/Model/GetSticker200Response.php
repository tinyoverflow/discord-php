<?php
/**
 * GetSticker200Response
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Discord HTTP API (Preview)
 *
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * GetSticker200Response Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GetSticker200Response implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'get_sticker_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'mixed',
        'name' => 'mixed',
        'tags' => 'mixed',
        'type' => '\OpenAPI\Client\Model\StickerTypes',
        'format_type' => '\OpenAPI\Client\Model\StickerFormatTypes',
        'description' => 'mixed',
        'available' => 'mixed',
        'guild_id' => 'mixed',
        'user' => '\OpenAPI\Client\Model\UserResponse',
        'pack_id' => 'mixed',
        'sort_value' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => 'snowflake',
        'name' => null,
        'tags' => null,
        'type' => null,
        'format_type' => null,
        'description' => null,
        'available' => null,
        'guild_id' => 'snowflake',
        'user' => null,
        'pack_id' => 'snowflake',
        'sort_value' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => true,
		'name' => true,
		'tags' => true,
		'type' => true,
		'format_type' => true,
		'description' => true,
		'available' => true,
		'guild_id' => true,
		'user' => false,
		'pack_id' => true,
		'sort_value' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'tags' => 'tags',
        'type' => 'type',
        'format_type' => 'format_type',
        'description' => 'description',
        'available' => 'available',
        'guild_id' => 'guild_id',
        'user' => 'user',
        'pack_id' => 'pack_id',
        'sort_value' => 'sort_value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'tags' => 'setTags',
        'type' => 'setType',
        'format_type' => 'setFormatType',
        'description' => 'setDescription',
        'available' => 'setAvailable',
        'guild_id' => 'setGuildId',
        'user' => 'setUser',
        'pack_id' => 'setPackId',
        'sort_value' => 'setSortValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'tags' => 'getTags',
        'type' => 'getType',
        'format_type' => 'getFormatType',
        'description' => 'getDescription',
        'available' => 'getAvailable',
        'guild_id' => 'getGuildId',
        'user' => 'getUser',
        'pack_id' => 'getPackId',
        'sort_value' => 'getSortValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('format_type', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('available', $data ?? [], null);
        $this->setIfExists('guild_id', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('pack_id', $data ?? [], null);
        $this->setIfExists('sort_value', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (!preg_match("^(0|[1-9][0-9]*)$", $this->container['id'])) {
            $invalidProperties[] = "invalid value for 'id', must be conform to the pattern ^(0|[1-9][0-9]*)$.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['tags'] === null) {
            $invalidProperties[] = "'tags' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['available'] === null) {
            $invalidProperties[] = "'available' can't be null";
        }
        if ($this->container['guild_id'] === null) {
            $invalidProperties[] = "'guild_id' can't be null";
        }
        if (!preg_match("^(0|[1-9][0-9]*)$", $this->container['guild_id'])) {
            $invalidProperties[] = "invalid value for 'guild_id', must be conform to the pattern ^(0|[1-9][0-9]*)$.";
        }

        if ($this->container['pack_id'] === null) {
            $invalidProperties[] = "'pack_id' can't be null";
        }
        if (!preg_match("^(0|[1-9][0-9]*)$", $this->container['pack_id'])) {
            $invalidProperties[] = "invalid value for 'pack_id', must be conform to the pattern ^(0|[1-9][0-9]*)$.";
        }

        if ($this->container['sort_value'] === null) {
            $invalidProperties[] = "'sort_value' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return mixed
     */
    public function getId(): mixed
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param mixed $id id
     *
     * @return $this
     */
    public function setId(mixed $id): static
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($id) && (!preg_match("^(0|[1-9][0-9]*)$", ObjectSerializer::toString($id)))) {
            throw new InvalidArgumentException("invalid value for \$id when calling GetSticker200Response., must conform to the pattern ^(0|[1-9][0-9]*)$.");
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return mixed
     */
    public function getName(): mixed
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param mixed $name name
     *
     * @return $this
     */
    public function setName(mixed $name): static
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return mixed
     */
    public function getTags(): mixed
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param mixed $tags tags
     *
     * @return $this
     */
    public function setTags(mixed $tags): static
    {
        if (is_null($tags)) {
            array_push($this->openAPINullablesSetToNull, 'tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\StickerTypes
     */
    public function getType(): ?\OpenAPI\Client\Model\StickerTypes
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\StickerTypes $type type
     *
     * @return $this
     */
    public function setType(?\OpenAPI\Client\Model\StickerTypes $type): static
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets format_type
     *
     * @return \OpenAPI\Client\Model\StickerFormatTypes|null
     */
    public function getFormatType(): ?\OpenAPI\Client\Model\StickerFormatTypes
    {
        return $this->container['format_type'];
    }

    /**
     * Sets format_type
     *
     * @param \OpenAPI\Client\Model\StickerFormatTypes|null $format_type format_type
     *
     * @return $this
     */
    public function setFormatType(?\OpenAPI\Client\Model\StickerFormatTypes $format_type): static
    {
        if (is_null($format_type)) {
            array_push($this->openAPINullablesSetToNull, 'format_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('format_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['format_type'] = $format_type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return mixed|null
     */
    public function getDescription(): mixed
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param mixed|null $description description
     *
     * @return $this
     */
    public function setDescription(mixed $description): static
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets available
     *
     * @return mixed
     */
    public function getAvailable(): mixed
    {
        return $this->container['available'];
    }

    /**
     * Sets available
     *
     * @param mixed $available available
     *
     * @return $this
     */
    public function setAvailable(mixed $available): static
    {
        if (is_null($available)) {
            array_push($this->openAPINullablesSetToNull, 'available');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('available', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['available'] = $available;

        return $this;
    }

    /**
     * Gets guild_id
     *
     * @return mixed
     */
    public function getGuildId(): mixed
    {
        return $this->container['guild_id'];
    }

    /**
     * Sets guild_id
     *
     * @param mixed $guild_id guild_id
     *
     * @return $this
     */
    public function setGuildId(mixed $guild_id): static
    {
        if (is_null($guild_id)) {
            array_push($this->openAPINullablesSetToNull, 'guild_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('guild_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($guild_id) && (!preg_match("^(0|[1-9][0-9]*)$", ObjectSerializer::toString($guild_id)))) {
            throw new InvalidArgumentException("invalid value for \$guild_id when calling GetSticker200Response., must conform to the pattern ^(0|[1-9][0-9]*)$.");
        }

        $this->container['guild_id'] = $guild_id;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \OpenAPI\Client\Model\UserResponse|null
     */
    public function getUser(): ?\OpenAPI\Client\Model\UserResponse
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \OpenAPI\Client\Model\UserResponse|null $user user
     *
     * @return $this
     */
    public function setUser(?\OpenAPI\Client\Model\UserResponse $user): static
    {
        if (is_null($user)) {
            throw new InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets pack_id
     *
     * @return mixed
     */
    public function getPackId(): mixed
    {
        return $this->container['pack_id'];
    }

    /**
     * Sets pack_id
     *
     * @param mixed $pack_id pack_id
     *
     * @return $this
     */
    public function setPackId(mixed $pack_id): static
    {
        if (is_null($pack_id)) {
            array_push($this->openAPINullablesSetToNull, 'pack_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pack_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($pack_id) && (!preg_match("^(0|[1-9][0-9]*)$", ObjectSerializer::toString($pack_id)))) {
            throw new InvalidArgumentException("invalid value for \$pack_id when calling GetSticker200Response., must conform to the pattern ^(0|[1-9][0-9]*)$.");
        }

        $this->container['pack_id'] = $pack_id;

        return $this;
    }

    /**
     * Gets sort_value
     *
     * @return mixed
     */
    public function getSortValue(): mixed
    {
        return $this->container['sort_value'];
    }

    /**
     * Sets sort_value
     *
     * @param mixed $sort_value sort_value
     *
     * @return $this
     */
    public function setSortValue(mixed $sort_value): static
    {
        if (is_null($sort_value)) {
            array_push($this->openAPINullablesSetToNull, 'sort_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sort_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sort_value'] = $sort_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


