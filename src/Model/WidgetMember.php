<?php
/**
 * WidgetMember
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Discord HTTP API (Preview)
 *
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * WidgetMember Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class WidgetMember implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'WidgetMember';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'string',
        'username' => 'string',
        'discriminator' => '\OpenAPI\Client\Model\WidgetUserDiscriminator',
        'avatar' => 'mixed',
        'status' => 'string',
        'avatar_url' => 'string',
        'activity' => '\OpenAPI\Client\Model\WidgetActivity',
        'deaf' => 'bool',
        'mute' => 'bool',
        'self_deaf' => 'bool',
        'self_mute' => 'bool',
        'suppress' => 'bool',
        'channel_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'username' => null,
        'discriminator' => null,
        'avatar' => null,
        'status' => null,
        'avatar_url' => 'uri',
        'activity' => null,
        'deaf' => null,
        'mute' => null,
        'self_deaf' => null,
        'self_mute' => null,
        'suppress' => null,
        'channel_id' => 'snowflake'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
		'username' => false,
		'discriminator' => true,
		'avatar' => true,
		'status' => false,
		'avatar_url' => false,
		'activity' => true,
		'deaf' => true,
		'mute' => true,
		'self_deaf' => true,
		'self_mute' => true,
		'suppress' => true,
		'channel_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'username' => 'username',
        'discriminator' => 'discriminator',
        'avatar' => 'avatar',
        'status' => 'status',
        'avatar_url' => 'avatar_url',
        'activity' => 'activity',
        'deaf' => 'deaf',
        'mute' => 'mute',
        'self_deaf' => 'self_deaf',
        'self_mute' => 'self_mute',
        'suppress' => 'suppress',
        'channel_id' => 'channel_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'username' => 'setUsername',
        'discriminator' => 'setDiscriminator',
        'avatar' => 'setAvatar',
        'status' => 'setStatus',
        'avatar_url' => 'setAvatarUrl',
        'activity' => 'setActivity',
        'deaf' => 'setDeaf',
        'mute' => 'setMute',
        'self_deaf' => 'setSelfDeaf',
        'self_mute' => 'setSelfMute',
        'suppress' => 'setSuppress',
        'channel_id' => 'setChannelId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'username' => 'getUsername',
        'discriminator' => 'getDiscriminator',
        'avatar' => 'getAvatar',
        'status' => 'getStatus',
        'avatar_url' => 'getAvatarUrl',
        'activity' => 'getActivity',
        'deaf' => 'getDeaf',
        'mute' => 'getMute',
        'self_deaf' => 'getSelfDeaf',
        'self_mute' => 'getSelfMute',
        'suppress' => 'getSuppress',
        'channel_id' => 'getChannelId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('discriminator', $data ?? [], null);
        $this->setIfExists('avatar', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('avatar_url', $data ?? [], null);
        $this->setIfExists('activity', $data ?? [], null);
        $this->setIfExists('deaf', $data ?? [], null);
        $this->setIfExists('mute', $data ?? [], null);
        $this->setIfExists('self_deaf', $data ?? [], null);
        $this->setIfExists('self_mute', $data ?? [], null);
        $this->setIfExists('suppress', $data ?? [], null);
        $this->setIfExists('channel_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['username'] === null) {
            $invalidProperties[] = "'username' can't be null";
        }
        if ($this->container['discriminator'] === null) {
            $invalidProperties[] = "'discriminator' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['avatar_url'] === null) {
            $invalidProperties[] = "'avatar_url' can't be null";
        }
        if (!is_null($this->container['channel_id']) && !preg_match("/^(0|[1-9][0-9]*)$/", $this->container['channel_id'])) {
            $invalidProperties[] = "invalid value for 'channel_id', must be conform to the pattern /^(0|[1-9][0-9]*)$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId(): string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId(string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername(): string
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return $this
     */
    public function setUsername(string $username): static
    {
        if (is_null($username)) {
            throw new InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets discriminator
     *
     * @return \OpenAPI\Client\Model\WidgetUserDiscriminator
     */
    public function getDiscriminator(): ?\OpenAPI\Client\Model\WidgetUserDiscriminator
    {
        return $this->container['discriminator'];
    }

    /**
     * Sets discriminator
     *
     * @param \OpenAPI\Client\Model\WidgetUserDiscriminator $discriminator discriminator
     *
     * @return $this
     */
    public function setDiscriminator(?\OpenAPI\Client\Model\WidgetUserDiscriminator $discriminator): static
    {
        if (is_null($discriminator)) {
            array_push($this->openAPINullablesSetToNull, 'discriminator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discriminator', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['discriminator'] = $discriminator;

        return $this;
    }

    /**
     * Gets avatar
     *
     * @return mixed|null
     */
    public function getAvatar(): mixed
    {
        return $this->container['avatar'];
    }

    /**
     * Sets avatar
     *
     * @param mixed|null $avatar avatar
     *
     * @return $this
     */
    public function setAvatar(mixed $avatar): static
    {
        if (is_null($avatar)) {
            array_push($this->openAPINullablesSetToNull, 'avatar');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avatar', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['avatar'] = $avatar;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus(): string
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus(string $status): static
    {
        if (is_null($status)) {
            throw new InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets avatar_url
     *
     * @return string
     */
    public function getAvatarUrl(): string
    {
        return $this->container['avatar_url'];
    }

    /**
     * Sets avatar_url
     *
     * @param string $avatar_url avatar_url
     *
     * @return $this
     */
    public function setAvatarUrl(string $avatar_url): static
    {
        if (is_null($avatar_url)) {
            throw new InvalidArgumentException('non-nullable avatar_url cannot be null');
        }
        $this->container['avatar_url'] = $avatar_url;

        return $this;
    }

    /**
     * Gets activity
     *
     * @return \OpenAPI\Client\Model\WidgetActivity|null
     */
    public function getActivity(): ?\OpenAPI\Client\Model\WidgetActivity
    {
        return $this->container['activity'];
    }

    /**
     * Sets activity
     *
     * @param \OpenAPI\Client\Model\WidgetActivity|null $activity activity
     *
     * @return $this
     */
    public function setActivity(?\OpenAPI\Client\Model\WidgetActivity $activity): static
    {
        if (is_null($activity)) {
            array_push($this->openAPINullablesSetToNull, 'activity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('activity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['activity'] = $activity;

        return $this;
    }

    /**
     * Gets deaf
     *
     * @return bool|null
     */
    public function getDeaf(): ?bool
    {
        return $this->container['deaf'];
    }

    /**
     * Sets deaf
     *
     * @param bool|null $deaf deaf
     *
     * @return $this
     */
    public function setDeaf(?bool $deaf): static
    {
        if (is_null($deaf)) {
            array_push($this->openAPINullablesSetToNull, 'deaf');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deaf', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deaf'] = $deaf;

        return $this;
    }

    /**
     * Gets mute
     *
     * @return bool|null
     */
    public function getMute(): ?bool
    {
        return $this->container['mute'];
    }

    /**
     * Sets mute
     *
     * @param bool|null $mute mute
     *
     * @return $this
     */
    public function setMute(?bool $mute): static
    {
        if (is_null($mute)) {
            array_push($this->openAPINullablesSetToNull, 'mute');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mute', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mute'] = $mute;

        return $this;
    }

    /**
     * Gets self_deaf
     *
     * @return bool|null
     */
    public function getSelfDeaf(): ?bool
    {
        return $this->container['self_deaf'];
    }

    /**
     * Sets self_deaf
     *
     * @param bool|null $self_deaf self_deaf
     *
     * @return $this
     */
    public function setSelfDeaf(?bool $self_deaf): static
    {
        if (is_null($self_deaf)) {
            array_push($this->openAPINullablesSetToNull, 'self_deaf');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('self_deaf', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['self_deaf'] = $self_deaf;

        return $this;
    }

    /**
     * Gets self_mute
     *
     * @return bool|null
     */
    public function getSelfMute(): ?bool
    {
        return $this->container['self_mute'];
    }

    /**
     * Sets self_mute
     *
     * @param bool|null $self_mute self_mute
     *
     * @return $this
     */
    public function setSelfMute(?bool $self_mute): static
    {
        if (is_null($self_mute)) {
            array_push($this->openAPINullablesSetToNull, 'self_mute');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('self_mute', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['self_mute'] = $self_mute;

        return $this;
    }

    /**
     * Gets suppress
     *
     * @return bool|null
     */
    public function getSuppress(): ?bool
    {
        return $this->container['suppress'];
    }

    /**
     * Sets suppress
     *
     * @param bool|null $suppress suppress
     *
     * @return $this
     */
    public function setSuppress(?bool $suppress): static
    {
        if (is_null($suppress)) {
            array_push($this->openAPINullablesSetToNull, 'suppress');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suppress', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suppress'] = $suppress;

        return $this;
    }

    /**
     * Gets channel_id
     *
     * @return string|null
     */
    public function getChannelId(): ?string
    {
        return $this->container['channel_id'];
    }

    /**
     * Sets channel_id
     *
     * @param string|null $channel_id channel_id
     *
     * @return $this
     */
    public function setChannelId(?string $channel_id): static
    {
        if (is_null($channel_id)) {
            throw new InvalidArgumentException('non-nullable channel_id cannot be null');
        }

        if ((!preg_match("/^(0|[1-9][0-9]*)$/", ObjectSerializer::toString($channel_id)))) {
            throw new InvalidArgumentException("invalid value for \$channel_id when calling WidgetMember., must conform to the pattern /^(0|[1-9][0-9]*)$/.");
        }

        $this->container['channel_id'] = $channel_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


