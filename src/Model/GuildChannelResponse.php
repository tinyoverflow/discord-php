<?php
/**
 * GuildChannelResponse
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Discord HTTP API (Preview)
 *
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * GuildChannelResponse Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GuildChannelResponse implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'GuildChannelResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'string',
        'type' => '\OpenAPI\Client\Model\ChannelTypes',
        'last_message_id' => 'string',
        'flags' => 'int',
        'last_pin_timestamp' => '\DateTime',
        'guild_id' => 'string',
        'name' => 'string',
        'parent_id' => 'string',
        'rate_limit_per_user' => 'int',
        'bitrate' => 'int',
        'user_limit' => 'int',
        'rtc_region' => 'string',
        'video_quality_mode' => '\OpenAPI\Client\Model\VideoQualityModes',
        'permissions' => 'string',
        'topic' => 'string',
        'default_auto_archive_duration' => '\OpenAPI\Client\Model\ThreadAutoArchiveDuration',
        'default_thread_rate_limit_per_user' => 'int',
        'position' => 'int',
        'permission_overwrites' => '\OpenAPI\Client\Model\ChannelPermissionOverwriteResponse[]',
        'nsfw' => 'bool',
        'available_tags' => '\OpenAPI\Client\Model\ForumTagResponse[]',
        'default_reaction_emoji' => '\OpenAPI\Client\Model\DefaultReactionEmojiResponse',
        'default_sort_order' => '\OpenAPI\Client\Model\ThreadSortOrder',
        'default_forum_layout' => '\OpenAPI\Client\Model\ForumLayout'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => 'snowflake',
        'type' => null,
        'last_message_id' => 'snowflake',
        'flags' => 'int32',
        'last_pin_timestamp' => 'date-time',
        'guild_id' => 'snowflake',
        'name' => null,
        'parent_id' => 'snowflake',
        'rate_limit_per_user' => 'int32',
        'bitrate' => 'int32',
        'user_limit' => 'int32',
        'rtc_region' => null,
        'video_quality_mode' => null,
        'permissions' => null,
        'topic' => null,
        'default_auto_archive_duration' => null,
        'default_thread_rate_limit_per_user' => 'int32',
        'position' => 'int32',
        'permission_overwrites' => null,
        'nsfw' => null,
        'available_tags' => null,
        'default_reaction_emoji' => null,
        'default_sort_order' => null,
        'default_forum_layout' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
		'type' => true,
		'last_message_id' => false,
		'flags' => false,
		'last_pin_timestamp' => true,
		'guild_id' => false,
		'name' => false,
		'parent_id' => false,
		'rate_limit_per_user' => true,
		'bitrate' => true,
		'user_limit' => true,
		'rtc_region' => true,
		'video_quality_mode' => true,
		'permissions' => true,
		'topic' => true,
		'default_auto_archive_duration' => true,
		'default_thread_rate_limit_per_user' => true,
		'position' => false,
		'permission_overwrites' => false,
		'nsfw' => true,
		'available_tags' => false,
		'default_reaction_emoji' => true,
		'default_sort_order' => true,
		'default_forum_layout' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'last_message_id' => 'last_message_id',
        'flags' => 'flags',
        'last_pin_timestamp' => 'last_pin_timestamp',
        'guild_id' => 'guild_id',
        'name' => 'name',
        'parent_id' => 'parent_id',
        'rate_limit_per_user' => 'rate_limit_per_user',
        'bitrate' => 'bitrate',
        'user_limit' => 'user_limit',
        'rtc_region' => 'rtc_region',
        'video_quality_mode' => 'video_quality_mode',
        'permissions' => 'permissions',
        'topic' => 'topic',
        'default_auto_archive_duration' => 'default_auto_archive_duration',
        'default_thread_rate_limit_per_user' => 'default_thread_rate_limit_per_user',
        'position' => 'position',
        'permission_overwrites' => 'permission_overwrites',
        'nsfw' => 'nsfw',
        'available_tags' => 'available_tags',
        'default_reaction_emoji' => 'default_reaction_emoji',
        'default_sort_order' => 'default_sort_order',
        'default_forum_layout' => 'default_forum_layout'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'last_message_id' => 'setLastMessageId',
        'flags' => 'setFlags',
        'last_pin_timestamp' => 'setLastPinTimestamp',
        'guild_id' => 'setGuildId',
        'name' => 'setName',
        'parent_id' => 'setParentId',
        'rate_limit_per_user' => 'setRateLimitPerUser',
        'bitrate' => 'setBitrate',
        'user_limit' => 'setUserLimit',
        'rtc_region' => 'setRtcRegion',
        'video_quality_mode' => 'setVideoQualityMode',
        'permissions' => 'setPermissions',
        'topic' => 'setTopic',
        'default_auto_archive_duration' => 'setDefaultAutoArchiveDuration',
        'default_thread_rate_limit_per_user' => 'setDefaultThreadRateLimitPerUser',
        'position' => 'setPosition',
        'permission_overwrites' => 'setPermissionOverwrites',
        'nsfw' => 'setNsfw',
        'available_tags' => 'setAvailableTags',
        'default_reaction_emoji' => 'setDefaultReactionEmoji',
        'default_sort_order' => 'setDefaultSortOrder',
        'default_forum_layout' => 'setDefaultForumLayout'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'last_message_id' => 'getLastMessageId',
        'flags' => 'getFlags',
        'last_pin_timestamp' => 'getLastPinTimestamp',
        'guild_id' => 'getGuildId',
        'name' => 'getName',
        'parent_id' => 'getParentId',
        'rate_limit_per_user' => 'getRateLimitPerUser',
        'bitrate' => 'getBitrate',
        'user_limit' => 'getUserLimit',
        'rtc_region' => 'getRtcRegion',
        'video_quality_mode' => 'getVideoQualityMode',
        'permissions' => 'getPermissions',
        'topic' => 'getTopic',
        'default_auto_archive_duration' => 'getDefaultAutoArchiveDuration',
        'default_thread_rate_limit_per_user' => 'getDefaultThreadRateLimitPerUser',
        'position' => 'getPosition',
        'permission_overwrites' => 'getPermissionOverwrites',
        'nsfw' => 'getNsfw',
        'available_tags' => 'getAvailableTags',
        'default_reaction_emoji' => 'getDefaultReactionEmoji',
        'default_sort_order' => 'getDefaultSortOrder',
        'default_forum_layout' => 'getDefaultForumLayout'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('last_message_id', $data ?? [], null);
        $this->setIfExists('flags', $data ?? [], null);
        $this->setIfExists('last_pin_timestamp', $data ?? [], null);
        $this->setIfExists('guild_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('parent_id', $data ?? [], null);
        $this->setIfExists('rate_limit_per_user', $data ?? [], null);
        $this->setIfExists('bitrate', $data ?? [], null);
        $this->setIfExists('user_limit', $data ?? [], null);
        $this->setIfExists('rtc_region', $data ?? [], null);
        $this->setIfExists('video_quality_mode', $data ?? [], null);
        $this->setIfExists('permissions', $data ?? [], null);
        $this->setIfExists('topic', $data ?? [], null);
        $this->setIfExists('default_auto_archive_duration', $data ?? [], null);
        $this->setIfExists('default_thread_rate_limit_per_user', $data ?? [], null);
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('permission_overwrites', $data ?? [], null);
        $this->setIfExists('nsfw', $data ?? [], null);
        $this->setIfExists('available_tags', $data ?? [], null);
        $this->setIfExists('default_reaction_emoji', $data ?? [], null);
        $this->setIfExists('default_sort_order', $data ?? [], null);
        $this->setIfExists('default_forum_layout', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (!preg_match("/^(0|[1-9][0-9]*)$/", $this->container['id'])) {
            $invalidProperties[] = "invalid value for 'id', must be conform to the pattern /^(0|[1-9][0-9]*)$/.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if (!is_null($this->container['last_message_id']) && !preg_match("/^(0|[1-9][0-9]*)$/", $this->container['last_message_id'])) {
            $invalidProperties[] = "invalid value for 'last_message_id', must be conform to the pattern /^(0|[1-9][0-9]*)$/.";
        }

        if ($this->container['flags'] === null) {
            $invalidProperties[] = "'flags' can't be null";
        }
        if ($this->container['guild_id'] === null) {
            $invalidProperties[] = "'guild_id' can't be null";
        }
        if (!preg_match("/^(0|[1-9][0-9]*)$/", $this->container['guild_id'])) {
            $invalidProperties[] = "invalid value for 'guild_id', must be conform to the pattern /^(0|[1-9][0-9]*)$/.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if (!is_null($this->container['parent_id']) && !preg_match("/^(0|[1-9][0-9]*)$/", $this->container['parent_id'])) {
            $invalidProperties[] = "invalid value for 'parent_id', must be conform to the pattern /^(0|[1-9][0-9]*)$/.";
        }

        if ($this->container['position'] === null) {
            $invalidProperties[] = "'position' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId(): string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId(string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }

        if ((!preg_match("/^(0|[1-9][0-9]*)$/", ObjectSerializer::toString($id)))) {
            throw new InvalidArgumentException("invalid value for \$id when calling GuildChannelResponse., must conform to the pattern /^(0|[1-9][0-9]*)$/.");
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\ChannelTypes
     */
    public function getType(): ?\OpenAPI\Client\Model\ChannelTypes
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\ChannelTypes $type type
     *
     * @return $this
     */
    public function setType(?\OpenAPI\Client\Model\ChannelTypes $type): static
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets last_message_id
     *
     * @return string|null
     */
    public function getLastMessageId(): ?string
    {
        return $this->container['last_message_id'];
    }

    /**
     * Sets last_message_id
     *
     * @param string|null $last_message_id last_message_id
     *
     * @return $this
     */
    public function setLastMessageId(?string $last_message_id): static
    {
        if (is_null($last_message_id)) {
            throw new InvalidArgumentException('non-nullable last_message_id cannot be null');
        }

        if ((!preg_match("/^(0|[1-9][0-9]*)$/", ObjectSerializer::toString($last_message_id)))) {
            throw new InvalidArgumentException("invalid value for \$last_message_id when calling GuildChannelResponse., must conform to the pattern /^(0|[1-9][0-9]*)$/.");
        }

        $this->container['last_message_id'] = $last_message_id;

        return $this;
    }

    /**
     * Gets flags
     *
     * @return int
     */
    public function getFlags(): int
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     *
     * @param int $flags flags
     *
     * @return $this
     */
    public function setFlags(int $flags): static
    {
        if (is_null($flags)) {
            throw new InvalidArgumentException('non-nullable flags cannot be null');
        }
        $this->container['flags'] = $flags;

        return $this;
    }

    /**
     * Gets last_pin_timestamp
     *
     * @return \DateTime|null
     */
    public function getLastPinTimestamp(): ?\DateTime
    {
        return $this->container['last_pin_timestamp'];
    }

    /**
     * Sets last_pin_timestamp
     *
     * @param \DateTime|null $last_pin_timestamp last_pin_timestamp
     *
     * @return $this
     */
    public function setLastPinTimestamp(?\DateTime $last_pin_timestamp): static
    {
        if (is_null($last_pin_timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'last_pin_timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_pin_timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_pin_timestamp'] = $last_pin_timestamp;

        return $this;
    }

    /**
     * Gets guild_id
     *
     * @return string
     */
    public function getGuildId(): string
    {
        return $this->container['guild_id'];
    }

    /**
     * Sets guild_id
     *
     * @param string $guild_id guild_id
     *
     * @return $this
     */
    public function setGuildId(string $guild_id): static
    {
        if (is_null($guild_id)) {
            throw new InvalidArgumentException('non-nullable guild_id cannot be null');
        }

        if ((!preg_match("/^(0|[1-9][0-9]*)$/", ObjectSerializer::toString($guild_id)))) {
            throw new InvalidArgumentException("invalid value for \$guild_id when calling GuildChannelResponse., must conform to the pattern /^(0|[1-9][0-9]*)$/.");
        }

        $this->container['guild_id'] = $guild_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName(string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return string|null
     */
    public function getParentId(): ?string
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param string|null $parent_id parent_id
     *
     * @return $this
     */
    public function setParentId(?string $parent_id): static
    {
        if (is_null($parent_id)) {
            throw new InvalidArgumentException('non-nullable parent_id cannot be null');
        }

        if ((!preg_match("/^(0|[1-9][0-9]*)$/", ObjectSerializer::toString($parent_id)))) {
            throw new InvalidArgumentException("invalid value for \$parent_id when calling GuildChannelResponse., must conform to the pattern /^(0|[1-9][0-9]*)$/.");
        }

        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets rate_limit_per_user
     *
     * @return int|null
     */
    public function getRateLimitPerUser(): ?int
    {
        return $this->container['rate_limit_per_user'];
    }

    /**
     * Sets rate_limit_per_user
     *
     * @param int|null $rate_limit_per_user rate_limit_per_user
     *
     * @return $this
     */
    public function setRateLimitPerUser(?int $rate_limit_per_user): static
    {
        if (is_null($rate_limit_per_user)) {
            array_push($this->openAPINullablesSetToNull, 'rate_limit_per_user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rate_limit_per_user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rate_limit_per_user'] = $rate_limit_per_user;

        return $this;
    }

    /**
     * Gets bitrate
     *
     * @return int|null
     */
    public function getBitrate(): ?int
    {
        return $this->container['bitrate'];
    }

    /**
     * Sets bitrate
     *
     * @param int|null $bitrate bitrate
     *
     * @return $this
     */
    public function setBitrate(?int $bitrate): static
    {
        if (is_null($bitrate)) {
            array_push($this->openAPINullablesSetToNull, 'bitrate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bitrate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bitrate'] = $bitrate;

        return $this;
    }

    /**
     * Gets user_limit
     *
     * @return int|null
     */
    public function getUserLimit(): ?int
    {
        return $this->container['user_limit'];
    }

    /**
     * Sets user_limit
     *
     * @param int|null $user_limit user_limit
     *
     * @return $this
     */
    public function setUserLimit(?int $user_limit): static
    {
        if (is_null($user_limit)) {
            array_push($this->openAPINullablesSetToNull, 'user_limit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_limit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_limit'] = $user_limit;

        return $this;
    }

    /**
     * Gets rtc_region
     *
     * @return string|null
     */
    public function getRtcRegion(): ?string
    {
        return $this->container['rtc_region'];
    }

    /**
     * Sets rtc_region
     *
     * @param string|null $rtc_region rtc_region
     *
     * @return $this
     */
    public function setRtcRegion(?string $rtc_region): static
    {
        if (is_null($rtc_region)) {
            array_push($this->openAPINullablesSetToNull, 'rtc_region');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rtc_region', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rtc_region'] = $rtc_region;

        return $this;
    }

    /**
     * Gets video_quality_mode
     *
     * @return \OpenAPI\Client\Model\VideoQualityModes|null
     */
    public function getVideoQualityMode(): ?\OpenAPI\Client\Model\VideoQualityModes
    {
        return $this->container['video_quality_mode'];
    }

    /**
     * Sets video_quality_mode
     *
     * @param \OpenAPI\Client\Model\VideoQualityModes|null $video_quality_mode video_quality_mode
     *
     * @return $this
     */
    public function setVideoQualityMode(?\OpenAPI\Client\Model\VideoQualityModes $video_quality_mode): static
    {
        if (is_null($video_quality_mode)) {
            array_push($this->openAPINullablesSetToNull, 'video_quality_mode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('video_quality_mode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['video_quality_mode'] = $video_quality_mode;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return string|null
     */
    public function getPermissions(): ?string
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param string|null $permissions permissions
     *
     * @return $this
     */
    public function setPermissions(?string $permissions): static
    {
        if (is_null($permissions)) {
            array_push($this->openAPINullablesSetToNull, 'permissions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('permissions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets topic
     *
     * @return string|null
     */
    public function getTopic(): ?string
    {
        return $this->container['topic'];
    }

    /**
     * Sets topic
     *
     * @param string|null $topic topic
     *
     * @return $this
     */
    public function setTopic(?string $topic): static
    {
        if (is_null($topic)) {
            array_push($this->openAPINullablesSetToNull, 'topic');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('topic', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['topic'] = $topic;

        return $this;
    }

    /**
     * Gets default_auto_archive_duration
     *
     * @return \OpenAPI\Client\Model\ThreadAutoArchiveDuration|null
     */
    public function getDefaultAutoArchiveDuration(): ?\OpenAPI\Client\Model\ThreadAutoArchiveDuration
    {
        return $this->container['default_auto_archive_duration'];
    }

    /**
     * Sets default_auto_archive_duration
     *
     * @param \OpenAPI\Client\Model\ThreadAutoArchiveDuration|null $default_auto_archive_duration default_auto_archive_duration
     *
     * @return $this
     */
    public function setDefaultAutoArchiveDuration(?\OpenAPI\Client\Model\ThreadAutoArchiveDuration $default_auto_archive_duration): static
    {
        if (is_null($default_auto_archive_duration)) {
            array_push($this->openAPINullablesSetToNull, 'default_auto_archive_duration');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_auto_archive_duration', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_auto_archive_duration'] = $default_auto_archive_duration;

        return $this;
    }

    /**
     * Gets default_thread_rate_limit_per_user
     *
     * @return int|null
     */
    public function getDefaultThreadRateLimitPerUser(): ?int
    {
        return $this->container['default_thread_rate_limit_per_user'];
    }

    /**
     * Sets default_thread_rate_limit_per_user
     *
     * @param int|null $default_thread_rate_limit_per_user default_thread_rate_limit_per_user
     *
     * @return $this
     */
    public function setDefaultThreadRateLimitPerUser(?int $default_thread_rate_limit_per_user): static
    {
        if (is_null($default_thread_rate_limit_per_user)) {
            array_push($this->openAPINullablesSetToNull, 'default_thread_rate_limit_per_user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_thread_rate_limit_per_user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_thread_rate_limit_per_user'] = $default_thread_rate_limit_per_user;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int
     */
    public function getPosition(): int
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int $position position
     *
     * @return $this
     */
    public function setPosition(int $position): static
    {
        if (is_null($position)) {
            throw new InvalidArgumentException('non-nullable position cannot be null');
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets permission_overwrites
     *
     * @return \OpenAPI\Client\Model\ChannelPermissionOverwriteResponse[]|null
     */
    public function getPermissionOverwrites(): ?array
    {
        return $this->container['permission_overwrites'];
    }

    /**
     * Sets permission_overwrites
     *
     * @param \OpenAPI\Client\Model\ChannelPermissionOverwriteResponse[]|null $permission_overwrites permission_overwrites
     *
     * @return $this
     */
    public function setPermissionOverwrites(?array $permission_overwrites): static
    {
        if (is_null($permission_overwrites)) {
            throw new InvalidArgumentException('non-nullable permission_overwrites cannot be null');
        }
        $this->container['permission_overwrites'] = $permission_overwrites;

        return $this;
    }

    /**
     * Gets nsfw
     *
     * @return bool|null
     */
    public function getNsfw(): ?bool
    {
        return $this->container['nsfw'];
    }

    /**
     * Sets nsfw
     *
     * @param bool|null $nsfw nsfw
     *
     * @return $this
     */
    public function setNsfw(?bool $nsfw): static
    {
        if (is_null($nsfw)) {
            array_push($this->openAPINullablesSetToNull, 'nsfw');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nsfw', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nsfw'] = $nsfw;

        return $this;
    }

    /**
     * Gets available_tags
     *
     * @return \OpenAPI\Client\Model\ForumTagResponse[]|null
     */
    public function getAvailableTags(): ?array
    {
        return $this->container['available_tags'];
    }

    /**
     * Sets available_tags
     *
     * @param \OpenAPI\Client\Model\ForumTagResponse[]|null $available_tags available_tags
     *
     * @return $this
     */
    public function setAvailableTags(?array $available_tags): static
    {
        if (is_null($available_tags)) {
            throw new InvalidArgumentException('non-nullable available_tags cannot be null');
        }
        $this->container['available_tags'] = $available_tags;

        return $this;
    }

    /**
     * Gets default_reaction_emoji
     *
     * @return \OpenAPI\Client\Model\DefaultReactionEmojiResponse|null
     */
    public function getDefaultReactionEmoji(): ?\OpenAPI\Client\Model\DefaultReactionEmojiResponse
    {
        return $this->container['default_reaction_emoji'];
    }

    /**
     * Sets default_reaction_emoji
     *
     * @param \OpenAPI\Client\Model\DefaultReactionEmojiResponse|null $default_reaction_emoji default_reaction_emoji
     *
     * @return $this
     */
    public function setDefaultReactionEmoji(?\OpenAPI\Client\Model\DefaultReactionEmojiResponse $default_reaction_emoji): static
    {
        if (is_null($default_reaction_emoji)) {
            array_push($this->openAPINullablesSetToNull, 'default_reaction_emoji');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_reaction_emoji', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_reaction_emoji'] = $default_reaction_emoji;

        return $this;
    }

    /**
     * Gets default_sort_order
     *
     * @return \OpenAPI\Client\Model\ThreadSortOrder|null
     */
    public function getDefaultSortOrder(): ?\OpenAPI\Client\Model\ThreadSortOrder
    {
        return $this->container['default_sort_order'];
    }

    /**
     * Sets default_sort_order
     *
     * @param \OpenAPI\Client\Model\ThreadSortOrder|null $default_sort_order default_sort_order
     *
     * @return $this
     */
    public function setDefaultSortOrder(?\OpenAPI\Client\Model\ThreadSortOrder $default_sort_order): static
    {
        if (is_null($default_sort_order)) {
            array_push($this->openAPINullablesSetToNull, 'default_sort_order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_sort_order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_sort_order'] = $default_sort_order;

        return $this;
    }

    /**
     * Gets default_forum_layout
     *
     * @return \OpenAPI\Client\Model\ForumLayout|null
     */
    public function getDefaultForumLayout(): ?\OpenAPI\Client\Model\ForumLayout
    {
        return $this->container['default_forum_layout'];
    }

    /**
     * Sets default_forum_layout
     *
     * @param \OpenAPI\Client\Model\ForumLayout|null $default_forum_layout default_forum_layout
     *
     * @return $this
     */
    public function setDefaultForumLayout(?\OpenAPI\Client\Model\ForumLayout $default_forum_layout): static
    {
        if (is_null($default_forum_layout)) {
            array_push($this->openAPINullablesSetToNull, 'default_forum_layout');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_forum_layout', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_forum_layout'] = $default_forum_layout;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


