<?php
/**
 * GithubWebhook
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Discord HTTP API (Preview)
 *
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * GithubWebhook Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GithubWebhook implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'GithubWebhook';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'action' => 'string',
        'ref' => 'string',
        'ref_type' => 'string',
        'comment' => '\OpenAPI\Client\Model\GithubComment',
        'issue' => '\OpenAPI\Client\Model\GithubIssue',
        'pull_request' => '\OpenAPI\Client\Model\GithubIssue',
        'repository' => '\OpenAPI\Client\Model\GithubRepository',
        'forkee' => '\OpenAPI\Client\Model\GithubRepository',
        'sender' => '\OpenAPI\Client\Model\GithubUser',
        'member' => '\OpenAPI\Client\Model\GithubUser',
        'release' => '\OpenAPI\Client\Model\GithubRelease',
        'head_commit' => '\OpenAPI\Client\Model\GithubCommit',
        'commits' => '\OpenAPI\Client\Model\GithubCommit[]',
        'forced' => 'bool',
        'compare' => 'string',
        'review' => '\OpenAPI\Client\Model\GithubReview',
        'check_run' => '\OpenAPI\Client\Model\GithubCheckRun',
        'check_suite' => '\OpenAPI\Client\Model\GithubCheckSuite',
        'discussion' => '\OpenAPI\Client\Model\GithubDiscussion',
        'answer' => '\OpenAPI\Client\Model\GithubComment'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'action' => null,
        'ref' => null,
        'ref_type' => null,
        'comment' => null,
        'issue' => null,
        'pull_request' => null,
        'repository' => null,
        'forkee' => null,
        'sender' => null,
        'member' => null,
        'release' => null,
        'head_commit' => null,
        'commits' => null,
        'forced' => null,
        'compare' => 'uri',
        'review' => null,
        'check_run' => null,
        'check_suite' => null,
        'discussion' => null,
        'answer' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'action' => true,
		'ref' => true,
		'ref_type' => true,
		'comment' => true,
		'issue' => true,
		'pull_request' => true,
		'repository' => true,
		'forkee' => true,
		'sender' => false,
		'member' => true,
		'release' => true,
		'head_commit' => true,
		'commits' => false,
		'forced' => true,
		'compare' => true,
		'review' => true,
		'check_run' => true,
		'check_suite' => true,
		'discussion' => true,
		'answer' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'action' => 'action',
        'ref' => 'ref',
        'ref_type' => 'ref_type',
        'comment' => 'comment',
        'issue' => 'issue',
        'pull_request' => 'pull_request',
        'repository' => 'repository',
        'forkee' => 'forkee',
        'sender' => 'sender',
        'member' => 'member',
        'release' => 'release',
        'head_commit' => 'head_commit',
        'commits' => 'commits',
        'forced' => 'forced',
        'compare' => 'compare',
        'review' => 'review',
        'check_run' => 'check_run',
        'check_suite' => 'check_suite',
        'discussion' => 'discussion',
        'answer' => 'answer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'action' => 'setAction',
        'ref' => 'setRef',
        'ref_type' => 'setRefType',
        'comment' => 'setComment',
        'issue' => 'setIssue',
        'pull_request' => 'setPullRequest',
        'repository' => 'setRepository',
        'forkee' => 'setForkee',
        'sender' => 'setSender',
        'member' => 'setMember',
        'release' => 'setRelease',
        'head_commit' => 'setHeadCommit',
        'commits' => 'setCommits',
        'forced' => 'setForced',
        'compare' => 'setCompare',
        'review' => 'setReview',
        'check_run' => 'setCheckRun',
        'check_suite' => 'setCheckSuite',
        'discussion' => 'setDiscussion',
        'answer' => 'setAnswer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'action' => 'getAction',
        'ref' => 'getRef',
        'ref_type' => 'getRefType',
        'comment' => 'getComment',
        'issue' => 'getIssue',
        'pull_request' => 'getPullRequest',
        'repository' => 'getRepository',
        'forkee' => 'getForkee',
        'sender' => 'getSender',
        'member' => 'getMember',
        'release' => 'getRelease',
        'head_commit' => 'getHeadCommit',
        'commits' => 'getCommits',
        'forced' => 'getForced',
        'compare' => 'getCompare',
        'review' => 'getReview',
        'check_run' => 'getCheckRun',
        'check_suite' => 'getCheckSuite',
        'discussion' => 'getDiscussion',
        'answer' => 'getAnswer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('ref', $data ?? [], null);
        $this->setIfExists('ref_type', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('issue', $data ?? [], null);
        $this->setIfExists('pull_request', $data ?? [], null);
        $this->setIfExists('repository', $data ?? [], null);
        $this->setIfExists('forkee', $data ?? [], null);
        $this->setIfExists('sender', $data ?? [], null);
        $this->setIfExists('member', $data ?? [], null);
        $this->setIfExists('release', $data ?? [], null);
        $this->setIfExists('head_commit', $data ?? [], null);
        $this->setIfExists('commits', $data ?? [], null);
        $this->setIfExists('forced', $data ?? [], null);
        $this->setIfExists('compare', $data ?? [], null);
        $this->setIfExists('review', $data ?? [], null);
        $this->setIfExists('check_run', $data ?? [], null);
        $this->setIfExists('check_suite', $data ?? [], null);
        $this->setIfExists('discussion', $data ?? [], null);
        $this->setIfExists('answer', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['action']) && (mb_strlen($this->container['action']) > 152133)) {
            $invalidProperties[] = "invalid value for 'action', the character length must be smaller than or equal to 152133.";
        }

        if (!is_null($this->container['ref']) && (mb_strlen($this->container['ref']) > 152133)) {
            $invalidProperties[] = "invalid value for 'ref', the character length must be smaller than or equal to 152133.";
        }

        if (!is_null($this->container['ref_type']) && (mb_strlen($this->container['ref_type']) > 152133)) {
            $invalidProperties[] = "invalid value for 'ref_type', the character length must be smaller than or equal to 152133.";
        }

        if ($this->container['sender'] === null) {
            $invalidProperties[] = "'sender' can't be null";
        }
        if (!is_null($this->container['compare']) && (mb_strlen($this->container['compare']) > 2048)) {
            $invalidProperties[] = "invalid value for 'compare', the character length must be smaller than or equal to 2048.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets action
     *
     * @return string|null
     */
    public function getAction(): ?string
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string|null $action action
     *
     * @return $this
     */
    public function setAction(?string $action): static
    {
        if (is_null($action)) {
            array_push($this->openAPINullablesSetToNull, 'action');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('action', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($action) && (mb_strlen($action) > 152133)) {
            throw new InvalidArgumentException('invalid length for $action when calling GithubWebhook., must be smaller than or equal to 152133.');
        }

        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets ref
     *
     * @return string|null
     */
    public function getRef(): ?string
    {
        return $this->container['ref'];
    }

    /**
     * Sets ref
     *
     * @param string|null $ref ref
     *
     * @return $this
     */
    public function setRef(?string $ref): static
    {
        if (is_null($ref)) {
            array_push($this->openAPINullablesSetToNull, 'ref');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ref', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ref) && (mb_strlen($ref) > 152133)) {
            throw new InvalidArgumentException('invalid length for $ref when calling GithubWebhook., must be smaller than or equal to 152133.');
        }

        $this->container['ref'] = $ref;

        return $this;
    }

    /**
     * Gets ref_type
     *
     * @return string|null
     */
    public function getRefType(): ?string
    {
        return $this->container['ref_type'];
    }

    /**
     * Sets ref_type
     *
     * @param string|null $ref_type ref_type
     *
     * @return $this
     */
    public function setRefType(?string $ref_type): static
    {
        if (is_null($ref_type)) {
            array_push($this->openAPINullablesSetToNull, 'ref_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ref_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ref_type) && (mb_strlen($ref_type) > 152133)) {
            throw new InvalidArgumentException('invalid length for $ref_type when calling GithubWebhook., must be smaller than or equal to 152133.');
        }

        $this->container['ref_type'] = $ref_type;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return \OpenAPI\Client\Model\GithubComment|null
     */
    public function getComment(): ?\OpenAPI\Client\Model\GithubComment
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param \OpenAPI\Client\Model\GithubComment|null $comment comment
     *
     * @return $this
     */
    public function setComment(?\OpenAPI\Client\Model\GithubComment $comment): static
    {
        if (is_null($comment)) {
            array_push($this->openAPINullablesSetToNull, 'comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('comment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets issue
     *
     * @return \OpenAPI\Client\Model\GithubIssue|null
     */
    public function getIssue(): ?\OpenAPI\Client\Model\GithubIssue
    {
        return $this->container['issue'];
    }

    /**
     * Sets issue
     *
     * @param \OpenAPI\Client\Model\GithubIssue|null $issue issue
     *
     * @return $this
     */
    public function setIssue(?\OpenAPI\Client\Model\GithubIssue $issue): static
    {
        if (is_null($issue)) {
            array_push($this->openAPINullablesSetToNull, 'issue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('issue', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['issue'] = $issue;

        return $this;
    }

    /**
     * Gets pull_request
     *
     * @return \OpenAPI\Client\Model\GithubIssue|null
     */
    public function getPullRequest(): ?\OpenAPI\Client\Model\GithubIssue
    {
        return $this->container['pull_request'];
    }

    /**
     * Sets pull_request
     *
     * @param \OpenAPI\Client\Model\GithubIssue|null $pull_request pull_request
     *
     * @return $this
     */
    public function setPullRequest(?\OpenAPI\Client\Model\GithubIssue $pull_request): static
    {
        if (is_null($pull_request)) {
            array_push($this->openAPINullablesSetToNull, 'pull_request');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pull_request', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pull_request'] = $pull_request;

        return $this;
    }

    /**
     * Gets repository
     *
     * @return \OpenAPI\Client\Model\GithubRepository|null
     */
    public function getRepository(): ?\OpenAPI\Client\Model\GithubRepository
    {
        return $this->container['repository'];
    }

    /**
     * Sets repository
     *
     * @param \OpenAPI\Client\Model\GithubRepository|null $repository repository
     *
     * @return $this
     */
    public function setRepository(?\OpenAPI\Client\Model\GithubRepository $repository): static
    {
        if (is_null($repository)) {
            array_push($this->openAPINullablesSetToNull, 'repository');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('repository', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['repository'] = $repository;

        return $this;
    }

    /**
     * Gets forkee
     *
     * @return \OpenAPI\Client\Model\GithubRepository|null
     */
    public function getForkee(): ?\OpenAPI\Client\Model\GithubRepository
    {
        return $this->container['forkee'];
    }

    /**
     * Sets forkee
     *
     * @param \OpenAPI\Client\Model\GithubRepository|null $forkee forkee
     *
     * @return $this
     */
    public function setForkee(?\OpenAPI\Client\Model\GithubRepository $forkee): static
    {
        if (is_null($forkee)) {
            array_push($this->openAPINullablesSetToNull, 'forkee');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('forkee', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['forkee'] = $forkee;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return \OpenAPI\Client\Model\GithubUser
     */
    public function getSender(): \OpenAPI\Client\Model\GithubUser
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param \OpenAPI\Client\Model\GithubUser $sender sender
     *
     * @return $this
     */
    public function setSender(\OpenAPI\Client\Model\GithubUser $sender): static
    {
        if (is_null($sender)) {
            throw new InvalidArgumentException('non-nullable sender cannot be null');
        }
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets member
     *
     * @return \OpenAPI\Client\Model\GithubUser|null
     */
    public function getMember(): ?\OpenAPI\Client\Model\GithubUser
    {
        return $this->container['member'];
    }

    /**
     * Sets member
     *
     * @param \OpenAPI\Client\Model\GithubUser|null $member member
     *
     * @return $this
     */
    public function setMember(?\OpenAPI\Client\Model\GithubUser $member): static
    {
        if (is_null($member)) {
            array_push($this->openAPINullablesSetToNull, 'member');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('member', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['member'] = $member;

        return $this;
    }

    /**
     * Gets release
     *
     * @return \OpenAPI\Client\Model\GithubRelease|null
     */
    public function getRelease(): ?\OpenAPI\Client\Model\GithubRelease
    {
        return $this->container['release'];
    }

    /**
     * Sets release
     *
     * @param \OpenAPI\Client\Model\GithubRelease|null $release release
     *
     * @return $this
     */
    public function setRelease(?\OpenAPI\Client\Model\GithubRelease $release): static
    {
        if (is_null($release)) {
            array_push($this->openAPINullablesSetToNull, 'release');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('release', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['release'] = $release;

        return $this;
    }

    /**
     * Gets head_commit
     *
     * @return \OpenAPI\Client\Model\GithubCommit|null
     */
    public function getHeadCommit(): ?\OpenAPI\Client\Model\GithubCommit
    {
        return $this->container['head_commit'];
    }

    /**
     * Sets head_commit
     *
     * @param \OpenAPI\Client\Model\GithubCommit|null $head_commit head_commit
     *
     * @return $this
     */
    public function setHeadCommit(?\OpenAPI\Client\Model\GithubCommit $head_commit): static
    {
        if (is_null($head_commit)) {
            array_push($this->openAPINullablesSetToNull, 'head_commit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('head_commit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['head_commit'] = $head_commit;

        return $this;
    }

    /**
     * Gets commits
     *
     * @return \OpenAPI\Client\Model\GithubCommit[]|null
     */
    public function getCommits(): ?array
    {
        return $this->container['commits'];
    }

    /**
     * Sets commits
     *
     * @param \OpenAPI\Client\Model\GithubCommit[]|null $commits commits
     *
     * @return $this
     */
    public function setCommits(?array $commits): static
    {
        if (is_null($commits)) {
            throw new InvalidArgumentException('non-nullable commits cannot be null');
        }
        $this->container['commits'] = $commits;

        return $this;
    }

    /**
     * Gets forced
     *
     * @return bool|null
     */
    public function getForced(): ?bool
    {
        return $this->container['forced'];
    }

    /**
     * Sets forced
     *
     * @param bool|null $forced forced
     *
     * @return $this
     */
    public function setForced(?bool $forced): static
    {
        if (is_null($forced)) {
            array_push($this->openAPINullablesSetToNull, 'forced');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('forced', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['forced'] = $forced;

        return $this;
    }

    /**
     * Gets compare
     *
     * @return string|null
     */
    public function getCompare(): ?string
    {
        return $this->container['compare'];
    }

    /**
     * Sets compare
     *
     * @param string|null $compare compare
     *
     * @return $this
     */
    public function setCompare(?string $compare): static
    {
        if (is_null($compare)) {
            array_push($this->openAPINullablesSetToNull, 'compare');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('compare', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($compare) && (mb_strlen($compare) > 2048)) {
            throw new InvalidArgumentException('invalid length for $compare when calling GithubWebhook., must be smaller than or equal to 2048.');
        }

        $this->container['compare'] = $compare;

        return $this;
    }

    /**
     * Gets review
     *
     * @return \OpenAPI\Client\Model\GithubReview|null
     */
    public function getReview(): ?\OpenAPI\Client\Model\GithubReview
    {
        return $this->container['review'];
    }

    /**
     * Sets review
     *
     * @param \OpenAPI\Client\Model\GithubReview|null $review review
     *
     * @return $this
     */
    public function setReview(?\OpenAPI\Client\Model\GithubReview $review): static
    {
        if (is_null($review)) {
            array_push($this->openAPINullablesSetToNull, 'review');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('review', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['review'] = $review;

        return $this;
    }

    /**
     * Gets check_run
     *
     * @return \OpenAPI\Client\Model\GithubCheckRun|null
     */
    public function getCheckRun(): ?\OpenAPI\Client\Model\GithubCheckRun
    {
        return $this->container['check_run'];
    }

    /**
     * Sets check_run
     *
     * @param \OpenAPI\Client\Model\GithubCheckRun|null $check_run check_run
     *
     * @return $this
     */
    public function setCheckRun(?\OpenAPI\Client\Model\GithubCheckRun $check_run): static
    {
        if (is_null($check_run)) {
            array_push($this->openAPINullablesSetToNull, 'check_run');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('check_run', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['check_run'] = $check_run;

        return $this;
    }

    /**
     * Gets check_suite
     *
     * @return \OpenAPI\Client\Model\GithubCheckSuite|null
     */
    public function getCheckSuite(): ?\OpenAPI\Client\Model\GithubCheckSuite
    {
        return $this->container['check_suite'];
    }

    /**
     * Sets check_suite
     *
     * @param \OpenAPI\Client\Model\GithubCheckSuite|null $check_suite check_suite
     *
     * @return $this
     */
    public function setCheckSuite(?\OpenAPI\Client\Model\GithubCheckSuite $check_suite): static
    {
        if (is_null($check_suite)) {
            array_push($this->openAPINullablesSetToNull, 'check_suite');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('check_suite', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['check_suite'] = $check_suite;

        return $this;
    }

    /**
     * Gets discussion
     *
     * @return \OpenAPI\Client\Model\GithubDiscussion|null
     */
    public function getDiscussion(): ?\OpenAPI\Client\Model\GithubDiscussion
    {
        return $this->container['discussion'];
    }

    /**
     * Sets discussion
     *
     * @param \OpenAPI\Client\Model\GithubDiscussion|null $discussion discussion
     *
     * @return $this
     */
    public function setDiscussion(?\OpenAPI\Client\Model\GithubDiscussion $discussion): static
    {
        if (is_null($discussion)) {
            array_push($this->openAPINullablesSetToNull, 'discussion');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discussion', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['discussion'] = $discussion;

        return $this;
    }

    /**
     * Gets answer
     *
     * @return \OpenAPI\Client\Model\GithubComment|null
     */
    public function getAnswer(): ?\OpenAPI\Client\Model\GithubComment
    {
        return $this->container['answer'];
    }

    /**
     * Sets answer
     *
     * @param \OpenAPI\Client\Model\GithubComment|null $answer answer
     *
     * @return $this
     */
    public function setAnswer(?\OpenAPI\Client\Model\GithubComment $answer): static
    {
        if (is_null($answer)) {
            array_push($this->openAPINullablesSetToNull, 'answer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('answer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['answer'] = $answer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


