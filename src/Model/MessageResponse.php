<?php
/**
 * MessageResponse
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Discord HTTP API (Preview)
 *
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * MessageResponse Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class MessageResponse implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'MessageResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'string',
        'type' => '\OpenAPI\Client\Model\MessageType',
        'content' => 'string',
        'channel_id' => 'string',
        'author' => '\OpenAPI\Client\Model\UserResponse',
        'attachments' => '\OpenAPI\Client\Model\MessageAttachmentResponse[]',
        'embeds' => '\OpenAPI\Client\Model\MessageEmbedResponse[]',
        'mentions' => '\OpenAPI\Client\Model\UserResponse[]',
        'mention_roles' => 'string[]',
        'pinned' => 'bool',
        'mention_everyone' => 'bool',
        'tts' => 'bool',
        'timestamp' => '\DateTime',
        'edited_timestamp' => '\DateTime',
        'flags' => 'int',
        'components' => '\OpenAPI\Client\Model\BasicMessageResponseComponentsInner[]',
        'activity' => 'object',
        'application' => '\OpenAPI\Client\Model\BasicApplicationResponse',
        'application_id' => 'string',
        'interaction' => '\OpenAPI\Client\Model\MessageInteractionResponse',
        'nonce' => '\OpenAPI\Client\Model\BasicMessageResponseNonce',
        'webhook_id' => 'string',
        'message_reference' => '\OpenAPI\Client\Model\MessageReferenceResponse',
        'thread' => '\OpenAPI\Client\Model\ThreadResponse',
        'mention_channels' => '\OpenAPI\Client\Model\MessageMentionChannelResponse[]',
        'stickers' => '\OpenAPI\Client\Model\GetSticker200Response[]',
        'sticker_items' => '\OpenAPI\Client\Model\MessageStickerItemResponse[]',
        'role_subscription_data' => '\OpenAPI\Client\Model\MessageRoleSubscriptionDataResponse',
        'purchase_notification' => '\OpenAPI\Client\Model\PurchaseNotificationResponse',
        'position' => 'int',
        'resolved' => '\OpenAPI\Client\Model\ResolvedObjectsResponse',
        'reactions' => '\OpenAPI\Client\Model\MessageReactionResponse[]',
        'referenced_message' => '\OpenAPI\Client\Model\BasicMessageResponse'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => 'snowflake',
        'type' => null,
        'content' => null,
        'channel_id' => 'snowflake',
        'author' => null,
        'attachments' => null,
        'embeds' => null,
        'mentions' => null,
        'mention_roles' => 'snowflake',
        'pinned' => null,
        'mention_everyone' => null,
        'tts' => null,
        'timestamp' => 'date-time',
        'edited_timestamp' => 'date-time',
        'flags' => 'int32',
        'components' => null,
        'activity' => null,
        'application' => null,
        'application_id' => 'snowflake',
        'interaction' => null,
        'nonce' => null,
        'webhook_id' => 'snowflake',
        'message_reference' => null,
        'thread' => null,
        'mention_channels' => null,
        'stickers' => null,
        'sticker_items' => null,
        'role_subscription_data' => null,
        'purchase_notification' => null,
        'position' => 'int32',
        'resolved' => null,
        'reactions' => null,
        'referenced_message' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
		'type' => true,
		'content' => false,
		'channel_id' => false,
		'author' => false,
		'attachments' => false,
		'embeds' => false,
		'mentions' => false,
		'mention_roles' => false,
		'pinned' => false,
		'mention_everyone' => false,
		'tts' => false,
		'timestamp' => false,
		'edited_timestamp' => true,
		'flags' => false,
		'components' => false,
		'activity' => false,
		'application' => true,
		'application_id' => false,
		'interaction' => true,
		'nonce' => true,
		'webhook_id' => false,
		'message_reference' => true,
		'thread' => true,
		'mention_channels' => false,
		'stickers' => false,
		'sticker_items' => false,
		'role_subscription_data' => true,
		'purchase_notification' => true,
		'position' => true,
		'resolved' => true,
		'reactions' => false,
		'referenced_message' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'content' => 'content',
        'channel_id' => 'channel_id',
        'author' => 'author',
        'attachments' => 'attachments',
        'embeds' => 'embeds',
        'mentions' => 'mentions',
        'mention_roles' => 'mention_roles',
        'pinned' => 'pinned',
        'mention_everyone' => 'mention_everyone',
        'tts' => 'tts',
        'timestamp' => 'timestamp',
        'edited_timestamp' => 'edited_timestamp',
        'flags' => 'flags',
        'components' => 'components',
        'activity' => 'activity',
        'application' => 'application',
        'application_id' => 'application_id',
        'interaction' => 'interaction',
        'nonce' => 'nonce',
        'webhook_id' => 'webhook_id',
        'message_reference' => 'message_reference',
        'thread' => 'thread',
        'mention_channels' => 'mention_channels',
        'stickers' => 'stickers',
        'sticker_items' => 'sticker_items',
        'role_subscription_data' => 'role_subscription_data',
        'purchase_notification' => 'purchase_notification',
        'position' => 'position',
        'resolved' => 'resolved',
        'reactions' => 'reactions',
        'referenced_message' => 'referenced_message'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'content' => 'setContent',
        'channel_id' => 'setChannelId',
        'author' => 'setAuthor',
        'attachments' => 'setAttachments',
        'embeds' => 'setEmbeds',
        'mentions' => 'setMentions',
        'mention_roles' => 'setMentionRoles',
        'pinned' => 'setPinned',
        'mention_everyone' => 'setMentionEveryone',
        'tts' => 'setTts',
        'timestamp' => 'setTimestamp',
        'edited_timestamp' => 'setEditedTimestamp',
        'flags' => 'setFlags',
        'components' => 'setComponents',
        'activity' => 'setActivity',
        'application' => 'setApplication',
        'application_id' => 'setApplicationId',
        'interaction' => 'setInteraction',
        'nonce' => 'setNonce',
        'webhook_id' => 'setWebhookId',
        'message_reference' => 'setMessageReference',
        'thread' => 'setThread',
        'mention_channels' => 'setMentionChannels',
        'stickers' => 'setStickers',
        'sticker_items' => 'setStickerItems',
        'role_subscription_data' => 'setRoleSubscriptionData',
        'purchase_notification' => 'setPurchaseNotification',
        'position' => 'setPosition',
        'resolved' => 'setResolved',
        'reactions' => 'setReactions',
        'referenced_message' => 'setReferencedMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'content' => 'getContent',
        'channel_id' => 'getChannelId',
        'author' => 'getAuthor',
        'attachments' => 'getAttachments',
        'embeds' => 'getEmbeds',
        'mentions' => 'getMentions',
        'mention_roles' => 'getMentionRoles',
        'pinned' => 'getPinned',
        'mention_everyone' => 'getMentionEveryone',
        'tts' => 'getTts',
        'timestamp' => 'getTimestamp',
        'edited_timestamp' => 'getEditedTimestamp',
        'flags' => 'getFlags',
        'components' => 'getComponents',
        'activity' => 'getActivity',
        'application' => 'getApplication',
        'application_id' => 'getApplicationId',
        'interaction' => 'getInteraction',
        'nonce' => 'getNonce',
        'webhook_id' => 'getWebhookId',
        'message_reference' => 'getMessageReference',
        'thread' => 'getThread',
        'mention_channels' => 'getMentionChannels',
        'stickers' => 'getStickers',
        'sticker_items' => 'getStickerItems',
        'role_subscription_data' => 'getRoleSubscriptionData',
        'purchase_notification' => 'getPurchaseNotification',
        'position' => 'getPosition',
        'resolved' => 'getResolved',
        'reactions' => 'getReactions',
        'referenced_message' => 'getReferencedMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('content', $data ?? [], null);
        $this->setIfExists('channel_id', $data ?? [], null);
        $this->setIfExists('author', $data ?? [], null);
        $this->setIfExists('attachments', $data ?? [], null);
        $this->setIfExists('embeds', $data ?? [], null);
        $this->setIfExists('mentions', $data ?? [], null);
        $this->setIfExists('mention_roles', $data ?? [], null);
        $this->setIfExists('pinned', $data ?? [], null);
        $this->setIfExists('mention_everyone', $data ?? [], null);
        $this->setIfExists('tts', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('edited_timestamp', $data ?? [], null);
        $this->setIfExists('flags', $data ?? [], null);
        $this->setIfExists('components', $data ?? [], null);
        $this->setIfExists('activity', $data ?? [], null);
        $this->setIfExists('application', $data ?? [], null);
        $this->setIfExists('application_id', $data ?? [], null);
        $this->setIfExists('interaction', $data ?? [], null);
        $this->setIfExists('nonce', $data ?? [], null);
        $this->setIfExists('webhook_id', $data ?? [], null);
        $this->setIfExists('message_reference', $data ?? [], null);
        $this->setIfExists('thread', $data ?? [], null);
        $this->setIfExists('mention_channels', $data ?? [], null);
        $this->setIfExists('stickers', $data ?? [], null);
        $this->setIfExists('sticker_items', $data ?? [], null);
        $this->setIfExists('role_subscription_data', $data ?? [], null);
        $this->setIfExists('purchase_notification', $data ?? [], null);
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('resolved', $data ?? [], null);
        $this->setIfExists('reactions', $data ?? [], null);
        $this->setIfExists('referenced_message', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (!preg_match("/^(0|[1-9][0-9]*)$/", $this->container['id'])) {
            $invalidProperties[] = "invalid value for 'id', must be conform to the pattern /^(0|[1-9][0-9]*)$/.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['content'] === null) {
            $invalidProperties[] = "'content' can't be null";
        }
        if ($this->container['channel_id'] === null) {
            $invalidProperties[] = "'channel_id' can't be null";
        }
        if (!preg_match("/^(0|[1-9][0-9]*)$/", $this->container['channel_id'])) {
            $invalidProperties[] = "invalid value for 'channel_id', must be conform to the pattern /^(0|[1-9][0-9]*)$/.";
        }

        if ($this->container['author'] === null) {
            $invalidProperties[] = "'author' can't be null";
        }
        if ($this->container['attachments'] === null) {
            $invalidProperties[] = "'attachments' can't be null";
        }
        if ($this->container['embeds'] === null) {
            $invalidProperties[] = "'embeds' can't be null";
        }
        if ($this->container['mentions'] === null) {
            $invalidProperties[] = "'mentions' can't be null";
        }
        if ($this->container['mention_roles'] === null) {
            $invalidProperties[] = "'mention_roles' can't be null";
        }
        if ($this->container['pinned'] === null) {
            $invalidProperties[] = "'pinned' can't be null";
        }
        if ($this->container['mention_everyone'] === null) {
            $invalidProperties[] = "'mention_everyone' can't be null";
        }
        if ($this->container['tts'] === null) {
            $invalidProperties[] = "'tts' can't be null";
        }
        if ($this->container['timestamp'] === null) {
            $invalidProperties[] = "'timestamp' can't be null";
        }
        if ($this->container['flags'] === null) {
            $invalidProperties[] = "'flags' can't be null";
        }
        if ($this->container['components'] === null) {
            $invalidProperties[] = "'components' can't be null";
        }
        if (!is_null($this->container['application_id']) && !preg_match("/^(0|[1-9][0-9]*)$/", $this->container['application_id'])) {
            $invalidProperties[] = "invalid value for 'application_id', must be conform to the pattern /^(0|[1-9][0-9]*)$/.";
        }

        if (!is_null($this->container['webhook_id']) && !preg_match("/^(0|[1-9][0-9]*)$/", $this->container['webhook_id'])) {
            $invalidProperties[] = "invalid value for 'webhook_id', must be conform to the pattern /^(0|[1-9][0-9]*)$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId(): string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId(string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }

        if ((!preg_match("/^(0|[1-9][0-9]*)$/", ObjectSerializer::toString($id)))) {
            throw new InvalidArgumentException("invalid value for \$id when calling MessageResponse., must conform to the pattern /^(0|[1-9][0-9]*)$/.");
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\MessageType
     */
    public function getType(): ?\OpenAPI\Client\Model\MessageType
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\MessageType $type type
     *
     * @return $this
     */
    public function setType(?\OpenAPI\Client\Model\MessageType $type): static
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string
     */
    public function getContent(): string
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string $content content
     *
     * @return $this
     */
    public function setContent(string $content): static
    {
        if (is_null($content)) {
            throw new InvalidArgumentException('non-nullable content cannot be null');
        }
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets channel_id
     *
     * @return string
     */
    public function getChannelId(): string
    {
        return $this->container['channel_id'];
    }

    /**
     * Sets channel_id
     *
     * @param string $channel_id channel_id
     *
     * @return $this
     */
    public function setChannelId(string $channel_id): static
    {
        if (is_null($channel_id)) {
            throw new InvalidArgumentException('non-nullable channel_id cannot be null');
        }

        if ((!preg_match("/^(0|[1-9][0-9]*)$/", ObjectSerializer::toString($channel_id)))) {
            throw new InvalidArgumentException("invalid value for \$channel_id when calling MessageResponse., must conform to the pattern /^(0|[1-9][0-9]*)$/.");
        }

        $this->container['channel_id'] = $channel_id;

        return $this;
    }

    /**
     * Gets author
     *
     * @return \OpenAPI\Client\Model\UserResponse
     */
    public function getAuthor(): \OpenAPI\Client\Model\UserResponse
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param \OpenAPI\Client\Model\UserResponse $author author
     *
     * @return $this
     */
    public function setAuthor(\OpenAPI\Client\Model\UserResponse $author): static
    {
        if (is_null($author)) {
            throw new InvalidArgumentException('non-nullable author cannot be null');
        }
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \OpenAPI\Client\Model\MessageAttachmentResponse[]
     */
    public function getAttachments(): array
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \OpenAPI\Client\Model\MessageAttachmentResponse[] $attachments attachments
     *
     * @return $this
     */
    public function setAttachments(array $attachments): static
    {
        if (is_null($attachments)) {
            throw new InvalidArgumentException('non-nullable attachments cannot be null');
        }
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets embeds
     *
     * @return \OpenAPI\Client\Model\MessageEmbedResponse[]
     */
    public function getEmbeds(): array
    {
        return $this->container['embeds'];
    }

    /**
     * Sets embeds
     *
     * @param \OpenAPI\Client\Model\MessageEmbedResponse[] $embeds embeds
     *
     * @return $this
     */
    public function setEmbeds(array $embeds): static
    {
        if (is_null($embeds)) {
            throw new InvalidArgumentException('non-nullable embeds cannot be null');
        }
        $this->container['embeds'] = $embeds;

        return $this;
    }

    /**
     * Gets mentions
     *
     * @return \OpenAPI\Client\Model\UserResponse[]
     */
    public function getMentions(): array
    {
        return $this->container['mentions'];
    }

    /**
     * Sets mentions
     *
     * @param \OpenAPI\Client\Model\UserResponse[] $mentions mentions
     *
     * @return $this
     */
    public function setMentions(array $mentions): static
    {
        if (is_null($mentions)) {
            throw new InvalidArgumentException('non-nullable mentions cannot be null');
        }
        $this->container['mentions'] = $mentions;

        return $this;
    }

    /**
     * Gets mention_roles
     *
     * @return string[]
     */
    public function getMentionRoles(): array
    {
        return $this->container['mention_roles'];
    }

    /**
     * Sets mention_roles
     *
     * @param string[] $mention_roles mention_roles
     *
     * @return $this
     */
    public function setMentionRoles(array $mention_roles): static
    {
        if (is_null($mention_roles)) {
            throw new InvalidArgumentException('non-nullable mention_roles cannot be null');
        }
        $this->container['mention_roles'] = $mention_roles;

        return $this;
    }

    /**
     * Gets pinned
     *
     * @return bool
     */
    public function getPinned(): bool
    {
        return $this->container['pinned'];
    }

    /**
     * Sets pinned
     *
     * @param bool $pinned pinned
     *
     * @return $this
     */
    public function setPinned(bool $pinned): static
    {
        if (is_null($pinned)) {
            throw new InvalidArgumentException('non-nullable pinned cannot be null');
        }
        $this->container['pinned'] = $pinned;

        return $this;
    }

    /**
     * Gets mention_everyone
     *
     * @return bool
     */
    public function getMentionEveryone(): bool
    {
        return $this->container['mention_everyone'];
    }

    /**
     * Sets mention_everyone
     *
     * @param bool $mention_everyone mention_everyone
     *
     * @return $this
     */
    public function setMentionEveryone(bool $mention_everyone): static
    {
        if (is_null($mention_everyone)) {
            throw new InvalidArgumentException('non-nullable mention_everyone cannot be null');
        }
        $this->container['mention_everyone'] = $mention_everyone;

        return $this;
    }

    /**
     * Gets tts
     *
     * @return bool
     */
    public function getTts(): bool
    {
        return $this->container['tts'];
    }

    /**
     * Sets tts
     *
     * @param bool $tts tts
     *
     * @return $this
     */
    public function setTts(bool $tts): static
    {
        if (is_null($tts)) {
            throw new InvalidArgumentException('non-nullable tts cannot be null');
        }
        $this->container['tts'] = $tts;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime
     */
    public function getTimestamp(): \DateTime
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime $timestamp timestamp
     *
     * @return $this
     */
    public function setTimestamp(\DateTime $timestamp): static
    {
        if (is_null($timestamp)) {
            throw new InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets edited_timestamp
     *
     * @return \DateTime|null
     */
    public function getEditedTimestamp(): ?\DateTime
    {
        return $this->container['edited_timestamp'];
    }

    /**
     * Sets edited_timestamp
     *
     * @param \DateTime|null $edited_timestamp edited_timestamp
     *
     * @return $this
     */
    public function setEditedTimestamp(?\DateTime $edited_timestamp): static
    {
        if (is_null($edited_timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'edited_timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('edited_timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['edited_timestamp'] = $edited_timestamp;

        return $this;
    }

    /**
     * Gets flags
     *
     * @return int
     */
    public function getFlags(): int
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     *
     * @param int $flags flags
     *
     * @return $this
     */
    public function setFlags(int $flags): static
    {
        if (is_null($flags)) {
            throw new InvalidArgumentException('non-nullable flags cannot be null');
        }
        $this->container['flags'] = $flags;

        return $this;
    }

    /**
     * Gets components
     *
     * @return \OpenAPI\Client\Model\BasicMessageResponseComponentsInner[]
     */
    public function getComponents(): array
    {
        return $this->container['components'];
    }

    /**
     * Sets components
     *
     * @param \OpenAPI\Client\Model\BasicMessageResponseComponentsInner[] $components components
     *
     * @return $this
     */
    public function setComponents(array $components): static
    {
        if (is_null($components)) {
            throw new InvalidArgumentException('non-nullable components cannot be null');
        }
        $this->container['components'] = $components;

        return $this;
    }

    /**
     * Gets activity
     *
     * @return object|null
     */
    public function getActivity(): ?object
    {
        return $this->container['activity'];
    }

    /**
     * Sets activity
     *
     * @param object|null $activity activity
     *
     * @return $this
     */
    public function setActivity(?object $activity): static
    {
        if (is_null($activity)) {
            throw new InvalidArgumentException('non-nullable activity cannot be null');
        }
        $this->container['activity'] = $activity;

        return $this;
    }

    /**
     * Gets application
     *
     * @return \OpenAPI\Client\Model\BasicApplicationResponse|null
     */
    public function getApplication(): ?\OpenAPI\Client\Model\BasicApplicationResponse
    {
        return $this->container['application'];
    }

    /**
     * Sets application
     *
     * @param \OpenAPI\Client\Model\BasicApplicationResponse|null $application application
     *
     * @return $this
     */
    public function setApplication(?\OpenAPI\Client\Model\BasicApplicationResponse $application): static
    {
        if (is_null($application)) {
            array_push($this->openAPINullablesSetToNull, 'application');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('application', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['application'] = $application;

        return $this;
    }

    /**
     * Gets application_id
     *
     * @return string|null
     */
    public function getApplicationId(): ?string
    {
        return $this->container['application_id'];
    }

    /**
     * Sets application_id
     *
     * @param string|null $application_id application_id
     *
     * @return $this
     */
    public function setApplicationId(?string $application_id): static
    {
        if (is_null($application_id)) {
            throw new InvalidArgumentException('non-nullable application_id cannot be null');
        }

        if ((!preg_match("/^(0|[1-9][0-9]*)$/", ObjectSerializer::toString($application_id)))) {
            throw new InvalidArgumentException("invalid value for \$application_id when calling MessageResponse., must conform to the pattern /^(0|[1-9][0-9]*)$/.");
        }

        $this->container['application_id'] = $application_id;

        return $this;
    }

    /**
     * Gets interaction
     *
     * @return \OpenAPI\Client\Model\MessageInteractionResponse|null
     */
    public function getInteraction(): ?\OpenAPI\Client\Model\MessageInteractionResponse
    {
        return $this->container['interaction'];
    }

    /**
     * Sets interaction
     *
     * @param \OpenAPI\Client\Model\MessageInteractionResponse|null $interaction interaction
     *
     * @return $this
     */
    public function setInteraction(?\OpenAPI\Client\Model\MessageInteractionResponse $interaction): static
    {
        if (is_null($interaction)) {
            array_push($this->openAPINullablesSetToNull, 'interaction');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('interaction', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['interaction'] = $interaction;

        return $this;
    }

    /**
     * Gets nonce
     *
     * @return \OpenAPI\Client\Model\BasicMessageResponseNonce|null
     */
    public function getNonce(): ?\OpenAPI\Client\Model\BasicMessageResponseNonce
    {
        return $this->container['nonce'];
    }

    /**
     * Sets nonce
     *
     * @param \OpenAPI\Client\Model\BasicMessageResponseNonce|null $nonce nonce
     *
     * @return $this
     */
    public function setNonce(?\OpenAPI\Client\Model\BasicMessageResponseNonce $nonce): static
    {
        if (is_null($nonce)) {
            array_push($this->openAPINullablesSetToNull, 'nonce');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nonce', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nonce'] = $nonce;

        return $this;
    }

    /**
     * Gets webhook_id
     *
     * @return string|null
     */
    public function getWebhookId(): ?string
    {
        return $this->container['webhook_id'];
    }

    /**
     * Sets webhook_id
     *
     * @param string|null $webhook_id webhook_id
     *
     * @return $this
     */
    public function setWebhookId(?string $webhook_id): static
    {
        if (is_null($webhook_id)) {
            throw new InvalidArgumentException('non-nullable webhook_id cannot be null');
        }

        if ((!preg_match("/^(0|[1-9][0-9]*)$/", ObjectSerializer::toString($webhook_id)))) {
            throw new InvalidArgumentException("invalid value for \$webhook_id when calling MessageResponse., must conform to the pattern /^(0|[1-9][0-9]*)$/.");
        }

        $this->container['webhook_id'] = $webhook_id;

        return $this;
    }

    /**
     * Gets message_reference
     *
     * @return \OpenAPI\Client\Model\MessageReferenceResponse|null
     */
    public function getMessageReference(): ?\OpenAPI\Client\Model\MessageReferenceResponse
    {
        return $this->container['message_reference'];
    }

    /**
     * Sets message_reference
     *
     * @param \OpenAPI\Client\Model\MessageReferenceResponse|null $message_reference message_reference
     *
     * @return $this
     */
    public function setMessageReference(?\OpenAPI\Client\Model\MessageReferenceResponse $message_reference): static
    {
        if (is_null($message_reference)) {
            array_push($this->openAPINullablesSetToNull, 'message_reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('message_reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['message_reference'] = $message_reference;

        return $this;
    }

    /**
     * Gets thread
     *
     * @return \OpenAPI\Client\Model\ThreadResponse|null
     */
    public function getThread(): ?\OpenAPI\Client\Model\ThreadResponse
    {
        return $this->container['thread'];
    }

    /**
     * Sets thread
     *
     * @param \OpenAPI\Client\Model\ThreadResponse|null $thread thread
     *
     * @return $this
     */
    public function setThread(?\OpenAPI\Client\Model\ThreadResponse $thread): static
    {
        if (is_null($thread)) {
            array_push($this->openAPINullablesSetToNull, 'thread');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('thread', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['thread'] = $thread;

        return $this;
    }

    /**
     * Gets mention_channels
     *
     * @return \OpenAPI\Client\Model\MessageMentionChannelResponse[]|null
     */
    public function getMentionChannels(): ?array
    {
        return $this->container['mention_channels'];
    }

    /**
     * Sets mention_channels
     *
     * @param \OpenAPI\Client\Model\MessageMentionChannelResponse[]|null $mention_channels mention_channels
     *
     * @return $this
     */
    public function setMentionChannels(?array $mention_channels): static
    {
        if (is_null($mention_channels)) {
            throw new InvalidArgumentException('non-nullable mention_channels cannot be null');
        }
        $this->container['mention_channels'] = $mention_channels;

        return $this;
    }

    /**
     * Gets stickers
     *
     * @return \OpenAPI\Client\Model\GetSticker200Response[]|null
     */
    public function getStickers(): ?array
    {
        return $this->container['stickers'];
    }

    /**
     * Sets stickers
     *
     * @param \OpenAPI\Client\Model\GetSticker200Response[]|null $stickers stickers
     *
     * @return $this
     */
    public function setStickers(?array $stickers): static
    {
        if (is_null($stickers)) {
            throw new InvalidArgumentException('non-nullable stickers cannot be null');
        }
        $this->container['stickers'] = $stickers;

        return $this;
    }

    /**
     * Gets sticker_items
     *
     * @return \OpenAPI\Client\Model\MessageStickerItemResponse[]|null
     */
    public function getStickerItems(): ?array
    {
        return $this->container['sticker_items'];
    }

    /**
     * Sets sticker_items
     *
     * @param \OpenAPI\Client\Model\MessageStickerItemResponse[]|null $sticker_items sticker_items
     *
     * @return $this
     */
    public function setStickerItems(?array $sticker_items): static
    {
        if (is_null($sticker_items)) {
            throw new InvalidArgumentException('non-nullable sticker_items cannot be null');
        }
        $this->container['sticker_items'] = $sticker_items;

        return $this;
    }

    /**
     * Gets role_subscription_data
     *
     * @return \OpenAPI\Client\Model\MessageRoleSubscriptionDataResponse|null
     */
    public function getRoleSubscriptionData(): ?\OpenAPI\Client\Model\MessageRoleSubscriptionDataResponse
    {
        return $this->container['role_subscription_data'];
    }

    /**
     * Sets role_subscription_data
     *
     * @param \OpenAPI\Client\Model\MessageRoleSubscriptionDataResponse|null $role_subscription_data role_subscription_data
     *
     * @return $this
     */
    public function setRoleSubscriptionData(?\OpenAPI\Client\Model\MessageRoleSubscriptionDataResponse $role_subscription_data): static
    {
        if (is_null($role_subscription_data)) {
            array_push($this->openAPINullablesSetToNull, 'role_subscription_data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('role_subscription_data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['role_subscription_data'] = $role_subscription_data;

        return $this;
    }

    /**
     * Gets purchase_notification
     *
     * @return \OpenAPI\Client\Model\PurchaseNotificationResponse|null
     */
    public function getPurchaseNotification(): ?\OpenAPI\Client\Model\PurchaseNotificationResponse
    {
        return $this->container['purchase_notification'];
    }

    /**
     * Sets purchase_notification
     *
     * @param \OpenAPI\Client\Model\PurchaseNotificationResponse|null $purchase_notification purchase_notification
     *
     * @return $this
     */
    public function setPurchaseNotification(?\OpenAPI\Client\Model\PurchaseNotificationResponse $purchase_notification): static
    {
        if (is_null($purchase_notification)) {
            array_push($this->openAPINullablesSetToNull, 'purchase_notification');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchase_notification', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['purchase_notification'] = $purchase_notification;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int|null
     */
    public function getPosition(): ?int
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int|null $position position
     *
     * @return $this
     */
    public function setPosition(?int $position): static
    {
        if (is_null($position)) {
            array_push($this->openAPINullablesSetToNull, 'position');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('position', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets resolved
     *
     * @return \OpenAPI\Client\Model\ResolvedObjectsResponse|null
     */
    public function getResolved(): ?\OpenAPI\Client\Model\ResolvedObjectsResponse
    {
        return $this->container['resolved'];
    }

    /**
     * Sets resolved
     *
     * @param \OpenAPI\Client\Model\ResolvedObjectsResponse|null $resolved resolved
     *
     * @return $this
     */
    public function setResolved(?\OpenAPI\Client\Model\ResolvedObjectsResponse $resolved): static
    {
        if (is_null($resolved)) {
            array_push($this->openAPINullablesSetToNull, 'resolved');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('resolved', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['resolved'] = $resolved;

        return $this;
    }

    /**
     * Gets reactions
     *
     * @return \OpenAPI\Client\Model\MessageReactionResponse[]|null
     */
    public function getReactions(): ?array
    {
        return $this->container['reactions'];
    }

    /**
     * Sets reactions
     *
     * @param \OpenAPI\Client\Model\MessageReactionResponse[]|null $reactions reactions
     *
     * @return $this
     */
    public function setReactions(?array $reactions): static
    {
        if (is_null($reactions)) {
            throw new InvalidArgumentException('non-nullable reactions cannot be null');
        }
        $this->container['reactions'] = $reactions;

        return $this;
    }

    /**
     * Gets referenced_message
     *
     * @return \OpenAPI\Client\Model\BasicMessageResponse|null
     */
    public function getReferencedMessage(): ?\OpenAPI\Client\Model\BasicMessageResponse
    {
        return $this->container['referenced_message'];
    }

    /**
     * Sets referenced_message
     *
     * @param \OpenAPI\Client\Model\BasicMessageResponse|null $referenced_message referenced_message
     *
     * @return $this
     */
    public function setReferencedMessage(?\OpenAPI\Client\Model\BasicMessageResponse $referenced_message): static
    {
        if (is_null($referenced_message)) {
            array_push($this->openAPINullablesSetToNull, 'referenced_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('referenced_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['referenced_message'] = $referenced_message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


