<?php
/**
 * MessageAttachmentResponse
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Discord HTTP API (Preview)
 *
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * MessageAttachmentResponse Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class MessageAttachmentResponse implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'MessageAttachmentResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'string',
        'filename' => 'string',
        'size' => 'int',
        'url' => 'string',
        'proxy_url' => 'string',
        'width' => 'int',
        'height' => 'int',
        'duration_secs' => 'float',
        'waveform' => 'string',
        'description' => 'string',
        'content_type' => 'string',
        'ephemeral' => 'bool',
        'title' => 'string',
        'application' => '\OpenAPI\Client\Model\ApplicationResponse',
        'clip_created_at' => '\DateTime',
        'clip_participants' => '\OpenAPI\Client\Model\UserResponse[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => 'snowflake',
        'filename' => null,
        'size' => 'int32',
        'url' => 'uri',
        'proxy_url' => 'uri',
        'width' => 'int32',
        'height' => 'int32',
        'duration_secs' => 'double',
        'waveform' => null,
        'description' => null,
        'content_type' => null,
        'ephemeral' => null,
        'title' => null,
        'application' => null,
        'clip_created_at' => 'date-time',
        'clip_participants' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
		'filename' => false,
		'size' => false,
		'url' => false,
		'proxy_url' => false,
		'width' => true,
		'height' => true,
		'duration_secs' => true,
		'waveform' => true,
		'description' => true,
		'content_type' => true,
		'ephemeral' => true,
		'title' => true,
		'application' => true,
		'clip_created_at' => true,
		'clip_participants' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'filename' => 'filename',
        'size' => 'size',
        'url' => 'url',
        'proxy_url' => 'proxy_url',
        'width' => 'width',
        'height' => 'height',
        'duration_secs' => 'duration_secs',
        'waveform' => 'waveform',
        'description' => 'description',
        'content_type' => 'content_type',
        'ephemeral' => 'ephemeral',
        'title' => 'title',
        'application' => 'application',
        'clip_created_at' => 'clip_created_at',
        'clip_participants' => 'clip_participants'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'filename' => 'setFilename',
        'size' => 'setSize',
        'url' => 'setUrl',
        'proxy_url' => 'setProxyUrl',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'duration_secs' => 'setDurationSecs',
        'waveform' => 'setWaveform',
        'description' => 'setDescription',
        'content_type' => 'setContentType',
        'ephemeral' => 'setEphemeral',
        'title' => 'setTitle',
        'application' => 'setApplication',
        'clip_created_at' => 'setClipCreatedAt',
        'clip_participants' => 'setClipParticipants'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'filename' => 'getFilename',
        'size' => 'getSize',
        'url' => 'getUrl',
        'proxy_url' => 'getProxyUrl',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'duration_secs' => 'getDurationSecs',
        'waveform' => 'getWaveform',
        'description' => 'getDescription',
        'content_type' => 'getContentType',
        'ephemeral' => 'getEphemeral',
        'title' => 'getTitle',
        'application' => 'getApplication',
        'clip_created_at' => 'getClipCreatedAt',
        'clip_participants' => 'getClipParticipants'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('filename', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('proxy_url', $data ?? [], null);
        $this->setIfExists('width', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('duration_secs', $data ?? [], null);
        $this->setIfExists('waveform', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('content_type', $data ?? [], null);
        $this->setIfExists('ephemeral', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('application', $data ?? [], null);
        $this->setIfExists('clip_created_at', $data ?? [], null);
        $this->setIfExists('clip_participants', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (!preg_match("/^(0|[1-9][0-9]*)$/", $this->container['id'])) {
            $invalidProperties[] = "invalid value for 'id', must be conform to the pattern /^(0|[1-9][0-9]*)$/.";
        }

        if ($this->container['filename'] === null) {
            $invalidProperties[] = "'filename' can't be null";
        }
        if ($this->container['size'] === null) {
            $invalidProperties[] = "'size' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['proxy_url'] === null) {
            $invalidProperties[] = "'proxy_url' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId(): string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId(string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }

        if ((!preg_match("/^(0|[1-9][0-9]*)$/", ObjectSerializer::toString($id)))) {
            throw new InvalidArgumentException("invalid value for \$id when calling MessageAttachmentResponse., must conform to the pattern /^(0|[1-9][0-9]*)$/.");
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets filename
     *
     * @return string
     */
    public function getFilename(): string
    {
        return $this->container['filename'];
    }

    /**
     * Sets filename
     *
     * @param string $filename filename
     *
     * @return $this
     */
    public function setFilename(string $filename): static
    {
        if (is_null($filename)) {
            throw new InvalidArgumentException('non-nullable filename cannot be null');
        }
        $this->container['filename'] = $filename;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize(): int
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size size
     *
     * @return $this
     */
    public function setSize(int $size): static
    {
        if (is_null($size)) {
            throw new InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl(): string
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl(string $url): static
    {
        if (is_null($url)) {
            throw new InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets proxy_url
     *
     * @return string
     */
    public function getProxyUrl(): string
    {
        return $this->container['proxy_url'];
    }

    /**
     * Sets proxy_url
     *
     * @param string $proxy_url proxy_url
     *
     * @return $this
     */
    public function setProxyUrl(string $proxy_url): static
    {
        if (is_null($proxy_url)) {
            throw new InvalidArgumentException('non-nullable proxy_url cannot be null');
        }
        $this->container['proxy_url'] = $proxy_url;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int|null
     */
    public function getWidth(): ?int
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int|null $width width
     *
     * @return $this
     */
    public function setWidth(?int $width): static
    {
        if (is_null($width)) {
            array_push($this->openAPINullablesSetToNull, 'width');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('width', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int|null
     */
    public function getHeight(): ?int
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int|null $height height
     *
     * @return $this
     */
    public function setHeight(?int $height): static
    {
        if (is_null($height)) {
            array_push($this->openAPINullablesSetToNull, 'height');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('height', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets duration_secs
     *
     * @return float|null
     */
    public function getDurationSecs(): ?float
    {
        return $this->container['duration_secs'];
    }

    /**
     * Sets duration_secs
     *
     * @param float|null $duration_secs duration_secs
     *
     * @return $this
     */
    public function setDurationSecs(?float $duration_secs): static
    {
        if (is_null($duration_secs)) {
            array_push($this->openAPINullablesSetToNull, 'duration_secs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('duration_secs', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['duration_secs'] = $duration_secs;

        return $this;
    }

    /**
     * Gets waveform
     *
     * @return string|null
     */
    public function getWaveform(): ?string
    {
        return $this->container['waveform'];
    }

    /**
     * Sets waveform
     *
     * @param string|null $waveform waveform
     *
     * @return $this
     */
    public function setWaveform(?string $waveform): static
    {
        if (is_null($waveform)) {
            array_push($this->openAPINullablesSetToNull, 'waveform');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('waveform', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['waveform'] = $waveform;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets content_type
     *
     * @return string|null
     */
    public function getContentType(): ?string
    {
        return $this->container['content_type'];
    }

    /**
     * Sets content_type
     *
     * @param string|null $content_type content_type
     *
     * @return $this
     */
    public function setContentType(?string $content_type): static
    {
        if (is_null($content_type)) {
            array_push($this->openAPINullablesSetToNull, 'content_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('content_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['content_type'] = $content_type;

        return $this;
    }

    /**
     * Gets ephemeral
     *
     * @return bool|null
     */
    public function getEphemeral(): ?bool
    {
        return $this->container['ephemeral'];
    }

    /**
     * Sets ephemeral
     *
     * @param bool|null $ephemeral ephemeral
     *
     * @return $this
     */
    public function setEphemeral(?bool $ephemeral): static
    {
        if (is_null($ephemeral)) {
            array_push($this->openAPINullablesSetToNull, 'ephemeral');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ephemeral', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ephemeral'] = $ephemeral;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle(): ?string
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return $this
     */
    public function setTitle(?string $title): static
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets application
     *
     * @return \OpenAPI\Client\Model\ApplicationResponse|null
     */
    public function getApplication(): ?\OpenAPI\Client\Model\ApplicationResponse
    {
        return $this->container['application'];
    }

    /**
     * Sets application
     *
     * @param \OpenAPI\Client\Model\ApplicationResponse|null $application application
     *
     * @return $this
     */
    public function setApplication(?\OpenAPI\Client\Model\ApplicationResponse $application): static
    {
        if (is_null($application)) {
            array_push($this->openAPINullablesSetToNull, 'application');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('application', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['application'] = $application;

        return $this;
    }

    /**
     * Gets clip_created_at
     *
     * @return \DateTime|null
     */
    public function getClipCreatedAt(): ?\DateTime
    {
        return $this->container['clip_created_at'];
    }

    /**
     * Sets clip_created_at
     *
     * @param \DateTime|null $clip_created_at clip_created_at
     *
     * @return $this
     */
    public function setClipCreatedAt(?\DateTime $clip_created_at): static
    {
        if (is_null($clip_created_at)) {
            array_push($this->openAPINullablesSetToNull, 'clip_created_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('clip_created_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['clip_created_at'] = $clip_created_at;

        return $this;
    }

    /**
     * Gets clip_participants
     *
     * @return \OpenAPI\Client\Model\UserResponse[]|null
     */
    public function getClipParticipants(): ?array
    {
        return $this->container['clip_participants'];
    }

    /**
     * Sets clip_participants
     *
     * @param \OpenAPI\Client\Model\UserResponse[]|null $clip_participants clip_participants
     *
     * @return $this
     */
    public function setClipParticipants(?array $clip_participants): static
    {
        if (is_null($clip_participants)) {
            throw new InvalidArgumentException('non-nullable clip_participants cannot be null');
        }
        $this->container['clip_participants'] = $clip_participants;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


