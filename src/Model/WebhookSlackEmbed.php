<?php
/**
 * WebhookSlackEmbed
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Discord HTTP API (Preview)
 *
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * WebhookSlackEmbed Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class WebhookSlackEmbed implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'WebhookSlackEmbed';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'title' => 'string',
        'title_link' => 'string',
        'text' => 'string',
        'color' => 'string',
        'ts' => 'int',
        'pretext' => 'string',
        'footer' => 'string',
        'footer_icon' => 'string',
        'author_name' => 'string',
        'author_link' => 'string',
        'author_icon' => 'string',
        'image_url' => 'string',
        'thumb_url' => 'string',
        'fields' => '\OpenAPI\Client\Model\WebhookSlackEmbedField[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'title' => null,
        'title_link' => 'uri',
        'text' => null,
        'color' => null,
        'ts' => null,
        'pretext' => null,
        'footer' => null,
        'footer_icon' => 'uri',
        'author_name' => null,
        'author_link' => 'uri',
        'author_icon' => 'uri',
        'image_url' => 'uri',
        'thumb_url' => 'uri',
        'fields' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'title' => true,
		'title_link' => true,
		'text' => true,
		'color' => true,
		'ts' => true,
		'pretext' => true,
		'footer' => true,
		'footer_icon' => true,
		'author_name' => true,
		'author_link' => true,
		'author_icon' => true,
		'image_url' => true,
		'thumb_url' => true,
		'fields' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'title' => 'title',
        'title_link' => 'title_link',
        'text' => 'text',
        'color' => 'color',
        'ts' => 'ts',
        'pretext' => 'pretext',
        'footer' => 'footer',
        'footer_icon' => 'footer_icon',
        'author_name' => 'author_name',
        'author_link' => 'author_link',
        'author_icon' => 'author_icon',
        'image_url' => 'image_url',
        'thumb_url' => 'thumb_url',
        'fields' => 'fields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'title' => 'setTitle',
        'title_link' => 'setTitleLink',
        'text' => 'setText',
        'color' => 'setColor',
        'ts' => 'setTs',
        'pretext' => 'setPretext',
        'footer' => 'setFooter',
        'footer_icon' => 'setFooterIcon',
        'author_name' => 'setAuthorName',
        'author_link' => 'setAuthorLink',
        'author_icon' => 'setAuthorIcon',
        'image_url' => 'setImageUrl',
        'thumb_url' => 'setThumbUrl',
        'fields' => 'setFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'title' => 'getTitle',
        'title_link' => 'getTitleLink',
        'text' => 'getText',
        'color' => 'getColor',
        'ts' => 'getTs',
        'pretext' => 'getPretext',
        'footer' => 'getFooter',
        'footer_icon' => 'getFooterIcon',
        'author_name' => 'getAuthorName',
        'author_link' => 'getAuthorLink',
        'author_icon' => 'getAuthorIcon',
        'image_url' => 'getImageUrl',
        'thumb_url' => 'getThumbUrl',
        'fields' => 'getFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('title_link', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('color', $data ?? [], null);
        $this->setIfExists('ts', $data ?? [], null);
        $this->setIfExists('pretext', $data ?? [], null);
        $this->setIfExists('footer', $data ?? [], null);
        $this->setIfExists('footer_icon', $data ?? [], null);
        $this->setIfExists('author_name', $data ?? [], null);
        $this->setIfExists('author_link', $data ?? [], null);
        $this->setIfExists('author_icon', $data ?? [], null);
        $this->setIfExists('image_url', $data ?? [], null);
        $this->setIfExists('thumb_url', $data ?? [], null);
        $this->setIfExists('fields', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) > 152133)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 152133.";
        }

        if (!is_null($this->container['title_link']) && (mb_strlen($this->container['title_link']) > 2048)) {
            $invalidProperties[] = "invalid value for 'title_link', the character length must be smaller than or equal to 2048.";
        }

        if (!is_null($this->container['text']) && (mb_strlen($this->container['text']) > 152133)) {
            $invalidProperties[] = "invalid value for 'text', the character length must be smaller than or equal to 152133.";
        }

        if (!is_null($this->container['color']) && (mb_strlen($this->container['color']) > 7)) {
            $invalidProperties[] = "invalid value for 'color', the character length must be smaller than or equal to 7.";
        }

        if (!is_null($this->container['color']) && !preg_match("/^#(([0-9a-fA-F]{2}){3}|([0-9a-fA-F]){3})$/", $this->container['color'])) {
            $invalidProperties[] = "invalid value for 'color', must be conform to the pattern /^#(([0-9a-fA-F]{2}){3}|([0-9a-fA-F]){3})$/.";
        }

        if (!is_null($this->container['pretext']) && (mb_strlen($this->container['pretext']) > 152133)) {
            $invalidProperties[] = "invalid value for 'pretext', the character length must be smaller than or equal to 152133.";
        }

        if (!is_null($this->container['footer']) && (mb_strlen($this->container['footer']) > 152133)) {
            $invalidProperties[] = "invalid value for 'footer', the character length must be smaller than or equal to 152133.";
        }

        if (!is_null($this->container['footer_icon']) && (mb_strlen($this->container['footer_icon']) > 2048)) {
            $invalidProperties[] = "invalid value for 'footer_icon', the character length must be smaller than or equal to 2048.";
        }

        if (!is_null($this->container['author_name']) && (mb_strlen($this->container['author_name']) > 152133)) {
            $invalidProperties[] = "invalid value for 'author_name', the character length must be smaller than or equal to 152133.";
        }

        if (!is_null($this->container['author_link']) && (mb_strlen($this->container['author_link']) > 2048)) {
            $invalidProperties[] = "invalid value for 'author_link', the character length must be smaller than or equal to 2048.";
        }

        if (!is_null($this->container['author_icon']) && (mb_strlen($this->container['author_icon']) > 2048)) {
            $invalidProperties[] = "invalid value for 'author_icon', the character length must be smaller than or equal to 2048.";
        }

        if (!is_null($this->container['image_url']) && (mb_strlen($this->container['image_url']) > 2048)) {
            $invalidProperties[] = "invalid value for 'image_url', the character length must be smaller than or equal to 2048.";
        }

        if (!is_null($this->container['thumb_url']) && (mb_strlen($this->container['thumb_url']) > 2048)) {
            $invalidProperties[] = "invalid value for 'thumb_url', the character length must be smaller than or equal to 2048.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle(): ?string
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return $this
     */
    public function setTitle(?string $title): static
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($title) && (mb_strlen($title) > 152133)) {
            throw new InvalidArgumentException('invalid length for $title when calling WebhookSlackEmbed., must be smaller than or equal to 152133.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets title_link
     *
     * @return string|null
     */
    public function getTitleLink(): ?string
    {
        return $this->container['title_link'];
    }

    /**
     * Sets title_link
     *
     * @param string|null $title_link title_link
     *
     * @return $this
     */
    public function setTitleLink(?string $title_link): static
    {
        if (is_null($title_link)) {
            array_push($this->openAPINullablesSetToNull, 'title_link');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title_link', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($title_link) && (mb_strlen($title_link) > 2048)) {
            throw new InvalidArgumentException('invalid length for $title_link when calling WebhookSlackEmbed., must be smaller than or equal to 2048.');
        }

        $this->container['title_link'] = $title_link;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText(): ?string
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text text
     *
     * @return $this
     */
    public function setText(?string $text): static
    {
        if (is_null($text)) {
            array_push($this->openAPINullablesSetToNull, 'text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($text) && (mb_strlen($text) > 152133)) {
            throw new InvalidArgumentException('invalid length for $text when calling WebhookSlackEmbed., must be smaller than or equal to 152133.');
        }

        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string|null
     */
    public function getColor(): ?string
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string|null $color color
     *
     * @return $this
     */
    public function setColor(?string $color): static
    {
        if (is_null($color)) {
            array_push($this->openAPINullablesSetToNull, 'color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('color', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($color) && (mb_strlen($color) > 7)) {
            throw new InvalidArgumentException('invalid length for $color when calling WebhookSlackEmbed., must be smaller than or equal to 7.');
        }
        if (!is_null($color) && (!preg_match("/^#(([0-9a-fA-F]{2}){3}|([0-9a-fA-F]){3})$/", ObjectSerializer::toString($color)))) {
            throw new InvalidArgumentException("invalid value for \$color when calling WebhookSlackEmbed., must conform to the pattern /^#(([0-9a-fA-F]{2}){3}|([0-9a-fA-F]){3})$/.");
        }

        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets ts
     *
     * @return int|null
     */
    public function getTs(): ?int
    {
        return $this->container['ts'];
    }

    /**
     * Sets ts
     *
     * @param int|null $ts ts
     *
     * @return $this
     */
    public function setTs(?int $ts): static
    {
        if (is_null($ts)) {
            array_push($this->openAPINullablesSetToNull, 'ts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ts'] = $ts;

        return $this;
    }

    /**
     * Gets pretext
     *
     * @return string|null
     */
    public function getPretext(): ?string
    {
        return $this->container['pretext'];
    }

    /**
     * Sets pretext
     *
     * @param string|null $pretext pretext
     *
     * @return $this
     */
    public function setPretext(?string $pretext): static
    {
        if (is_null($pretext)) {
            array_push($this->openAPINullablesSetToNull, 'pretext');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pretext', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($pretext) && (mb_strlen($pretext) > 152133)) {
            throw new InvalidArgumentException('invalid length for $pretext when calling WebhookSlackEmbed., must be smaller than or equal to 152133.');
        }

        $this->container['pretext'] = $pretext;

        return $this;
    }

    /**
     * Gets footer
     *
     * @return string|null
     */
    public function getFooter(): ?string
    {
        return $this->container['footer'];
    }

    /**
     * Sets footer
     *
     * @param string|null $footer footer
     *
     * @return $this
     */
    public function setFooter(?string $footer): static
    {
        if (is_null($footer)) {
            array_push($this->openAPINullablesSetToNull, 'footer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('footer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($footer) && (mb_strlen($footer) > 152133)) {
            throw new InvalidArgumentException('invalid length for $footer when calling WebhookSlackEmbed., must be smaller than or equal to 152133.');
        }

        $this->container['footer'] = $footer;

        return $this;
    }

    /**
     * Gets footer_icon
     *
     * @return string|null
     */
    public function getFooterIcon(): ?string
    {
        return $this->container['footer_icon'];
    }

    /**
     * Sets footer_icon
     *
     * @param string|null $footer_icon footer_icon
     *
     * @return $this
     */
    public function setFooterIcon(?string $footer_icon): static
    {
        if (is_null($footer_icon)) {
            array_push($this->openAPINullablesSetToNull, 'footer_icon');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('footer_icon', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($footer_icon) && (mb_strlen($footer_icon) > 2048)) {
            throw new InvalidArgumentException('invalid length for $footer_icon when calling WebhookSlackEmbed., must be smaller than or equal to 2048.');
        }

        $this->container['footer_icon'] = $footer_icon;

        return $this;
    }

    /**
     * Gets author_name
     *
     * @return string|null
     */
    public function getAuthorName(): ?string
    {
        return $this->container['author_name'];
    }

    /**
     * Sets author_name
     *
     * @param string|null $author_name author_name
     *
     * @return $this
     */
    public function setAuthorName(?string $author_name): static
    {
        if (is_null($author_name)) {
            array_push($this->openAPINullablesSetToNull, 'author_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('author_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($author_name) && (mb_strlen($author_name) > 152133)) {
            throw new InvalidArgumentException('invalid length for $author_name when calling WebhookSlackEmbed., must be smaller than or equal to 152133.');
        }

        $this->container['author_name'] = $author_name;

        return $this;
    }

    /**
     * Gets author_link
     *
     * @return string|null
     */
    public function getAuthorLink(): ?string
    {
        return $this->container['author_link'];
    }

    /**
     * Sets author_link
     *
     * @param string|null $author_link author_link
     *
     * @return $this
     */
    public function setAuthorLink(?string $author_link): static
    {
        if (is_null($author_link)) {
            array_push($this->openAPINullablesSetToNull, 'author_link');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('author_link', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($author_link) && (mb_strlen($author_link) > 2048)) {
            throw new InvalidArgumentException('invalid length for $author_link when calling WebhookSlackEmbed., must be smaller than or equal to 2048.');
        }

        $this->container['author_link'] = $author_link;

        return $this;
    }

    /**
     * Gets author_icon
     *
     * @return string|null
     */
    public function getAuthorIcon(): ?string
    {
        return $this->container['author_icon'];
    }

    /**
     * Sets author_icon
     *
     * @param string|null $author_icon author_icon
     *
     * @return $this
     */
    public function setAuthorIcon(?string $author_icon): static
    {
        if (is_null($author_icon)) {
            array_push($this->openAPINullablesSetToNull, 'author_icon');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('author_icon', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($author_icon) && (mb_strlen($author_icon) > 2048)) {
            throw new InvalidArgumentException('invalid length for $author_icon when calling WebhookSlackEmbed., must be smaller than or equal to 2048.');
        }

        $this->container['author_icon'] = $author_icon;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string|null
     */
    public function getImageUrl(): ?string
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string|null $image_url image_url
     *
     * @return $this
     */
    public function setImageUrl(?string $image_url): static
    {
        if (is_null($image_url)) {
            array_push($this->openAPINullablesSetToNull, 'image_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('image_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($image_url) && (mb_strlen($image_url) > 2048)) {
            throw new InvalidArgumentException('invalid length for $image_url when calling WebhookSlackEmbed., must be smaller than or equal to 2048.');
        }

        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets thumb_url
     *
     * @return string|null
     */
    public function getThumbUrl(): ?string
    {
        return $this->container['thumb_url'];
    }

    /**
     * Sets thumb_url
     *
     * @param string|null $thumb_url thumb_url
     *
     * @return $this
     */
    public function setThumbUrl(?string $thumb_url): static
    {
        if (is_null($thumb_url)) {
            array_push($this->openAPINullablesSetToNull, 'thumb_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('thumb_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($thumb_url) && (mb_strlen($thumb_url) > 2048)) {
            throw new InvalidArgumentException('invalid length for $thumb_url when calling WebhookSlackEmbed., must be smaller than or equal to 2048.');
        }

        $this->container['thumb_url'] = $thumb_url;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return \OpenAPI\Client\Model\WebhookSlackEmbedField[]|null
     */
    public function getFields(): ?array
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param \OpenAPI\Client\Model\WebhookSlackEmbedField[]|null $fields fields
     *
     * @return $this
     */
    public function setFields(?array $fields): static
    {
        if (is_null($fields)) {
            throw new InvalidArgumentException('non-nullable fields cannot be null');
        }
        $this->container['fields'] = $fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


