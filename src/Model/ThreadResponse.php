<?php
/**
 * ThreadResponse
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Discord HTTP API (Preview)
 *
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * ThreadResponse Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ThreadResponse implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ThreadResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'string',
        'type' => '\OpenAPI\Client\Model\ChannelTypes',
        'last_message_id' => '\OpenAPI\Client\Model\UpdateSelfVoiceStateRequestChannelId',
        'flags' => 'int',
        'last_pin_timestamp' => '\DateTime',
        'guild_id' => 'string',
        'name' => 'string',
        'parent_id' => '\OpenAPI\Client\Model\UpdateSelfVoiceStateRequestChannelId',
        'rate_limit_per_user' => 'int',
        'bitrate' => 'int',
        'user_limit' => 'int',
        'rtc_region' => 'string',
        'video_quality_mode' => '\OpenAPI\Client\Model\VideoQualityModes',
        'permissions' => 'string',
        'owner_id' => 'string',
        'thread_metadata' => '\OpenAPI\Client\Model\ThreadMetadataResponse',
        'message_count' => 'int',
        'member_count' => 'int',
        'total_message_sent' => 'int',
        'applied_tags' => 'string[]',
        'member' => '\OpenAPI\Client\Model\ThreadMemberResponse'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => 'snowflake',
        'type' => null,
        'last_message_id' => null,
        'flags' => 'int32',
        'last_pin_timestamp' => 'date-time',
        'guild_id' => 'snowflake',
        'name' => null,
        'parent_id' => null,
        'rate_limit_per_user' => 'int32',
        'bitrate' => 'int32',
        'user_limit' => 'int32',
        'rtc_region' => null,
        'video_quality_mode' => null,
        'permissions' => null,
        'owner_id' => 'snowflake',
        'thread_metadata' => null,
        'message_count' => 'int32',
        'member_count' => 'int32',
        'total_message_sent' => 'int32',
        'applied_tags' => 'snowflake',
        'member' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
		'type' => true,
		'last_message_id' => true,
		'flags' => false,
		'last_pin_timestamp' => true,
		'guild_id' => false,
		'name' => true,
		'parent_id' => true,
		'rate_limit_per_user' => true,
		'bitrate' => true,
		'user_limit' => true,
		'rtc_region' => true,
		'video_quality_mode' => true,
		'permissions' => true,
		'owner_id' => false,
		'thread_metadata' => true,
		'message_count' => false,
		'member_count' => false,
		'total_message_sent' => false,
		'applied_tags' => false,
		'member' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'last_message_id' => 'last_message_id',
        'flags' => 'flags',
        'last_pin_timestamp' => 'last_pin_timestamp',
        'guild_id' => 'guild_id',
        'name' => 'name',
        'parent_id' => 'parent_id',
        'rate_limit_per_user' => 'rate_limit_per_user',
        'bitrate' => 'bitrate',
        'user_limit' => 'user_limit',
        'rtc_region' => 'rtc_region',
        'video_quality_mode' => 'video_quality_mode',
        'permissions' => 'permissions',
        'owner_id' => 'owner_id',
        'thread_metadata' => 'thread_metadata',
        'message_count' => 'message_count',
        'member_count' => 'member_count',
        'total_message_sent' => 'total_message_sent',
        'applied_tags' => 'applied_tags',
        'member' => 'member'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'last_message_id' => 'setLastMessageId',
        'flags' => 'setFlags',
        'last_pin_timestamp' => 'setLastPinTimestamp',
        'guild_id' => 'setGuildId',
        'name' => 'setName',
        'parent_id' => 'setParentId',
        'rate_limit_per_user' => 'setRateLimitPerUser',
        'bitrate' => 'setBitrate',
        'user_limit' => 'setUserLimit',
        'rtc_region' => 'setRtcRegion',
        'video_quality_mode' => 'setVideoQualityMode',
        'permissions' => 'setPermissions',
        'owner_id' => 'setOwnerId',
        'thread_metadata' => 'setThreadMetadata',
        'message_count' => 'setMessageCount',
        'member_count' => 'setMemberCount',
        'total_message_sent' => 'setTotalMessageSent',
        'applied_tags' => 'setAppliedTags',
        'member' => 'setMember'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'last_message_id' => 'getLastMessageId',
        'flags' => 'getFlags',
        'last_pin_timestamp' => 'getLastPinTimestamp',
        'guild_id' => 'getGuildId',
        'name' => 'getName',
        'parent_id' => 'getParentId',
        'rate_limit_per_user' => 'getRateLimitPerUser',
        'bitrate' => 'getBitrate',
        'user_limit' => 'getUserLimit',
        'rtc_region' => 'getRtcRegion',
        'video_quality_mode' => 'getVideoQualityMode',
        'permissions' => 'getPermissions',
        'owner_id' => 'getOwnerId',
        'thread_metadata' => 'getThreadMetadata',
        'message_count' => 'getMessageCount',
        'member_count' => 'getMemberCount',
        'total_message_sent' => 'getTotalMessageSent',
        'applied_tags' => 'getAppliedTags',
        'member' => 'getMember'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('last_message_id', $data ?? [], null);
        $this->setIfExists('flags', $data ?? [], null);
        $this->setIfExists('last_pin_timestamp', $data ?? [], null);
        $this->setIfExists('guild_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('parent_id', $data ?? [], null);
        $this->setIfExists('rate_limit_per_user', $data ?? [], null);
        $this->setIfExists('bitrate', $data ?? [], null);
        $this->setIfExists('user_limit', $data ?? [], null);
        $this->setIfExists('rtc_region', $data ?? [], null);
        $this->setIfExists('video_quality_mode', $data ?? [], null);
        $this->setIfExists('permissions', $data ?? [], null);
        $this->setIfExists('owner_id', $data ?? [], null);
        $this->setIfExists('thread_metadata', $data ?? [], null);
        $this->setIfExists('message_count', $data ?? [], null);
        $this->setIfExists('member_count', $data ?? [], null);
        $this->setIfExists('total_message_sent', $data ?? [], null);
        $this->setIfExists('applied_tags', $data ?? [], null);
        $this->setIfExists('member', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (!preg_match("/^(0|[1-9][0-9]*)$/", $this->container['id'])) {
            $invalidProperties[] = "invalid value for 'id', must be conform to the pattern /^(0|[1-9][0-9]*)$/.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['flags'] === null) {
            $invalidProperties[] = "'flags' can't be null";
        }
        if ($this->container['guild_id'] === null) {
            $invalidProperties[] = "'guild_id' can't be null";
        }
        if (!preg_match("/^(0|[1-9][0-9]*)$/", $this->container['guild_id'])) {
            $invalidProperties[] = "invalid value for 'guild_id', must be conform to the pattern /^(0|[1-9][0-9]*)$/.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['owner_id'] === null) {
            $invalidProperties[] = "'owner_id' can't be null";
        }
        if (!preg_match("/^(0|[1-9][0-9]*)$/", $this->container['owner_id'])) {
            $invalidProperties[] = "invalid value for 'owner_id', must be conform to the pattern /^(0|[1-9][0-9]*)$/.";
        }

        if ($this->container['message_count'] === null) {
            $invalidProperties[] = "'message_count' can't be null";
        }
        if ($this->container['member_count'] === null) {
            $invalidProperties[] = "'member_count' can't be null";
        }
        if ($this->container['total_message_sent'] === null) {
            $invalidProperties[] = "'total_message_sent' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId(): string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId(string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }

        if ((!preg_match("/^(0|[1-9][0-9]*)$/", ObjectSerializer::toString($id)))) {
            throw new InvalidArgumentException("invalid value for \$id when calling ThreadResponse., must conform to the pattern /^(0|[1-9][0-9]*)$/.");
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\ChannelTypes
     */
    public function getType(): ?\OpenAPI\Client\Model\ChannelTypes
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\ChannelTypes $type type
     *
     * @return $this
     */
    public function setType(?\OpenAPI\Client\Model\ChannelTypes $type): static
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets last_message_id
     *
     * @return \OpenAPI\Client\Model\UpdateSelfVoiceStateRequestChannelId|null
     */
    public function getLastMessageId(): ?\OpenAPI\Client\Model\UpdateSelfVoiceStateRequestChannelId
    {
        return $this->container['last_message_id'];
    }

    /**
     * Sets last_message_id
     *
     * @param \OpenAPI\Client\Model\UpdateSelfVoiceStateRequestChannelId|null $last_message_id last_message_id
     *
     * @return $this
     */
    public function setLastMessageId(?\OpenAPI\Client\Model\UpdateSelfVoiceStateRequestChannelId $last_message_id): static
    {
        if (is_null($last_message_id)) {
            array_push($this->openAPINullablesSetToNull, 'last_message_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_message_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_message_id'] = $last_message_id;

        return $this;
    }

    /**
     * Gets flags
     *
     * @return int
     */
    public function getFlags(): int
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     *
     * @param int $flags flags
     *
     * @return $this
     */
    public function setFlags(int $flags): static
    {
        if (is_null($flags)) {
            throw new InvalidArgumentException('non-nullable flags cannot be null');
        }
        $this->container['flags'] = $flags;

        return $this;
    }

    /**
     * Gets last_pin_timestamp
     *
     * @return \DateTime|null
     */
    public function getLastPinTimestamp(): ?\DateTime
    {
        return $this->container['last_pin_timestamp'];
    }

    /**
     * Sets last_pin_timestamp
     *
     * @param \DateTime|null $last_pin_timestamp last_pin_timestamp
     *
     * @return $this
     */
    public function setLastPinTimestamp(?\DateTime $last_pin_timestamp): static
    {
        if (is_null($last_pin_timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'last_pin_timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_pin_timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_pin_timestamp'] = $last_pin_timestamp;

        return $this;
    }

    /**
     * Gets guild_id
     *
     * @return string
     */
    public function getGuildId(): string
    {
        return $this->container['guild_id'];
    }

    /**
     * Sets guild_id
     *
     * @param string $guild_id guild_id
     *
     * @return $this
     */
    public function setGuildId(string $guild_id): static
    {
        if (is_null($guild_id)) {
            throw new InvalidArgumentException('non-nullable guild_id cannot be null');
        }

        if ((!preg_match("/^(0|[1-9][0-9]*)$/", ObjectSerializer::toString($guild_id)))) {
            throw new InvalidArgumentException("invalid value for \$guild_id when calling ThreadResponse., must conform to the pattern /^(0|[1-9][0-9]*)$/.");
        }

        $this->container['guild_id'] = $guild_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return \OpenAPI\Client\Model\UpdateSelfVoiceStateRequestChannelId|null
     */
    public function getParentId(): ?\OpenAPI\Client\Model\UpdateSelfVoiceStateRequestChannelId
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param \OpenAPI\Client\Model\UpdateSelfVoiceStateRequestChannelId|null $parent_id parent_id
     *
     * @return $this
     */
    public function setParentId(?\OpenAPI\Client\Model\UpdateSelfVoiceStateRequestChannelId $parent_id): static
    {
        if (is_null($parent_id)) {
            array_push($this->openAPINullablesSetToNull, 'parent_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets rate_limit_per_user
     *
     * @return int|null
     */
    public function getRateLimitPerUser(): ?int
    {
        return $this->container['rate_limit_per_user'];
    }

    /**
     * Sets rate_limit_per_user
     *
     * @param int|null $rate_limit_per_user rate_limit_per_user
     *
     * @return $this
     */
    public function setRateLimitPerUser(?int $rate_limit_per_user): static
    {
        if (is_null($rate_limit_per_user)) {
            array_push($this->openAPINullablesSetToNull, 'rate_limit_per_user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rate_limit_per_user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rate_limit_per_user'] = $rate_limit_per_user;

        return $this;
    }

    /**
     * Gets bitrate
     *
     * @return int|null
     */
    public function getBitrate(): ?int
    {
        return $this->container['bitrate'];
    }

    /**
     * Sets bitrate
     *
     * @param int|null $bitrate bitrate
     *
     * @return $this
     */
    public function setBitrate(?int $bitrate): static
    {
        if (is_null($bitrate)) {
            array_push($this->openAPINullablesSetToNull, 'bitrate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bitrate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bitrate'] = $bitrate;

        return $this;
    }

    /**
     * Gets user_limit
     *
     * @return int|null
     */
    public function getUserLimit(): ?int
    {
        return $this->container['user_limit'];
    }

    /**
     * Sets user_limit
     *
     * @param int|null $user_limit user_limit
     *
     * @return $this
     */
    public function setUserLimit(?int $user_limit): static
    {
        if (is_null($user_limit)) {
            array_push($this->openAPINullablesSetToNull, 'user_limit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_limit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_limit'] = $user_limit;

        return $this;
    }

    /**
     * Gets rtc_region
     *
     * @return string|null
     */
    public function getRtcRegion(): ?string
    {
        return $this->container['rtc_region'];
    }

    /**
     * Sets rtc_region
     *
     * @param string|null $rtc_region rtc_region
     *
     * @return $this
     */
    public function setRtcRegion(?string $rtc_region): static
    {
        if (is_null($rtc_region)) {
            array_push($this->openAPINullablesSetToNull, 'rtc_region');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rtc_region', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rtc_region'] = $rtc_region;

        return $this;
    }

    /**
     * Gets video_quality_mode
     *
     * @return \OpenAPI\Client\Model\VideoQualityModes|null
     */
    public function getVideoQualityMode(): ?\OpenAPI\Client\Model\VideoQualityModes
    {
        return $this->container['video_quality_mode'];
    }

    /**
     * Sets video_quality_mode
     *
     * @param \OpenAPI\Client\Model\VideoQualityModes|null $video_quality_mode video_quality_mode
     *
     * @return $this
     */
    public function setVideoQualityMode(?\OpenAPI\Client\Model\VideoQualityModes $video_quality_mode): static
    {
        if (is_null($video_quality_mode)) {
            array_push($this->openAPINullablesSetToNull, 'video_quality_mode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('video_quality_mode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['video_quality_mode'] = $video_quality_mode;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return string|null
     */
    public function getPermissions(): ?string
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param string|null $permissions permissions
     *
     * @return $this
     */
    public function setPermissions(?string $permissions): static
    {
        if (is_null($permissions)) {
            array_push($this->openAPINullablesSetToNull, 'permissions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('permissions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return string
     */
    public function getOwnerId(): string
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param string $owner_id owner_id
     *
     * @return $this
     */
    public function setOwnerId(string $owner_id): static
    {
        if (is_null($owner_id)) {
            throw new InvalidArgumentException('non-nullable owner_id cannot be null');
        }

        if ((!preg_match("/^(0|[1-9][0-9]*)$/", ObjectSerializer::toString($owner_id)))) {
            throw new InvalidArgumentException("invalid value for \$owner_id when calling ThreadResponse., must conform to the pattern /^(0|[1-9][0-9]*)$/.");
        }

        $this->container['owner_id'] = $owner_id;

        return $this;
    }

    /**
     * Gets thread_metadata
     *
     * @return \OpenAPI\Client\Model\ThreadMetadataResponse|null
     */
    public function getThreadMetadata(): ?\OpenAPI\Client\Model\ThreadMetadataResponse
    {
        return $this->container['thread_metadata'];
    }

    /**
     * Sets thread_metadata
     *
     * @param \OpenAPI\Client\Model\ThreadMetadataResponse|null $thread_metadata thread_metadata
     *
     * @return $this
     */
    public function setThreadMetadata(?\OpenAPI\Client\Model\ThreadMetadataResponse $thread_metadata): static
    {
        if (is_null($thread_metadata)) {
            array_push($this->openAPINullablesSetToNull, 'thread_metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('thread_metadata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['thread_metadata'] = $thread_metadata;

        return $this;
    }

    /**
     * Gets message_count
     *
     * @return int
     */
    public function getMessageCount(): int
    {
        return $this->container['message_count'];
    }

    /**
     * Sets message_count
     *
     * @param int $message_count message_count
     *
     * @return $this
     */
    public function setMessageCount(int $message_count): static
    {
        if (is_null($message_count)) {
            throw new InvalidArgumentException('non-nullable message_count cannot be null');
        }
        $this->container['message_count'] = $message_count;

        return $this;
    }

    /**
     * Gets member_count
     *
     * @return int
     */
    public function getMemberCount(): int
    {
        return $this->container['member_count'];
    }

    /**
     * Sets member_count
     *
     * @param int $member_count member_count
     *
     * @return $this
     */
    public function setMemberCount(int $member_count): static
    {
        if (is_null($member_count)) {
            throw new InvalidArgumentException('non-nullable member_count cannot be null');
        }
        $this->container['member_count'] = $member_count;

        return $this;
    }

    /**
     * Gets total_message_sent
     *
     * @return int
     */
    public function getTotalMessageSent(): int
    {
        return $this->container['total_message_sent'];
    }

    /**
     * Sets total_message_sent
     *
     * @param int $total_message_sent total_message_sent
     *
     * @return $this
     */
    public function setTotalMessageSent(int $total_message_sent): static
    {
        if (is_null($total_message_sent)) {
            throw new InvalidArgumentException('non-nullable total_message_sent cannot be null');
        }
        $this->container['total_message_sent'] = $total_message_sent;

        return $this;
    }

    /**
     * Gets applied_tags
     *
     * @return string[]|null
     */
    public function getAppliedTags(): ?array
    {
        return $this->container['applied_tags'];
    }

    /**
     * Sets applied_tags
     *
     * @param string[]|null $applied_tags applied_tags
     *
     * @return $this
     */
    public function setAppliedTags(?array $applied_tags): static
    {
        if (is_null($applied_tags)) {
            throw new InvalidArgumentException('non-nullable applied_tags cannot be null');
        }
        $this->container['applied_tags'] = $applied_tags;

        return $this;
    }

    /**
     * Gets member
     *
     * @return \OpenAPI\Client\Model\ThreadMemberResponse|null
     */
    public function getMember(): ?\OpenAPI\Client\Model\ThreadMemberResponse
    {
        return $this->container['member'];
    }

    /**
     * Sets member
     *
     * @param \OpenAPI\Client\Model\ThreadMemberResponse|null $member member
     *
     * @return $this
     */
    public function setMember(?\OpenAPI\Client\Model\ThreadMemberResponse $member): static
    {
        if (is_null($member)) {
            array_push($this->openAPINullablesSetToNull, 'member');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('member', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['member'] = $member;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


