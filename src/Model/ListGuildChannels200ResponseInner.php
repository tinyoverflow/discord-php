<?php
/**
 * ListGuildChannels200ResponseInner
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Discord HTTP API (Preview)
 *
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * ListGuildChannels200ResponseInner Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ListGuildChannels200ResponseInner implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'list_guild_channels_200_response_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'mixed',
        'type' => '\OpenAPI\Client\Model\ChannelTypes',
        'last_message_id' => '\OpenAPI\Client\Model\UpdateSelfVoiceStateRequestChannelId',
        'flags' => 'mixed',
        'last_pin_timestamp' => 'mixed',
        'guild_id' => 'mixed',
        'name' => 'mixed',
        'parent_id' => '\OpenAPI\Client\Model\UpdateSelfVoiceStateRequestChannelId',
        'rate_limit_per_user' => 'mixed',
        'bitrate' => 'mixed',
        'user_limit' => 'mixed',
        'rtc_region' => 'mixed',
        'video_quality_mode' => '\OpenAPI\Client\Model\VideoQualityModes',
        'permissions' => 'mixed',
        'topic' => 'mixed',
        'default_auto_archive_duration' => '\OpenAPI\Client\Model\ThreadAutoArchiveDuration',
        'default_thread_rate_limit_per_user' => 'mixed',
        'position' => 'mixed',
        'permission_overwrites' => 'mixed',
        'nsfw' => 'mixed',
        'available_tags' => 'mixed',
        'default_reaction_emoji' => '\OpenAPI\Client\Model\DefaultReactionEmojiResponse',
        'default_sort_order' => '\OpenAPI\Client\Model\ThreadSortOrder',
        'default_forum_layout' => '\OpenAPI\Client\Model\ForumLayout',
        'recipients' => 'mixed',
        'icon' => 'mixed',
        'owner_id' => 'mixed',
        'managed' => 'mixed',
        'application_id' => 'mixed',
        'thread_metadata' => '\OpenAPI\Client\Model\ThreadMetadataResponse',
        'message_count' => 'mixed',
        'member_count' => 'mixed',
        'total_message_sent' => 'mixed',
        'applied_tags' => 'mixed',
        'member' => '\OpenAPI\Client\Model\ThreadMemberResponse'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => 'snowflake',
        'type' => null,
        'last_message_id' => null,
        'flags' => 'int32',
        'last_pin_timestamp' => 'date-time',
        'guild_id' => 'snowflake',
        'name' => null,
        'parent_id' => null,
        'rate_limit_per_user' => 'int32',
        'bitrate' => 'int32',
        'user_limit' => 'int32',
        'rtc_region' => null,
        'video_quality_mode' => null,
        'permissions' => null,
        'topic' => null,
        'default_auto_archive_duration' => null,
        'default_thread_rate_limit_per_user' => 'int32',
        'position' => 'int32',
        'permission_overwrites' => null,
        'nsfw' => null,
        'available_tags' => null,
        'default_reaction_emoji' => null,
        'default_sort_order' => null,
        'default_forum_layout' => null,
        'recipients' => null,
        'icon' => null,
        'owner_id' => 'snowflake',
        'managed' => null,
        'application_id' => 'snowflake',
        'thread_metadata' => null,
        'message_count' => 'int32',
        'member_count' => 'int32',
        'total_message_sent' => 'int32',
        'applied_tags' => null,
        'member' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => true,
		'type' => true,
		'last_message_id' => true,
		'flags' => true,
		'last_pin_timestamp' => true,
		'guild_id' => true,
		'name' => true,
		'parent_id' => true,
		'rate_limit_per_user' => true,
		'bitrate' => true,
		'user_limit' => true,
		'rtc_region' => true,
		'video_quality_mode' => true,
		'permissions' => true,
		'topic' => true,
		'default_auto_archive_duration' => true,
		'default_thread_rate_limit_per_user' => true,
		'position' => true,
		'permission_overwrites' => true,
		'nsfw' => true,
		'available_tags' => true,
		'default_reaction_emoji' => false,
		'default_sort_order' => true,
		'default_forum_layout' => true,
		'recipients' => true,
		'icon' => true,
		'owner_id' => true,
		'managed' => true,
		'application_id' => true,
		'thread_metadata' => false,
		'message_count' => true,
		'member_count' => true,
		'total_message_sent' => true,
		'applied_tags' => true,
		'member' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'last_message_id' => 'last_message_id',
        'flags' => 'flags',
        'last_pin_timestamp' => 'last_pin_timestamp',
        'guild_id' => 'guild_id',
        'name' => 'name',
        'parent_id' => 'parent_id',
        'rate_limit_per_user' => 'rate_limit_per_user',
        'bitrate' => 'bitrate',
        'user_limit' => 'user_limit',
        'rtc_region' => 'rtc_region',
        'video_quality_mode' => 'video_quality_mode',
        'permissions' => 'permissions',
        'topic' => 'topic',
        'default_auto_archive_duration' => 'default_auto_archive_duration',
        'default_thread_rate_limit_per_user' => 'default_thread_rate_limit_per_user',
        'position' => 'position',
        'permission_overwrites' => 'permission_overwrites',
        'nsfw' => 'nsfw',
        'available_tags' => 'available_tags',
        'default_reaction_emoji' => 'default_reaction_emoji',
        'default_sort_order' => 'default_sort_order',
        'default_forum_layout' => 'default_forum_layout',
        'recipients' => 'recipients',
        'icon' => 'icon',
        'owner_id' => 'owner_id',
        'managed' => 'managed',
        'application_id' => 'application_id',
        'thread_metadata' => 'thread_metadata',
        'message_count' => 'message_count',
        'member_count' => 'member_count',
        'total_message_sent' => 'total_message_sent',
        'applied_tags' => 'applied_tags',
        'member' => 'member'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'last_message_id' => 'setLastMessageId',
        'flags' => 'setFlags',
        'last_pin_timestamp' => 'setLastPinTimestamp',
        'guild_id' => 'setGuildId',
        'name' => 'setName',
        'parent_id' => 'setParentId',
        'rate_limit_per_user' => 'setRateLimitPerUser',
        'bitrate' => 'setBitrate',
        'user_limit' => 'setUserLimit',
        'rtc_region' => 'setRtcRegion',
        'video_quality_mode' => 'setVideoQualityMode',
        'permissions' => 'setPermissions',
        'topic' => 'setTopic',
        'default_auto_archive_duration' => 'setDefaultAutoArchiveDuration',
        'default_thread_rate_limit_per_user' => 'setDefaultThreadRateLimitPerUser',
        'position' => 'setPosition',
        'permission_overwrites' => 'setPermissionOverwrites',
        'nsfw' => 'setNsfw',
        'available_tags' => 'setAvailableTags',
        'default_reaction_emoji' => 'setDefaultReactionEmoji',
        'default_sort_order' => 'setDefaultSortOrder',
        'default_forum_layout' => 'setDefaultForumLayout',
        'recipients' => 'setRecipients',
        'icon' => 'setIcon',
        'owner_id' => 'setOwnerId',
        'managed' => 'setManaged',
        'application_id' => 'setApplicationId',
        'thread_metadata' => 'setThreadMetadata',
        'message_count' => 'setMessageCount',
        'member_count' => 'setMemberCount',
        'total_message_sent' => 'setTotalMessageSent',
        'applied_tags' => 'setAppliedTags',
        'member' => 'setMember'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'last_message_id' => 'getLastMessageId',
        'flags' => 'getFlags',
        'last_pin_timestamp' => 'getLastPinTimestamp',
        'guild_id' => 'getGuildId',
        'name' => 'getName',
        'parent_id' => 'getParentId',
        'rate_limit_per_user' => 'getRateLimitPerUser',
        'bitrate' => 'getBitrate',
        'user_limit' => 'getUserLimit',
        'rtc_region' => 'getRtcRegion',
        'video_quality_mode' => 'getVideoQualityMode',
        'permissions' => 'getPermissions',
        'topic' => 'getTopic',
        'default_auto_archive_duration' => 'getDefaultAutoArchiveDuration',
        'default_thread_rate_limit_per_user' => 'getDefaultThreadRateLimitPerUser',
        'position' => 'getPosition',
        'permission_overwrites' => 'getPermissionOverwrites',
        'nsfw' => 'getNsfw',
        'available_tags' => 'getAvailableTags',
        'default_reaction_emoji' => 'getDefaultReactionEmoji',
        'default_sort_order' => 'getDefaultSortOrder',
        'default_forum_layout' => 'getDefaultForumLayout',
        'recipients' => 'getRecipients',
        'icon' => 'getIcon',
        'owner_id' => 'getOwnerId',
        'managed' => 'getManaged',
        'application_id' => 'getApplicationId',
        'thread_metadata' => 'getThreadMetadata',
        'message_count' => 'getMessageCount',
        'member_count' => 'getMemberCount',
        'total_message_sent' => 'getTotalMessageSent',
        'applied_tags' => 'getAppliedTags',
        'member' => 'getMember'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('last_message_id', $data ?? [], null);
        $this->setIfExists('flags', $data ?? [], null);
        $this->setIfExists('last_pin_timestamp', $data ?? [], null);
        $this->setIfExists('guild_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('parent_id', $data ?? [], null);
        $this->setIfExists('rate_limit_per_user', $data ?? [], null);
        $this->setIfExists('bitrate', $data ?? [], null);
        $this->setIfExists('user_limit', $data ?? [], null);
        $this->setIfExists('rtc_region', $data ?? [], null);
        $this->setIfExists('video_quality_mode', $data ?? [], null);
        $this->setIfExists('permissions', $data ?? [], null);
        $this->setIfExists('topic', $data ?? [], null);
        $this->setIfExists('default_auto_archive_duration', $data ?? [], null);
        $this->setIfExists('default_thread_rate_limit_per_user', $data ?? [], null);
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('permission_overwrites', $data ?? [], null);
        $this->setIfExists('nsfw', $data ?? [], null);
        $this->setIfExists('available_tags', $data ?? [], null);
        $this->setIfExists('default_reaction_emoji', $data ?? [], null);
        $this->setIfExists('default_sort_order', $data ?? [], null);
        $this->setIfExists('default_forum_layout', $data ?? [], null);
        $this->setIfExists('recipients', $data ?? [], null);
        $this->setIfExists('icon', $data ?? [], null);
        $this->setIfExists('owner_id', $data ?? [], null);
        $this->setIfExists('managed', $data ?? [], null);
        $this->setIfExists('application_id', $data ?? [], null);
        $this->setIfExists('thread_metadata', $data ?? [], null);
        $this->setIfExists('message_count', $data ?? [], null);
        $this->setIfExists('member_count', $data ?? [], null);
        $this->setIfExists('total_message_sent', $data ?? [], null);
        $this->setIfExists('applied_tags', $data ?? [], null);
        $this->setIfExists('member', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (!preg_match("^(0|[1-9][0-9]*)$", $this->container['id'])) {
            $invalidProperties[] = "invalid value for 'id', must be conform to the pattern ^(0|[1-9][0-9]*)$.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['flags'] === null) {
            $invalidProperties[] = "'flags' can't be null";
        }
        if ($this->container['guild_id'] === null) {
            $invalidProperties[] = "'guild_id' can't be null";
        }
        if (!preg_match("^(0|[1-9][0-9]*)$", $this->container['guild_id'])) {
            $invalidProperties[] = "invalid value for 'guild_id', must be conform to the pattern ^(0|[1-9][0-9]*)$.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['position'] === null) {
            $invalidProperties[] = "'position' can't be null";
        }
        if ($this->container['recipients'] === null) {
            $invalidProperties[] = "'recipients' can't be null";
        }
        if ($this->container['owner_id'] === null) {
            $invalidProperties[] = "'owner_id' can't be null";
        }
        if (!preg_match("^(0|[1-9][0-9]*)$", $this->container['owner_id'])) {
            $invalidProperties[] = "invalid value for 'owner_id', must be conform to the pattern ^(0|[1-9][0-9]*)$.";
        }

        if (!is_null($this->container['application_id']) && !preg_match("^(0|[1-9][0-9]*)$", $this->container['application_id'])) {
            $invalidProperties[] = "invalid value for 'application_id', must be conform to the pattern ^(0|[1-9][0-9]*)$.";
        }

        if ($this->container['message_count'] === null) {
            $invalidProperties[] = "'message_count' can't be null";
        }
        if ($this->container['member_count'] === null) {
            $invalidProperties[] = "'member_count' can't be null";
        }
        if ($this->container['total_message_sent'] === null) {
            $invalidProperties[] = "'total_message_sent' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return mixed
     */
    public function getId(): mixed
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param mixed $id id
     *
     * @return $this
     */
    public function setId(mixed $id): static
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($id) && (!preg_match("^(0|[1-9][0-9]*)$", ObjectSerializer::toString($id)))) {
            throw new InvalidArgumentException("invalid value for \$id when calling ListGuildChannels200ResponseInner., must conform to the pattern ^(0|[1-9][0-9]*)$.");
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\ChannelTypes
     */
    public function getType(): ?\OpenAPI\Client\Model\ChannelTypes
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\ChannelTypes $type type
     *
     * @return $this
     */
    public function setType(?\OpenAPI\Client\Model\ChannelTypes $type): static
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets last_message_id
     *
     * @return \OpenAPI\Client\Model\UpdateSelfVoiceStateRequestChannelId|null
     */
    public function getLastMessageId(): ?\OpenAPI\Client\Model\UpdateSelfVoiceStateRequestChannelId
    {
        return $this->container['last_message_id'];
    }

    /**
     * Sets last_message_id
     *
     * @param \OpenAPI\Client\Model\UpdateSelfVoiceStateRequestChannelId|null $last_message_id last_message_id
     *
     * @return $this
     */
    public function setLastMessageId(?\OpenAPI\Client\Model\UpdateSelfVoiceStateRequestChannelId $last_message_id): static
    {
        if (is_null($last_message_id)) {
            array_push($this->openAPINullablesSetToNull, 'last_message_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_message_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_message_id'] = $last_message_id;

        return $this;
    }

    /**
     * Gets flags
     *
     * @return mixed
     */
    public function getFlags(): mixed
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     *
     * @param mixed $flags flags
     *
     * @return $this
     */
    public function setFlags(mixed $flags): static
    {
        if (is_null($flags)) {
            array_push($this->openAPINullablesSetToNull, 'flags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('flags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['flags'] = $flags;

        return $this;
    }

    /**
     * Gets last_pin_timestamp
     *
     * @return mixed|null
     */
    public function getLastPinTimestamp(): mixed
    {
        return $this->container['last_pin_timestamp'];
    }

    /**
     * Sets last_pin_timestamp
     *
     * @param mixed|null $last_pin_timestamp last_pin_timestamp
     *
     * @return $this
     */
    public function setLastPinTimestamp(mixed $last_pin_timestamp): static
    {
        if (is_null($last_pin_timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'last_pin_timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_pin_timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_pin_timestamp'] = $last_pin_timestamp;

        return $this;
    }

    /**
     * Gets guild_id
     *
     * @return mixed
     */
    public function getGuildId(): mixed
    {
        return $this->container['guild_id'];
    }

    /**
     * Sets guild_id
     *
     * @param mixed $guild_id guild_id
     *
     * @return $this
     */
    public function setGuildId(mixed $guild_id): static
    {
        if (is_null($guild_id)) {
            array_push($this->openAPINullablesSetToNull, 'guild_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('guild_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($guild_id) && (!preg_match("^(0|[1-9][0-9]*)$", ObjectSerializer::toString($guild_id)))) {
            throw new InvalidArgumentException("invalid value for \$guild_id when calling ListGuildChannels200ResponseInner., must conform to the pattern ^(0|[1-9][0-9]*)$.");
        }

        $this->container['guild_id'] = $guild_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return mixed
     */
    public function getName(): mixed
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param mixed $name name
     *
     * @return $this
     */
    public function setName(mixed $name): static
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return \OpenAPI\Client\Model\UpdateSelfVoiceStateRequestChannelId|null
     */
    public function getParentId(): ?\OpenAPI\Client\Model\UpdateSelfVoiceStateRequestChannelId
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param \OpenAPI\Client\Model\UpdateSelfVoiceStateRequestChannelId|null $parent_id parent_id
     *
     * @return $this
     */
    public function setParentId(?\OpenAPI\Client\Model\UpdateSelfVoiceStateRequestChannelId $parent_id): static
    {
        if (is_null($parent_id)) {
            array_push($this->openAPINullablesSetToNull, 'parent_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets rate_limit_per_user
     *
     * @return mixed|null
     */
    public function getRateLimitPerUser(): mixed
    {
        return $this->container['rate_limit_per_user'];
    }

    /**
     * Sets rate_limit_per_user
     *
     * @param mixed|null $rate_limit_per_user rate_limit_per_user
     *
     * @return $this
     */
    public function setRateLimitPerUser(mixed $rate_limit_per_user): static
    {
        if (is_null($rate_limit_per_user)) {
            array_push($this->openAPINullablesSetToNull, 'rate_limit_per_user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rate_limit_per_user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rate_limit_per_user'] = $rate_limit_per_user;

        return $this;
    }

    /**
     * Gets bitrate
     *
     * @return mixed|null
     */
    public function getBitrate(): mixed
    {
        return $this->container['bitrate'];
    }

    /**
     * Sets bitrate
     *
     * @param mixed|null $bitrate bitrate
     *
     * @return $this
     */
    public function setBitrate(mixed $bitrate): static
    {
        if (is_null($bitrate)) {
            array_push($this->openAPINullablesSetToNull, 'bitrate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bitrate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bitrate'] = $bitrate;

        return $this;
    }

    /**
     * Gets user_limit
     *
     * @return mixed|null
     */
    public function getUserLimit(): mixed
    {
        return $this->container['user_limit'];
    }

    /**
     * Sets user_limit
     *
     * @param mixed|null $user_limit user_limit
     *
     * @return $this
     */
    public function setUserLimit(mixed $user_limit): static
    {
        if (is_null($user_limit)) {
            array_push($this->openAPINullablesSetToNull, 'user_limit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_limit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_limit'] = $user_limit;

        return $this;
    }

    /**
     * Gets rtc_region
     *
     * @return mixed|null
     */
    public function getRtcRegion(): mixed
    {
        return $this->container['rtc_region'];
    }

    /**
     * Sets rtc_region
     *
     * @param mixed|null $rtc_region rtc_region
     *
     * @return $this
     */
    public function setRtcRegion(mixed $rtc_region): static
    {
        if (is_null($rtc_region)) {
            array_push($this->openAPINullablesSetToNull, 'rtc_region');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rtc_region', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rtc_region'] = $rtc_region;

        return $this;
    }

    /**
     * Gets video_quality_mode
     *
     * @return \OpenAPI\Client\Model\VideoQualityModes|null
     */
    public function getVideoQualityMode(): ?\OpenAPI\Client\Model\VideoQualityModes
    {
        return $this->container['video_quality_mode'];
    }

    /**
     * Sets video_quality_mode
     *
     * @param \OpenAPI\Client\Model\VideoQualityModes|null $video_quality_mode video_quality_mode
     *
     * @return $this
     */
    public function setVideoQualityMode(?\OpenAPI\Client\Model\VideoQualityModes $video_quality_mode): static
    {
        if (is_null($video_quality_mode)) {
            array_push($this->openAPINullablesSetToNull, 'video_quality_mode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('video_quality_mode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['video_quality_mode'] = $video_quality_mode;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return mixed|null
     */
    public function getPermissions(): mixed
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param mixed|null $permissions permissions
     *
     * @return $this
     */
    public function setPermissions(mixed $permissions): static
    {
        if (is_null($permissions)) {
            array_push($this->openAPINullablesSetToNull, 'permissions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('permissions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets topic
     *
     * @return mixed|null
     */
    public function getTopic(): mixed
    {
        return $this->container['topic'];
    }

    /**
     * Sets topic
     *
     * @param mixed|null $topic topic
     *
     * @return $this
     */
    public function setTopic(mixed $topic): static
    {
        if (is_null($topic)) {
            array_push($this->openAPINullablesSetToNull, 'topic');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('topic', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['topic'] = $topic;

        return $this;
    }

    /**
     * Gets default_auto_archive_duration
     *
     * @return \OpenAPI\Client\Model\ThreadAutoArchiveDuration|null
     */
    public function getDefaultAutoArchiveDuration(): ?\OpenAPI\Client\Model\ThreadAutoArchiveDuration
    {
        return $this->container['default_auto_archive_duration'];
    }

    /**
     * Sets default_auto_archive_duration
     *
     * @param \OpenAPI\Client\Model\ThreadAutoArchiveDuration|null $default_auto_archive_duration default_auto_archive_duration
     *
     * @return $this
     */
    public function setDefaultAutoArchiveDuration(?\OpenAPI\Client\Model\ThreadAutoArchiveDuration $default_auto_archive_duration): static
    {
        if (is_null($default_auto_archive_duration)) {
            array_push($this->openAPINullablesSetToNull, 'default_auto_archive_duration');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_auto_archive_duration', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_auto_archive_duration'] = $default_auto_archive_duration;

        return $this;
    }

    /**
     * Gets default_thread_rate_limit_per_user
     *
     * @return mixed|null
     */
    public function getDefaultThreadRateLimitPerUser(): mixed
    {
        return $this->container['default_thread_rate_limit_per_user'];
    }

    /**
     * Sets default_thread_rate_limit_per_user
     *
     * @param mixed|null $default_thread_rate_limit_per_user default_thread_rate_limit_per_user
     *
     * @return $this
     */
    public function setDefaultThreadRateLimitPerUser(mixed $default_thread_rate_limit_per_user): static
    {
        if (is_null($default_thread_rate_limit_per_user)) {
            array_push($this->openAPINullablesSetToNull, 'default_thread_rate_limit_per_user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_thread_rate_limit_per_user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_thread_rate_limit_per_user'] = $default_thread_rate_limit_per_user;

        return $this;
    }

    /**
     * Gets position
     *
     * @return mixed
     */
    public function getPosition(): mixed
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param mixed $position position
     *
     * @return $this
     */
    public function setPosition(mixed $position): static
    {
        if (is_null($position)) {
            array_push($this->openAPINullablesSetToNull, 'position');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('position', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets permission_overwrites
     *
     * @return mixed|null
     */
    public function getPermissionOverwrites(): mixed
    {
        return $this->container['permission_overwrites'];
    }

    /**
     * Sets permission_overwrites
     *
     * @param mixed|null $permission_overwrites permission_overwrites
     *
     * @return $this
     */
    public function setPermissionOverwrites(mixed $permission_overwrites): static
    {
        if (is_null($permission_overwrites)) {
            array_push($this->openAPINullablesSetToNull, 'permission_overwrites');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('permission_overwrites', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['permission_overwrites'] = $permission_overwrites;

        return $this;
    }

    /**
     * Gets nsfw
     *
     * @return mixed|null
     */
    public function getNsfw(): mixed
    {
        return $this->container['nsfw'];
    }

    /**
     * Sets nsfw
     *
     * @param mixed|null $nsfw nsfw
     *
     * @return $this
     */
    public function setNsfw(mixed $nsfw): static
    {
        if (is_null($nsfw)) {
            array_push($this->openAPINullablesSetToNull, 'nsfw');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nsfw', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nsfw'] = $nsfw;

        return $this;
    }

    /**
     * Gets available_tags
     *
     * @return mixed|null
     */
    public function getAvailableTags(): mixed
    {
        return $this->container['available_tags'];
    }

    /**
     * Sets available_tags
     *
     * @param mixed|null $available_tags available_tags
     *
     * @return $this
     */
    public function setAvailableTags(mixed $available_tags): static
    {
        if (is_null($available_tags)) {
            array_push($this->openAPINullablesSetToNull, 'available_tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('available_tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['available_tags'] = $available_tags;

        return $this;
    }

    /**
     * Gets default_reaction_emoji
     *
     * @return \OpenAPI\Client\Model\DefaultReactionEmojiResponse|null
     */
    public function getDefaultReactionEmoji(): ?\OpenAPI\Client\Model\DefaultReactionEmojiResponse
    {
        return $this->container['default_reaction_emoji'];
    }

    /**
     * Sets default_reaction_emoji
     *
     * @param \OpenAPI\Client\Model\DefaultReactionEmojiResponse|null $default_reaction_emoji default_reaction_emoji
     *
     * @return $this
     */
    public function setDefaultReactionEmoji(?\OpenAPI\Client\Model\DefaultReactionEmojiResponse $default_reaction_emoji): static
    {
        if (is_null($default_reaction_emoji)) {
            throw new InvalidArgumentException('non-nullable default_reaction_emoji cannot be null');
        }
        $this->container['default_reaction_emoji'] = $default_reaction_emoji;

        return $this;
    }

    /**
     * Gets default_sort_order
     *
     * @return \OpenAPI\Client\Model\ThreadSortOrder|null
     */
    public function getDefaultSortOrder(): ?\OpenAPI\Client\Model\ThreadSortOrder
    {
        return $this->container['default_sort_order'];
    }

    /**
     * Sets default_sort_order
     *
     * @param \OpenAPI\Client\Model\ThreadSortOrder|null $default_sort_order default_sort_order
     *
     * @return $this
     */
    public function setDefaultSortOrder(?\OpenAPI\Client\Model\ThreadSortOrder $default_sort_order): static
    {
        if (is_null($default_sort_order)) {
            array_push($this->openAPINullablesSetToNull, 'default_sort_order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_sort_order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_sort_order'] = $default_sort_order;

        return $this;
    }

    /**
     * Gets default_forum_layout
     *
     * @return \OpenAPI\Client\Model\ForumLayout|null
     */
    public function getDefaultForumLayout(): ?\OpenAPI\Client\Model\ForumLayout
    {
        return $this->container['default_forum_layout'];
    }

    /**
     * Sets default_forum_layout
     *
     * @param \OpenAPI\Client\Model\ForumLayout|null $default_forum_layout default_forum_layout
     *
     * @return $this
     */
    public function setDefaultForumLayout(?\OpenAPI\Client\Model\ForumLayout $default_forum_layout): static
    {
        if (is_null($default_forum_layout)) {
            array_push($this->openAPINullablesSetToNull, 'default_forum_layout');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_forum_layout', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_forum_layout'] = $default_forum_layout;

        return $this;
    }

    /**
     * Gets recipients
     *
     * @return mixed
     */
    public function getRecipients(): mixed
    {
        return $this->container['recipients'];
    }

    /**
     * Sets recipients
     *
     * @param mixed $recipients recipients
     *
     * @return $this
     */
    public function setRecipients(mixed $recipients): static
    {
        if (is_null($recipients)) {
            array_push($this->openAPINullablesSetToNull, 'recipients');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recipients', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recipients'] = $recipients;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return mixed|null
     */
    public function getIcon(): mixed
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param mixed|null $icon icon
     *
     * @return $this
     */
    public function setIcon(mixed $icon): static
    {
        if (is_null($icon)) {
            array_push($this->openAPINullablesSetToNull, 'icon');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('icon', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return mixed
     */
    public function getOwnerId(): mixed
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param mixed $owner_id owner_id
     *
     * @return $this
     */
    public function setOwnerId(mixed $owner_id): static
    {
        if (is_null($owner_id)) {
            array_push($this->openAPINullablesSetToNull, 'owner_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('owner_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($owner_id) && (!preg_match("^(0|[1-9][0-9]*)$", ObjectSerializer::toString($owner_id)))) {
            throw new InvalidArgumentException("invalid value for \$owner_id when calling ListGuildChannels200ResponseInner., must conform to the pattern ^(0|[1-9][0-9]*)$.");
        }

        $this->container['owner_id'] = $owner_id;

        return $this;
    }

    /**
     * Gets managed
     *
     * @return mixed|null
     */
    public function getManaged(): mixed
    {
        return $this->container['managed'];
    }

    /**
     * Sets managed
     *
     * @param mixed|null $managed managed
     *
     * @return $this
     */
    public function setManaged(mixed $managed): static
    {
        if (is_null($managed)) {
            array_push($this->openAPINullablesSetToNull, 'managed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('managed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['managed'] = $managed;

        return $this;
    }

    /**
     * Gets application_id
     *
     * @return mixed|null
     */
    public function getApplicationId(): mixed
    {
        return $this->container['application_id'];
    }

    /**
     * Sets application_id
     *
     * @param mixed|null $application_id application_id
     *
     * @return $this
     */
    public function setApplicationId(mixed $application_id): static
    {
        if (is_null($application_id)) {
            array_push($this->openAPINullablesSetToNull, 'application_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('application_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($application_id) && (!preg_match("^(0|[1-9][0-9]*)$", ObjectSerializer::toString($application_id)))) {
            throw new InvalidArgumentException("invalid value for \$application_id when calling ListGuildChannels200ResponseInner., must conform to the pattern ^(0|[1-9][0-9]*)$.");
        }

        $this->container['application_id'] = $application_id;

        return $this;
    }

    /**
     * Gets thread_metadata
     *
     * @return \OpenAPI\Client\Model\ThreadMetadataResponse|null
     */
    public function getThreadMetadata(): ?\OpenAPI\Client\Model\ThreadMetadataResponse
    {
        return $this->container['thread_metadata'];
    }

    /**
     * Sets thread_metadata
     *
     * @param \OpenAPI\Client\Model\ThreadMetadataResponse|null $thread_metadata thread_metadata
     *
     * @return $this
     */
    public function setThreadMetadata(?\OpenAPI\Client\Model\ThreadMetadataResponse $thread_metadata): static
    {
        if (is_null($thread_metadata)) {
            throw new InvalidArgumentException('non-nullable thread_metadata cannot be null');
        }
        $this->container['thread_metadata'] = $thread_metadata;

        return $this;
    }

    /**
     * Gets message_count
     *
     * @return mixed
     */
    public function getMessageCount(): mixed
    {
        return $this->container['message_count'];
    }

    /**
     * Sets message_count
     *
     * @param mixed $message_count message_count
     *
     * @return $this
     */
    public function setMessageCount(mixed $message_count): static
    {
        if (is_null($message_count)) {
            array_push($this->openAPINullablesSetToNull, 'message_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('message_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['message_count'] = $message_count;

        return $this;
    }

    /**
     * Gets member_count
     *
     * @return mixed
     */
    public function getMemberCount(): mixed
    {
        return $this->container['member_count'];
    }

    /**
     * Sets member_count
     *
     * @param mixed $member_count member_count
     *
     * @return $this
     */
    public function setMemberCount(mixed $member_count): static
    {
        if (is_null($member_count)) {
            array_push($this->openAPINullablesSetToNull, 'member_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('member_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['member_count'] = $member_count;

        return $this;
    }

    /**
     * Gets total_message_sent
     *
     * @return mixed
     */
    public function getTotalMessageSent(): mixed
    {
        return $this->container['total_message_sent'];
    }

    /**
     * Sets total_message_sent
     *
     * @param mixed $total_message_sent total_message_sent
     *
     * @return $this
     */
    public function setTotalMessageSent(mixed $total_message_sent): static
    {
        if (is_null($total_message_sent)) {
            array_push($this->openAPINullablesSetToNull, 'total_message_sent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_message_sent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_message_sent'] = $total_message_sent;

        return $this;
    }

    /**
     * Gets applied_tags
     *
     * @return mixed|null
     */
    public function getAppliedTags(): mixed
    {
        return $this->container['applied_tags'];
    }

    /**
     * Sets applied_tags
     *
     * @param mixed|null $applied_tags applied_tags
     *
     * @return $this
     */
    public function setAppliedTags(mixed $applied_tags): static
    {
        if (is_null($applied_tags)) {
            array_push($this->openAPINullablesSetToNull, 'applied_tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('applied_tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['applied_tags'] = $applied_tags;

        return $this;
    }

    /**
     * Gets member
     *
     * @return \OpenAPI\Client\Model\ThreadMemberResponse|null
     */
    public function getMember(): ?\OpenAPI\Client\Model\ThreadMemberResponse
    {
        return $this->container['member'];
    }

    /**
     * Sets member
     *
     * @param \OpenAPI\Client\Model\ThreadMemberResponse|null $member member
     *
     * @return $this
     */
    public function setMember(?\OpenAPI\Client\Model\ThreadMemberResponse $member): static
    {
        if (is_null($member)) {
            throw new InvalidArgumentException('non-nullable member cannot be null');
        }
        $this->container['member'] = $member;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


