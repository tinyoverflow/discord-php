<?php
/**
 * GuildInviteResponse
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Discord HTTP API (Preview)
 *
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * GuildInviteResponse Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GuildInviteResponse implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'GuildInviteResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'type' => 'OneOf',
        'code' => 'string',
        'inviter' => '\OpenAPI\Client\Model\UserResponse',
        'max_age' => 'int',
        'created_at' => '\DateTime',
        'expires_at' => '\DateTime',
        'is_contact' => 'bool',
        'flags' => 'int',
        'guild' => '\OpenAPI\Client\Model\InviteGuildResponse',
        'guild_id' => 'string',
        'channel' => '\OpenAPI\Client\Model\InviteChannelResponse',
        'stage_instance' => '\OpenAPI\Client\Model\InviteStageInstanceResponse',
        'target_type' => '\OpenAPI\Client\Model\InviteTargetTypes',
        'target_user' => '\OpenAPI\Client\Model\UserResponse',
        'target_application' => '\OpenAPI\Client\Model\InviteApplicationResponse',
        'guild_scheduled_event' => '\OpenAPI\Client\Model\ScheduledEventResponse',
        'uses' => 'int',
        'max_uses' => 'int',
        'temporary' => 'bool',
        'approximate_member_count' => 'int',
        'approximate_presence_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'type' => null,
        'code' => null,
        'inviter' => null,
        'max_age' => 'int32',
        'created_at' => 'date-time',
        'expires_at' => 'date-time',
        'is_contact' => null,
        'flags' => 'int32',
        'guild' => null,
        'guild_id' => 'snowflake',
        'channel' => null,
        'stage_instance' => null,
        'target_type' => null,
        'target_user' => null,
        'target_application' => null,
        'guild_scheduled_event' => null,
        'uses' => 'int32',
        'max_uses' => 'int32',
        'temporary' => null,
        'approximate_member_count' => 'int32',
        'approximate_presence_count' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'type' => true,
		'code' => false,
		'inviter' => true,
		'max_age' => true,
		'created_at' => true,
		'expires_at' => true,
		'is_contact' => true,
		'flags' => true,
		'guild' => true,
		'guild_id' => false,
		'channel' => true,
		'stage_instance' => true,
		'target_type' => true,
		'target_user' => true,
		'target_application' => true,
		'guild_scheduled_event' => true,
		'uses' => true,
		'max_uses' => true,
		'temporary' => true,
		'approximate_member_count' => true,
		'approximate_presence_count' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'type' => 'type',
        'code' => 'code',
        'inviter' => 'inviter',
        'max_age' => 'max_age',
        'created_at' => 'created_at',
        'expires_at' => 'expires_at',
        'is_contact' => 'is_contact',
        'flags' => 'flags',
        'guild' => 'guild',
        'guild_id' => 'guild_id',
        'channel' => 'channel',
        'stage_instance' => 'stage_instance',
        'target_type' => 'target_type',
        'target_user' => 'target_user',
        'target_application' => 'target_application',
        'guild_scheduled_event' => 'guild_scheduled_event',
        'uses' => 'uses',
        'max_uses' => 'max_uses',
        'temporary' => 'temporary',
        'approximate_member_count' => 'approximate_member_count',
        'approximate_presence_count' => 'approximate_presence_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'type' => 'setType',
        'code' => 'setCode',
        'inviter' => 'setInviter',
        'max_age' => 'setMaxAge',
        'created_at' => 'setCreatedAt',
        'expires_at' => 'setExpiresAt',
        'is_contact' => 'setIsContact',
        'flags' => 'setFlags',
        'guild' => 'setGuild',
        'guild_id' => 'setGuildId',
        'channel' => 'setChannel',
        'stage_instance' => 'setStageInstance',
        'target_type' => 'setTargetType',
        'target_user' => 'setTargetUser',
        'target_application' => 'setTargetApplication',
        'guild_scheduled_event' => 'setGuildScheduledEvent',
        'uses' => 'setUses',
        'max_uses' => 'setMaxUses',
        'temporary' => 'setTemporary',
        'approximate_member_count' => 'setApproximateMemberCount',
        'approximate_presence_count' => 'setApproximatePresenceCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'type' => 'getType',
        'code' => 'getCode',
        'inviter' => 'getInviter',
        'max_age' => 'getMaxAge',
        'created_at' => 'getCreatedAt',
        'expires_at' => 'getExpiresAt',
        'is_contact' => 'getIsContact',
        'flags' => 'getFlags',
        'guild' => 'getGuild',
        'guild_id' => 'getGuildId',
        'channel' => 'getChannel',
        'stage_instance' => 'getStageInstance',
        'target_type' => 'getTargetType',
        'target_user' => 'getTargetUser',
        'target_application' => 'getTargetApplication',
        'guild_scheduled_event' => 'getGuildScheduledEvent',
        'uses' => 'getUses',
        'max_uses' => 'getMaxUses',
        'temporary' => 'getTemporary',
        'approximate_member_count' => 'getApproximateMemberCount',
        'approximate_presence_count' => 'getApproximatePresenceCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('inviter', $data ?? [], null);
        $this->setIfExists('max_age', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('expires_at', $data ?? [], null);
        $this->setIfExists('is_contact', $data ?? [], null);
        $this->setIfExists('flags', $data ?? [], null);
        $this->setIfExists('guild', $data ?? [], null);
        $this->setIfExists('guild_id', $data ?? [], null);
        $this->setIfExists('channel', $data ?? [], null);
        $this->setIfExists('stage_instance', $data ?? [], null);
        $this->setIfExists('target_type', $data ?? [], null);
        $this->setIfExists('target_user', $data ?? [], null);
        $this->setIfExists('target_application', $data ?? [], null);
        $this->setIfExists('guild_scheduled_event', $data ?? [], null);
        $this->setIfExists('uses', $data ?? [], null);
        $this->setIfExists('max_uses', $data ?? [], null);
        $this->setIfExists('temporary', $data ?? [], null);
        $this->setIfExists('approximate_member_count', $data ?? [], null);
        $this->setIfExists('approximate_presence_count', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if (!is_null($this->container['guild_id']) && !preg_match("/^(0|[1-9][0-9]*)$/", $this->container['guild_id'])) {
            $invalidProperties[] = "invalid value for 'guild_id', must be conform to the pattern /^(0|[1-9][0-9]*)$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return OneOf|null
     */
    public function getType(): ?OneOf
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param OneOf|null $type type
     *
     * @return $this
     */
    public function setType(?OneOf $type): static
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode(): string
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode(string $code): static
    {
        if (is_null($code)) {
            throw new InvalidArgumentException('non-nullable code cannot be null');
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets inviter
     *
     * @return \OpenAPI\Client\Model\UserResponse|null
     */
    public function getInviter(): ?\OpenAPI\Client\Model\UserResponse
    {
        return $this->container['inviter'];
    }

    /**
     * Sets inviter
     *
     * @param \OpenAPI\Client\Model\UserResponse|null $inviter inviter
     *
     * @return $this
     */
    public function setInviter(?\OpenAPI\Client\Model\UserResponse $inviter): static
    {
        if (is_null($inviter)) {
            array_push($this->openAPINullablesSetToNull, 'inviter');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inviter', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['inviter'] = $inviter;

        return $this;
    }

    /**
     * Gets max_age
     *
     * @return int|null
     */
    public function getMaxAge(): ?int
    {
        return $this->container['max_age'];
    }

    /**
     * Sets max_age
     *
     * @param int|null $max_age max_age
     *
     * @return $this
     */
    public function setMaxAge(?int $max_age): static
    {
        if (is_null($max_age)) {
            array_push($this->openAPINullablesSetToNull, 'max_age');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_age', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_age'] = $max_age;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt(): ?\DateTime
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt(?\DateTime $created_at): static
    {
        if (is_null($created_at)) {
            array_push($this->openAPINullablesSetToNull, 'created_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return \DateTime|null
     */
    public function getExpiresAt(): ?\DateTime
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param \DateTime|null $expires_at expires_at
     *
     * @return $this
     */
    public function setExpiresAt(?\DateTime $expires_at): static
    {
        if (is_null($expires_at)) {
            array_push($this->openAPINullablesSetToNull, 'expires_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expires_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets is_contact
     *
     * @return bool|null
     */
    public function getIsContact(): ?bool
    {
        return $this->container['is_contact'];
    }

    /**
     * Sets is_contact
     *
     * @param bool|null $is_contact is_contact
     *
     * @return $this
     */
    public function setIsContact(?bool $is_contact): static
    {
        if (is_null($is_contact)) {
            array_push($this->openAPINullablesSetToNull, 'is_contact');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_contact', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_contact'] = $is_contact;

        return $this;
    }

    /**
     * Gets flags
     *
     * @return int|null
     */
    public function getFlags(): ?int
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     *
     * @param int|null $flags flags
     *
     * @return $this
     */
    public function setFlags(?int $flags): static
    {
        if (is_null($flags)) {
            array_push($this->openAPINullablesSetToNull, 'flags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('flags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['flags'] = $flags;

        return $this;
    }

    /**
     * Gets guild
     *
     * @return \OpenAPI\Client\Model\InviteGuildResponse|null
     */
    public function getGuild(): ?\OpenAPI\Client\Model\InviteGuildResponse
    {
        return $this->container['guild'];
    }

    /**
     * Sets guild
     *
     * @param \OpenAPI\Client\Model\InviteGuildResponse|null $guild guild
     *
     * @return $this
     */
    public function setGuild(?\OpenAPI\Client\Model\InviteGuildResponse $guild): static
    {
        if (is_null($guild)) {
            array_push($this->openAPINullablesSetToNull, 'guild');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('guild', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['guild'] = $guild;

        return $this;
    }

    /**
     * Gets guild_id
     *
     * @return string|null
     */
    public function getGuildId(): ?string
    {
        return $this->container['guild_id'];
    }

    /**
     * Sets guild_id
     *
     * @param string|null $guild_id guild_id
     *
     * @return $this
     */
    public function setGuildId(?string $guild_id): static
    {
        if (is_null($guild_id)) {
            throw new InvalidArgumentException('non-nullable guild_id cannot be null');
        }

        if ((!preg_match("/^(0|[1-9][0-9]*)$/", ObjectSerializer::toString($guild_id)))) {
            throw new InvalidArgumentException("invalid value for \$guild_id when calling GuildInviteResponse., must conform to the pattern /^(0|[1-9][0-9]*)$/.");
        }

        $this->container['guild_id'] = $guild_id;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return \OpenAPI\Client\Model\InviteChannelResponse|null
     */
    public function getChannel(): ?\OpenAPI\Client\Model\InviteChannelResponse
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param \OpenAPI\Client\Model\InviteChannelResponse|null $channel channel
     *
     * @return $this
     */
    public function setChannel(?\OpenAPI\Client\Model\InviteChannelResponse $channel): static
    {
        if (is_null($channel)) {
            array_push($this->openAPINullablesSetToNull, 'channel');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channel', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets stage_instance
     *
     * @return \OpenAPI\Client\Model\InviteStageInstanceResponse|null
     */
    public function getStageInstance(): ?\OpenAPI\Client\Model\InviteStageInstanceResponse
    {
        return $this->container['stage_instance'];
    }

    /**
     * Sets stage_instance
     *
     * @param \OpenAPI\Client\Model\InviteStageInstanceResponse|null $stage_instance stage_instance
     *
     * @return $this
     */
    public function setStageInstance(?\OpenAPI\Client\Model\InviteStageInstanceResponse $stage_instance): static
    {
        if (is_null($stage_instance)) {
            array_push($this->openAPINullablesSetToNull, 'stage_instance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stage_instance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stage_instance'] = $stage_instance;

        return $this;
    }

    /**
     * Gets target_type
     *
     * @return \OpenAPI\Client\Model\InviteTargetTypes|null
     */
    public function getTargetType(): ?\OpenAPI\Client\Model\InviteTargetTypes
    {
        return $this->container['target_type'];
    }

    /**
     * Sets target_type
     *
     * @param \OpenAPI\Client\Model\InviteTargetTypes|null $target_type target_type
     *
     * @return $this
     */
    public function setTargetType(?\OpenAPI\Client\Model\InviteTargetTypes $target_type): static
    {
        if (is_null($target_type)) {
            array_push($this->openAPINullablesSetToNull, 'target_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('target_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['target_type'] = $target_type;

        return $this;
    }

    /**
     * Gets target_user
     *
     * @return \OpenAPI\Client\Model\UserResponse|null
     */
    public function getTargetUser(): ?\OpenAPI\Client\Model\UserResponse
    {
        return $this->container['target_user'];
    }

    /**
     * Sets target_user
     *
     * @param \OpenAPI\Client\Model\UserResponse|null $target_user target_user
     *
     * @return $this
     */
    public function setTargetUser(?\OpenAPI\Client\Model\UserResponse $target_user): static
    {
        if (is_null($target_user)) {
            array_push($this->openAPINullablesSetToNull, 'target_user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('target_user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['target_user'] = $target_user;

        return $this;
    }

    /**
     * Gets target_application
     *
     * @return \OpenAPI\Client\Model\InviteApplicationResponse|null
     */
    public function getTargetApplication(): ?\OpenAPI\Client\Model\InviteApplicationResponse
    {
        return $this->container['target_application'];
    }

    /**
     * Sets target_application
     *
     * @param \OpenAPI\Client\Model\InviteApplicationResponse|null $target_application target_application
     *
     * @return $this
     */
    public function setTargetApplication(?\OpenAPI\Client\Model\InviteApplicationResponse $target_application): static
    {
        if (is_null($target_application)) {
            array_push($this->openAPINullablesSetToNull, 'target_application');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('target_application', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['target_application'] = $target_application;

        return $this;
    }

    /**
     * Gets guild_scheduled_event
     *
     * @return \OpenAPI\Client\Model\ScheduledEventResponse|null
     */
    public function getGuildScheduledEvent(): ?\OpenAPI\Client\Model\ScheduledEventResponse
    {
        return $this->container['guild_scheduled_event'];
    }

    /**
     * Sets guild_scheduled_event
     *
     * @param \OpenAPI\Client\Model\ScheduledEventResponse|null $guild_scheduled_event guild_scheduled_event
     *
     * @return $this
     */
    public function setGuildScheduledEvent(?\OpenAPI\Client\Model\ScheduledEventResponse $guild_scheduled_event): static
    {
        if (is_null($guild_scheduled_event)) {
            array_push($this->openAPINullablesSetToNull, 'guild_scheduled_event');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('guild_scheduled_event', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['guild_scheduled_event'] = $guild_scheduled_event;

        return $this;
    }

    /**
     * Gets uses
     *
     * @return int|null
     */
    public function getUses(): ?int
    {
        return $this->container['uses'];
    }

    /**
     * Sets uses
     *
     * @param int|null $uses uses
     *
     * @return $this
     */
    public function setUses(?int $uses): static
    {
        if (is_null($uses)) {
            array_push($this->openAPINullablesSetToNull, 'uses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['uses'] = $uses;

        return $this;
    }

    /**
     * Gets max_uses
     *
     * @return int|null
     */
    public function getMaxUses(): ?int
    {
        return $this->container['max_uses'];
    }

    /**
     * Sets max_uses
     *
     * @param int|null $max_uses max_uses
     *
     * @return $this
     */
    public function setMaxUses(?int $max_uses): static
    {
        if (is_null($max_uses)) {
            array_push($this->openAPINullablesSetToNull, 'max_uses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_uses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_uses'] = $max_uses;

        return $this;
    }

    /**
     * Gets temporary
     *
     * @return bool|null
     */
    public function getTemporary(): ?bool
    {
        return $this->container['temporary'];
    }

    /**
     * Sets temporary
     *
     * @param bool|null $temporary temporary
     *
     * @return $this
     */
    public function setTemporary(?bool $temporary): static
    {
        if (is_null($temporary)) {
            array_push($this->openAPINullablesSetToNull, 'temporary');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('temporary', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['temporary'] = $temporary;

        return $this;
    }

    /**
     * Gets approximate_member_count
     *
     * @return int|null
     */
    public function getApproximateMemberCount(): ?int
    {
        return $this->container['approximate_member_count'];
    }

    /**
     * Sets approximate_member_count
     *
     * @param int|null $approximate_member_count approximate_member_count
     *
     * @return $this
     */
    public function setApproximateMemberCount(?int $approximate_member_count): static
    {
        if (is_null($approximate_member_count)) {
            array_push($this->openAPINullablesSetToNull, 'approximate_member_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('approximate_member_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['approximate_member_count'] = $approximate_member_count;

        return $this;
    }

    /**
     * Gets approximate_presence_count
     *
     * @return int|null
     */
    public function getApproximatePresenceCount(): ?int
    {
        return $this->container['approximate_presence_count'];
    }

    /**
     * Sets approximate_presence_count
     *
     * @param int|null $approximate_presence_count approximate_presence_count
     *
     * @return $this
     */
    public function setApproximatePresenceCount(?int $approximate_presence_count): static
    {
        if (is_null($approximate_presence_count)) {
            array_push($this->openAPINullablesSetToNull, 'approximate_presence_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('approximate_presence_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['approximate_presence_count'] = $approximate_presence_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


