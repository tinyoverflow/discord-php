<?php
/**
 * CreateStageInstanceRequest
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Discord HTTP API (Preview)
 *
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * CreateStageInstanceRequest Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class CreateStageInstanceRequest implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'create_stage_instance_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'topic' => 'string',
        'channel_id' => 'string',
        'privacy_level' => '\OpenAPI\Client\Model\StageInstancesPrivacyLevels',
        'guild_scheduled_event_id' => 'string',
        'send_start_notification' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'topic' => null,
        'channel_id' => 'snowflake',
        'privacy_level' => null,
        'guild_scheduled_event_id' => 'snowflake',
        'send_start_notification' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'topic' => false,
		'channel_id' => false,
		'privacy_level' => true,
		'guild_scheduled_event_id' => false,
		'send_start_notification' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'topic' => 'topic',
        'channel_id' => 'channel_id',
        'privacy_level' => 'privacy_level',
        'guild_scheduled_event_id' => 'guild_scheduled_event_id',
        'send_start_notification' => 'send_start_notification'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'topic' => 'setTopic',
        'channel_id' => 'setChannelId',
        'privacy_level' => 'setPrivacyLevel',
        'guild_scheduled_event_id' => 'setGuildScheduledEventId',
        'send_start_notification' => 'setSendStartNotification'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'topic' => 'getTopic',
        'channel_id' => 'getChannelId',
        'privacy_level' => 'getPrivacyLevel',
        'guild_scheduled_event_id' => 'getGuildScheduledEventId',
        'send_start_notification' => 'getSendStartNotification'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('topic', $data ?? [], null);
        $this->setIfExists('channel_id', $data ?? [], null);
        $this->setIfExists('privacy_level', $data ?? [], null);
        $this->setIfExists('guild_scheduled_event_id', $data ?? [], null);
        $this->setIfExists('send_start_notification', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['topic'] === null) {
            $invalidProperties[] = "'topic' can't be null";
        }
        if ((mb_strlen($this->container['topic']) > 120)) {
            $invalidProperties[] = "invalid value for 'topic', the character length must be smaller than or equal to 120.";
        }

        if ((mb_strlen($this->container['topic']) < 1)) {
            $invalidProperties[] = "invalid value for 'topic', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['channel_id'] === null) {
            $invalidProperties[] = "'channel_id' can't be null";
        }
        if (!preg_match("/^(0|[1-9][0-9]*)$/", $this->container['channel_id'])) {
            $invalidProperties[] = "invalid value for 'channel_id', must be conform to the pattern /^(0|[1-9][0-9]*)$/.";
        }

        if (!is_null($this->container['guild_scheduled_event_id']) && !preg_match("/^(0|[1-9][0-9]*)$/", $this->container['guild_scheduled_event_id'])) {
            $invalidProperties[] = "invalid value for 'guild_scheduled_event_id', must be conform to the pattern /^(0|[1-9][0-9]*)$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets topic
     *
     * @return string
     */
    public function getTopic(): string
    {
        return $this->container['topic'];
    }

    /**
     * Sets topic
     *
     * @param string $topic topic
     *
     * @return $this
     */
    public function setTopic(string $topic): static
    {
        if (is_null($topic)) {
            throw new InvalidArgumentException('non-nullable topic cannot be null');
        }
        if ((mb_strlen($topic) > 120)) {
            throw new InvalidArgumentException('invalid length for $topic when calling CreateStageInstanceRequest., must be smaller than or equal to 120.');
        }
        if ((mb_strlen($topic) < 1)) {
            throw new InvalidArgumentException('invalid length for $topic when calling CreateStageInstanceRequest., must be bigger than or equal to 1.');
        }

        $this->container['topic'] = $topic;

        return $this;
    }

    /**
     * Gets channel_id
     *
     * @return string
     */
    public function getChannelId(): string
    {
        return $this->container['channel_id'];
    }

    /**
     * Sets channel_id
     *
     * @param string $channel_id channel_id
     *
     * @return $this
     */
    public function setChannelId(string $channel_id): static
    {
        if (is_null($channel_id)) {
            throw new InvalidArgumentException('non-nullable channel_id cannot be null');
        }

        if ((!preg_match("/^(0|[1-9][0-9]*)$/", ObjectSerializer::toString($channel_id)))) {
            throw new InvalidArgumentException("invalid value for \$channel_id when calling CreateStageInstanceRequest., must conform to the pattern /^(0|[1-9][0-9]*)$/.");
        }

        $this->container['channel_id'] = $channel_id;

        return $this;
    }

    /**
     * Gets privacy_level
     *
     * @return \OpenAPI\Client\Model\StageInstancesPrivacyLevels|null
     */
    public function getPrivacyLevel(): ?\OpenAPI\Client\Model\StageInstancesPrivacyLevels
    {
        return $this->container['privacy_level'];
    }

    /**
     * Sets privacy_level
     *
     * @param \OpenAPI\Client\Model\StageInstancesPrivacyLevels|null $privacy_level privacy_level
     *
     * @return $this
     */
    public function setPrivacyLevel(?\OpenAPI\Client\Model\StageInstancesPrivacyLevels $privacy_level): static
    {
        if (is_null($privacy_level)) {
            array_push($this->openAPINullablesSetToNull, 'privacy_level');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('privacy_level', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['privacy_level'] = $privacy_level;

        return $this;
    }

    /**
     * Gets guild_scheduled_event_id
     *
     * @return string|null
     */
    public function getGuildScheduledEventId(): ?string
    {
        return $this->container['guild_scheduled_event_id'];
    }

    /**
     * Sets guild_scheduled_event_id
     *
     * @param string|null $guild_scheduled_event_id guild_scheduled_event_id
     *
     * @return $this
     */
    public function setGuildScheduledEventId(?string $guild_scheduled_event_id): static
    {
        if (is_null($guild_scheduled_event_id)) {
            throw new InvalidArgumentException('non-nullable guild_scheduled_event_id cannot be null');
        }

        if ((!preg_match("/^(0|[1-9][0-9]*)$/", ObjectSerializer::toString($guild_scheduled_event_id)))) {
            throw new InvalidArgumentException("invalid value for \$guild_scheduled_event_id when calling CreateStageInstanceRequest., must conform to the pattern /^(0|[1-9][0-9]*)$/.");
        }

        $this->container['guild_scheduled_event_id'] = $guild_scheduled_event_id;

        return $this;
    }

    /**
     * Gets send_start_notification
     *
     * @return bool|null
     */
    public function getSendStartNotification(): ?bool
    {
        return $this->container['send_start_notification'];
    }

    /**
     * Sets send_start_notification
     *
     * @param bool|null $send_start_notification send_start_notification
     *
     * @return $this
     */
    public function setSendStartNotification(?bool $send_start_notification): static
    {
        if (is_null($send_start_notification)) {
            array_push($this->openAPINullablesSetToNull, 'send_start_notification');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('send_start_notification', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['send_start_notification'] = $send_start_notification;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


